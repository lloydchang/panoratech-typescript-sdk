overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/filestorage/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.groups.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/crm/engagements"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmEngagements
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/purchaseorders"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ticketing/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ticketing/comments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedTicketingCommentInputCreatorType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.create({
                xConnectionToken: "<value>",
                unifiedTicketingCommentInput: {
                  body: "Assigned to Eric !",
                  htmlBody: "<p>Assigned to Eric !</p>",
                  isPrivate: false,
                  creatorType: UnifiedTicketingCommentInputCreatorType.User,
                  ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  attachments: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.companies.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.create({
                xConnectionToken: "<value>",
                unifiedCrmDealInput: {
                  name: "Huge Contract with Acme",
                  description: "Contract with Sales Operations Team",
                  amount: 1000,
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  stageId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/incomestatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.incomestatements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingAttachmentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/vendorcredits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.vendorcredits.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ecommerce/products/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceProduct
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/tasks"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmTask
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedCrmTaskInputStatus } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.create({
                xConnectionToken: "<value>",
                unifiedCrmTaskInput: {
                  subject: "Answer customers",
                  content: "Prepare email campaign",
                  status: UnifiedCrmTaskInputStatus.Pending,
                  dueDate: "2024-10-01T12:00:00Z",
                  finishedDate: "2024-10-01T12:00:00Z",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  dealId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employerbenefits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployerBenefits
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employerbenefits.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/incomestatements"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingIncomeStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.incomestatements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/filestorage/drives"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageDrives
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.drives.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/paygroups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPaygroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.paygroups.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.applications.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsApplicationInput: {
                  appliedAt: new Date("2024-10-01T12:00:00Z"),
                  rejectedAt: new Date("2024-10-01T12:00:00Z"),
                  offers: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    "12345678-1234-1234-1234-123456789012",
                  ],
                  source: "Source Name",
                  creditedTo: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  currentStage: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  rejectReason: "Candidate not experienced enough",
                  candidateId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  jobId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhooks"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createWebhookPublic
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.create({
                url: "https://acme.com/webhook_receiver",
                description: "Webhook to receive connection events",
                scope: [
                  "connection.created",
                ],
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/payrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.payrollruns.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffbalances/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoffbalance
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffbalances.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobinterviewstages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobinterviewstages.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/companyinfos"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCompanyInfos
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.companyinfos.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ecommerce/customers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceCustomer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.customers.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";
            import { AddressType, EmailAddressType, PhoneType, UnifiedCrmCompanyInputIndustry } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmCompanyInput: {
                  name: "Acme",
                  industry: UnifiedCrmCompanyInputIndustry.Accounting,
                  numberOfEmployees: 10,
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  emailAddresses: [
                    {
                      emailAddress: "acme@gmail.com",
                      emailAddressType: EmailAddressType.Work,
                    },
                  ],
                  addresses: [
                    {
                      street1: "5th Avenue",
                      street2: "<value>",
                      city: "New York",
                      state: "NY",
                      postalCode: "46842",
                      country: "USA",
                      addressType: AddressType.Work,
                      ownerType: "<value>",
                    },
                  ],
                  phoneNumbers: [
                    {
                      phoneNumber: "+33660606067",
                      phoneType: PhoneType.Work,
                    },
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffbalances"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffbalances
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffbalances.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/events"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.events.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/templates"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationTemplateInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ecommerce/products"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listEcommerceProducts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/expenses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folders"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/expenses"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingExpenseInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoices"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingInvoiceInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ecommerce/products"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createEcommerceProduct
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.products.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedEcommerceProductInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/campaigns"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationCampaignInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.scorecards.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/projects"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createProject
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.projects.create({
                name: "Project Name",
                idOrganization: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                idUser: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisLocation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.locations.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activities/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.activities.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffs.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/transactions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.transactions.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/auth/login"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: signIn
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.auth.login.signIn({\n    email: \"Oda.Treutel97@hotmail.com\",\n    passwordHash: \"<value>\",\n  });\n\n  \n}\n\nrun();"
  - target: $["paths"]["/ticketing/comments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingComments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/companyinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCompanyInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.companyinfos.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/taxrates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.taxrates.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/crm/tasks"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/employerbenefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployerBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employerbenefits.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/actions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationActionInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisCompanies
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.companies.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/eeocs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.eeocs.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/purchaseorders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/items"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.items.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ticketing/teams/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTeam
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.teams.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field_mappings"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: defineCustomField
          source: |-
            import { Panora } from "@panora/sdk";
            import { CustomFieldCreateDtoDataType, CustomFieldCreateDtoObjectTypeOwner } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.defineCustomField({
                objectTypeOwner: CustomFieldCreateDtoObjectTypeOwner.Company,
                name: "my_favorite_dish",
                description: "Favorite Dish",
                dataType: CustomFieldCreateDtoDataType.String,
                sourceCustomFieldId: "id_1",
                sourceProvider: "hubspot",
                linkedUserId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationCampaigns
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/dependents"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisDependents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.dependents.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/events/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.events.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/payments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingPayment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.payments.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingPaymentInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/files"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/actions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/emails/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEmail
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.emails.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/items/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingItem
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.items.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/transactions"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTransaction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.transactions.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ticketing/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.create({
                xConnectionToken: "<value>",
                unifiedTicketingAttachmentInput: {
                  fileName: "features_planning.pdf",
                  fileUrl: "https://example.com/features_planning.pdf",
                  uploader: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  commentId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/creditnotes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.creditnotes.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/phonenumbers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.phonenumbers.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/creditnotes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCreditNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.creditnotes.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked_users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listLinkedUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.list();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsDepartment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.departments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interviews"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedAtsInterviewInputStatus } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.interviews.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsInterviewInput: {
                  status: UnifiedAtsInterviewInputStatus.Scheduled,
                  applicationId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  jobInterviewStageId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  organizedBy: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  interviewers: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  location: "San Francisco",
                  startAt: new Date("2024-10-01T12:00:00Z"),
                  endAt: new Date("2024-10-01T12:00:00Z"),
                  remoteCreatedAt: new Date("2024-10-01T12:00:00Z"),
                  remoteUpdatedAt: new Date("2024-10-01T12:00:00Z"),
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/vendorcredits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingVendorCredit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.vendorcredits.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/collections/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCollection
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.collections.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/engagements"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmEngagement
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedCrmEngagementInputDirection, UnifiedCrmEngagementInputType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.engagements.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmEngagementInput: {
                  content: "Meeting call with CTO",
                  direction: UnifiedCrmEngagementInputDirection.Inbound,
                  subject: "Technical features planning",
                  startAt: new Date("2024-10-01T12:00:00Z"),
                  endTime: new Date("2024-10-01T22:00:00Z"),
                  type: UnifiedCrmEngagementInputType.Meeting,
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contacts: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/dependents/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisDependent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.dependents.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/crm/tasks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmTask
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.tasks.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";
            import {
              UnifiedTicketingTicketInputCreatorType,
              UnifiedTicketingTicketInputPriority,
              UnifiedTicketingTicketInputStatus,
              UnifiedTicketingTicketInputType,
            } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedTicketingTicketInput: {
                  name: "Customer Service Inquiry",
                  status: UnifiedTicketingTicketInputStatus.Open,
                  description: "Help customer",
                  dueDate: new Date("2024-10-01T12:00:00Z"),
                  type: UnifiedTicketingTicketInputType.Bug,
                  parentTicket: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  collections: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  tags: [
                    "my_tag",
                    "urgent_tag",
                  ],
                  completedAt: new Date("2024-10-01T12:00:00Z"),
                  priority: UnifiedTicketingTicketInputPriority.High,
                  assignedTo: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  comment: {
                    body: "Assigned to Eric !",
                    htmlBody: "<p>Assigned to Eric !</p>",
                    isPrivate: false,
                    creatorType: UnifiedTicketingTicketInputCreatorType.User,
                    ticketId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    attachments: [
                      "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                    ],
                  },
                  accountId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  attachments: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffs"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffs.create({
                xConnectionToken: "<value>",
                unifiedHrisTimeoffInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/expenses"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingExpense
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.expenses.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployees
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employees.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/paygroups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisPaygroups
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.paygroups.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ecommerce/customers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listEcommerceCustomers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.customers.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employees.create({
                xConnectionToken: "<value>",
                unifiedHrisEmployeeInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/lists"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.create({
                xConnectionToken: "<value>",
                unifiedMarketingautomationListInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobs.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoices"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/taxrates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTaxRate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.taxrates.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/sync/resync"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: resync
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.sync.resync();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/employeepayrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employeepayrollruns.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/automations"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedMarketingautomationAutomationInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/templates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationTemplates
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ticketing/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmCompany
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.companies.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisBenefits
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.benefits.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/bankinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBankInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.bankinfos.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/drives/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageDrive
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.drives.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.groups.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/teams"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTeams
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.teams.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationContacts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.contacts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/journalentries"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingJournalentryInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employeepayrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployeePayrollRun
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employeepayrollruns.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/rejectreasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsRejectReason
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.rejectreasons.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tickets"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTicket
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tickets.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/passthrough/{retryId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getRetriedRequestResponse
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.passthrough.retryid.getRetriedRequestResponse({\n    retryId: \"<value>\",\n  });\n\n  \n}\n\nrun();"
  - target: $["paths"]["/webhooks/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: typescript
          label: updateStatus
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.updateStatus({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmDeal
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/passthrough"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: request
          source: |-
            import { Panora } from "@panora/sdk";
            import { PassThroughRequestDtoMethod } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.passthrough.request({
                xConnectionToken: "<value>",
                passThroughRequestDto: {
                  method: PassThroughRequestDtoMethod.Get,
                  path: "/dev",
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAutomations
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.interviews.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidates.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/accounts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingAccountInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/cashflowstatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.cashflowstatements.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folders"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFolderInput: {
                  name: "school",
                  size: "2048",
                  folderUrl: "https://example.com/school",
                  description: "All things school related",
                  driveId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  parentFolderId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  sharedLink: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  permission: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tags"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tags.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/actions"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAction
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.actions.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.applications.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/field_mappings/entities"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getFieldMappingsEntities
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.fieldMappings.getFieldMappingsEntities();\n\n  \n}\n\nrun();"
  - target: $["paths"]["/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.offers.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/balancesheets"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingBalanceSheets
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.balancesheets.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidates.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffer
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.offers.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhooks/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: typescript
          label: delete
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.delete({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/comments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingComment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.comments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/automations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAutomation
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.automations.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.contacts.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ecommerce/fulfillments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listEcommerceFulfillments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.fulfillments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/field_mappings/values"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getFieldMappingValues
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.fieldMappings.getFieldMappingValues();\n\n  \n}\n\nrun();"
  - target: $["paths"]["/ats/eeocs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsEeocs
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.eeocs.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/health"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: health
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.health();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/linked_users"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.create({
                linkedUserOriginId: "id_1",
                alias: "acme",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAttachments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/journalentries"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/marketingautomation/lists"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationLists
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/tags"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsTags
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.tags.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/trackingcategories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTrackingCategory
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.trackingcategories.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hello
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hello();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field_mappings/define"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: definitions
          source: |-
            import { Panora } from "@panora/sdk";
            import { DataType, ObjectTypeOwner } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.definitions({
                objectTypeOwner: ObjectTypeOwner.Company,
                name: "fav_dish",
                description: "My favorite dish",
                dataType: DataType.String,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisGroups
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.groups.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/journalentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingJournalEntry
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.journalentries.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/phonenumbers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPhonenumber
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.phonenumbers.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmContact
          source: |-
            import { Panora } from "@panora/sdk";
            import { AddressType, EmailAddressType, PhoneType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmContactInput: {
                  firstName: "John",
                  lastName: "Doe",
                  emailAddresses: [
                    {
                      emailAddress: "Jena.Nienow28@yahoo.com",
                      emailAddressType: EmailAddressType.Personal,
                    },
                  ],
                  phoneNumbers: [
                    {
                      phoneNumber: "<value>",
                      phoneType: PhoneType.Work,
                    },
                  ],
                  addresses: [
                    {
                      street1: "<value>",
                      street2: "<value>",
                      city: "Anytown",
                      state: "CA",
                      postalCode: "97398",
                      country: "USA",
                      addressType: AddressType.Personal,
                      ownerType: "<value>",
                    },
                  ],
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/notes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/activities"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedAtsActivityInputActivityType, UnifiedAtsActivityInputVisibility } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.activities.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsActivityInput: {
                  activityType: UnifiedAtsActivityInputActivityType.Note,
                  subject: "Email subject",
                  body: "Dear Diana, I love you",
                  visibility: UnifiedAtsActivityInputVisibility.Public,
                  candidateId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  remoteCreatedAt: new Date("2024-10-01T12:00:00Z"),
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/messages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationMessages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.messages.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/rejectreasons"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsRejectReasons
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.rejectreasons.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ticketing/collections"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingCollections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.collections.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/filestorage/files"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedFilestorageFileInput: {
                  name: "my_paris_photo.png",
                  fileUrl: "https://example.com/my_paris_photo.png",
                  mimeType: "application/pdf",
                  size: "1024",
                  folderId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  permission: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  sharedLink: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/folders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFolder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.folders.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/filestorage/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageUsers
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.users.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/crm/notes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/trackingcategories"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTrackingCategorys
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.trackingcategories.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBenefit
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.benefits.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsDepartments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.departments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/accounting/cashflowstatements"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCashflowStatement
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.cashflowstatements.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ecommerce/orders"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createEcommerceOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedEcommerceOrderInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/field_mappings/map"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: map
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.fieldMappings.map({
                attributeId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                sourceCustomFieldId: "id_1",
                sourceProvider: "hubspot",
                linkedUserId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/emails"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationEmails
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.emails.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsCandidate
          source: |-
            import { Panora } from "@panora/sdk";
            import { EmailAddressType, PhoneType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.candidates.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsCandidateInput: {
                  firstName: "Joe",
                  lastName: "Doe",
                  company: "Acme",
                  title: "Analyst",
                  locations: "New York",
                  isPrivate: false,
                  emailReachable: true,
                  remoteCreatedAt: new Date("2024-10-01T12:00:00Z"),
                  remoteModifiedAt: new Date("2024-10-01T12:00:00Z"),
                  lastInteractionAt: new Date("2024-10-01T12:00:00Z"),
                  attachments: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  applications: [
                    "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  ],
                  tags: [
                    "tag_1",
                    "tag_2",
                  ],
                  urls: [
                    {
                      url: "mywebsite.com",
                      urlType: "WEBSITE",
                    },
                  ],
                  phoneNumbers: [
                    {
                      phoneNumber: "+33660688899",
                      phoneType: PhoneType.Work,
                    },
                  ],
                  emailAddresses: [
                    {
                      emailAddress: "joedoe@gmail.com",
                      emailAddressType: EmailAddressType.Work,
                    },
                  ],
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisLocations
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.locations.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/activities"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsActivity
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.activities.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/filestorage/files/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFile
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.filestorage.files.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.users.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.tags.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisGroup
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.groups.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/messages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationMessage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.messages.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhooks/verifyEvent"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: verifyEvent
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.verifyEvent({
                payload: {
                  "key": "<value>",
                },
                signature: "<value>",
                secret: "<value>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/stages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmStages
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.stages.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/linked_users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveLinkedUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.retrieve({
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/webhooks"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listWebhooks
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.webhooks.list();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/templates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationTemplate
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.templates.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingContact
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.contacts.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingContactInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked_users/batch"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: importBatch
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.importBatch({
                linkedUserOriginIds: [
                  "id_1",
                ],
                alias: "acme",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/jobinterviewstages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJobInterviewStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobinterviewstages.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.attachments.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/purchaseorders"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingPurchaseOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.purchaseorders.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAccountingPurchaseorderInput: {},
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationList
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.lists.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/addresses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.addresses.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/invoices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingInvoice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.invoices.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/offices"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.offices.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/scorecards/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsScorecard
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.scorecards.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsTag
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.tags.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/balancesheets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingBalanceSheet
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.balancesheets.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ecommerce/orders"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listEcommerceOrders
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/connections"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getConnections
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.connections.getConnections();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/projects"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getProjects
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.projects.getProjects();

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsApplication
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.applications.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ecommerce/orders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceOrder
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.orders.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/crm/deals"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmDeals
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.deals.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/field_mappings/attributes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getFieldMappings
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.fieldMappings.getFieldMappings();\n\n  \n}\n\nrun();"
  - target: $["paths"]["/ats/offices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffice
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.offices.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/addresses"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAddress
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.addresses.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ecommerce/fulfillments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceFulfillment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ecommerce.fulfillments.retrieve({
                xConnectionToken: "<value>",
                id: "<id>",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ticketing/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingAccount
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ticketing.accounts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/crm/notes"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmNote
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.notes.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedCrmNoteInput: {
                  content: "My notes taken during the meeting",
                  userId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  companyId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  contactId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  dealId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsInterview
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.interviews.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";
            import { UnifiedAtsAttachmentInputAttachmentType } from "@panora/sdk/models/components";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachments.create({
                xConnectionToken: "<value>",
                remoteData: false,
                unifiedAtsAttachmentInput: {
                  fileUrl: "https://example.com/file.pdf",
                  fileName: "file.pdf",
                  attachmentType: UnifiedAtsAttachmentInputAttachmentType.Resume,
                  remoteCreatedAt: new Date("2024-10-01T12:00:00Z"),
                  remoteModifiedAt: new Date("2024-10-01T12:00:00Z"),
                  candidateId: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                  fieldMappings: {
                    "fav_dish": "broccoli",
                    "fav_color": "red",
                  },
                },
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/sync/status/{vertical}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: status
          source: "import { Panora } from \"@panora/sdk\";\nimport { Vertical } from \"@panora/sdk/models/operations\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  await panora.sync.status({\n    vertical: Vertical.Ticketing,\n  });\n\n  \n}\n\nrun();"
  - target: $["paths"]["/crm/stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmStage
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.stages.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/timeoffs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoff
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.timeoffs.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/events"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getPanoraCoreEvents
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.events.getPanoraCoreEvents({});

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/accounting/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAccounts
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.accounting.accounts.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/crm/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmUser
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.crm.users.retrieve({
                xConnectionToken: "<value>",
                id: "b008e199-eda9-4629-bd41-a01b6195864a",
                remoteData: true,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/ats/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsAttachment
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.attachments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/bankinfos"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisBankInfo
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.bankinfos.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployments
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employments.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsJob
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.ats.jobs.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
  - target: $["paths"]["/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployee
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.employees.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/marketingautomation/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationCampaign
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.marketingautomation.campaigns.retrieve({
                xConnectionToken: "<value>",
                id: "801f9ede-c698-4e66-a7fc-48d19eebaa4f",
                remoteData: false,
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/linked_users/fromRemoteId"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: remoteId
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.linkedUsers.remoteId({
                remoteId: "id_1",
              });

              // Handle the result
              console.log(result)
            }

            run();
  - target: $["paths"]["/hris/payrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisPayrollRuns
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              const result = await panora.hris.payrollruns.list({
                xConnectionToken: "<value>",
                remoteData: true,
                limit: 10,
                cursor: "1b8b05bb-5273-4012-b520-8657b0b90874",
              });

              for await (const page of result) {
                // handle page
              }
            }

            run();
