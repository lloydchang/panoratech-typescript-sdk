overlay: 1.0.0
info:
  title: CodeSamples overlay for typescript target
  version: 0.0.0
actions:
  - target: $["paths"]["/"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: hello
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hello();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAccounts
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.accounts.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/accounts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingAccount
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.accounts.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAccountingAccountInput: {\n      name: \"Cash\",\n      description: \"Main cash account for daily operations\",\n      classification: \"Asset\",\n      type: \"Current Asset\",\n      status: \"Active\",\n      currentBalance: 10000,\n      currency: \"USD\",\n      accountNumber: \"1000\",\n      parentAccount: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAccount
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.accounts.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/addresses"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAddress
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.addresses.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/addresses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAddress
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.addresses.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingAttachments
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.attachments.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingAttachment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.attachments.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAccountingAttachmentInput: {\n      fileName: \"invoice.pdf\",\n      fileUrl: \"https://example.com/files/invoice.pdf\",\n      accountId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingAttachment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.attachments.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/balancesheets"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingBalanceSheets
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.balancesheets.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/balancesheets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingBalanceSheet
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.balancesheets.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/cashflowstatements"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCashflowStatement
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.cashflowstatements.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/cashflowstatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCashflowStatement
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.cashflowstatements.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/companyinfos"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCompanyInfos
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.companyinfos.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/companyinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCompanyInfo
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.companyinfos.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingContacts
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.contacts.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingContact
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.contacts.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAccountingContactInput: {\n      name: \"John Doe\",\n      isSupplier: true,\n      isCustomer: false,\n      emailAddress: \"john.doe@example.com\",\n      taxNumber: \"123456789\",\n      status: \"Active\",\n      currency: \"USD\",\n      remoteUpdatedAt: \"2024-06-15T12:00:00Z\",\n      companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingContact
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.contacts.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/creditnotes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingCreditNote
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.creditnotes.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/creditnotes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingCreditNote
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.creditnotes.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/expenses"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingExpense
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.expenses.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/expenses"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingExpense
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.expenses.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAccountingExpenseInput: {\n      transactionDate: new Date(\"2024-06-15T12:00:00Z\"),\n      totalAmount: 10000,\n      subTotal: 9000,\n      totalTaxAmount: 1000,\n      currency: \"USD\",\n      exchangeRate: \"1.2\",\n      memo: \"Business lunch with client\",\n      accountId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      contactId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      trackingCategories: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      lineItems: [\n        {\n          name: \"Net Income\",\n          value: 100000,\n          type: \"Operating Activities\",\n          parentItem: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          remoteId: \"report_item_1234\",\n          remoteGeneratedAt: new Date(\"2024-07-01T12:00:00Z\"),\n          companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          createdAt: new Date(\"2024-06-15T12:00:00Z\"),\n          modifiedAt: new Date(\"2024-06-15T12:00:00Z\"),\n        },\n      ],\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/expenses/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingExpense
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.expenses.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/incomestatements"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingIncomeStatement
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.incomestatements.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/incomestatements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingIncomeStatement
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.incomestatements.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/invoices"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingInvoice
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.invoices.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/invoices"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingInvoice
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.invoices.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAccountingInvoiceInput: {\n      type: \"Sales\",\n      number: \"INV-001\",\n      issueDate: new Date(\"2024-06-15T12:00:00Z\"),\n      dueDate: new Date(\"2024-07-15T12:00:00Z\"),\n      paidOnDate: new Date(\"2024-07-10T12:00:00Z\"),\n      memo: \"Payment for services rendered\",\n      currency: \"USD\",\n      exchangeRate: \"1.2\",\n      totalDiscount: 1000,\n      subTotal: 10000,\n      status: \"Paid\",\n      totalTaxAmount: 1000,\n      totalAmount: 11000,\n      balance: 0,\n      contactId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      accountingPeriodId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      trackingCategories: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      lineItems: [\n        {\n          name: \"Net Income\",\n          value: 100000,\n          type: \"Operating Activities\",\n          parentItem: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          remoteId: \"report_item_1234\",\n          remoteGeneratedAt: new Date(\"2024-07-01T12:00:00Z\"),\n          companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          createdAt: new Date(\"2024-06-15T12:00:00Z\"),\n          modifiedAt: new Date(\"2024-06-15T12:00:00Z\"),\n        },\n      ],\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/invoices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingInvoice
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.invoices.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/items"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingItem
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.items.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/items/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingItem
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.items.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/journalentries"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingJournalEntry
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.journalentries.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/journalentries"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingJournalEntry
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.journalentries.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAccountingJournalentryInput: {\n      transactionDate: new Date(\"2024-06-15T12:00:00Z\"),\n      payments: [\n        \"payment1\",\n        \"payment2\",\n      ],\n      appliedPayments: [\n        \"appliedPayment1\",\n        \"appliedPayment2\",\n      ],\n      memo: \"Monthly expense journal entry\",\n      currency: \"USD\",\n      exchangeRate: \"1.2\",\n      idAccCompanyInfo: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      journalNumber: \"JE-001\",\n      trackingCategories: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      idAccAccountingPeriod: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      postingStatus: \"Posted\",\n      lineItems: [\n        {\n          name: \"Net Income\",\n          value: 100000,\n          type: \"Operating Activities\",\n          parentItem: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          remoteId: \"report_item_1234\",\n          remoteGeneratedAt: new Date(\"2024-07-01T12:00:00Z\"),\n          companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          createdAt: new Date(\"2024-06-15T12:00:00Z\"),\n          modifiedAt: new Date(\"2024-06-15T12:00:00Z\"),\n        },\n      ],\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/journalentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingJournalEntry
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.journalentries.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/payments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPayment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.payments.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/payments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingPayment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.payments.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAccountingPaymentInput: {\n      invoiceId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      transactionDate: new Date(\"2024-06-15T12:00:00Z\"),\n      contactId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      accountId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      currency: \"USD\",\n      exchangeRate: \"1.2\",\n      totalAmount: 10000,\n      type: \"Credit Card\",\n      companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      accountingPeriodId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      trackingCategories: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      lineItems: [\n        {\n          name: \"Net Income\",\n          value: 100000,\n          type: \"Operating Activities\",\n          parentItem: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          remoteId: \"report_item_1234\",\n          remoteGeneratedAt: new Date(\"2024-07-01T12:00:00Z\"),\n          companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          createdAt: new Date(\"2024-06-15T12:00:00Z\"),\n          modifiedAt: new Date(\"2024-06-15T12:00:00Z\"),\n        },\n      ],\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/payments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPayment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.payments.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/phonenumbers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPhonenumber
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.phonenumbers.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/phonenumbers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPhonenumber
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.phonenumbers.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/purchaseorders"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingPurchaseOrder
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.purchaseorders.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/purchaseorders"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAccountingPurchaseOrder
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.purchaseorders.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAccountingPurchaseorderInput: {\n      status: \"Pending\",\n      issueDate: new Date(\"2024-06-15T12:00:00Z\"),\n      purchaseOrderNumber: \"PO-001\",\n      deliveryDate: new Date(\"2024-07-15T12:00:00Z\"),\n      deliveryAddress: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      customer: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      vendor: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      memo: \"Purchase order for Q3 inventory\",\n      companyId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      totalAmount: 100000,\n      currency: \"USD\",\n      exchangeRate: \"1.2\",\n      trackingCategories: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      accountingPeriodId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      lineItems: [\n        {\n          name: \"Net Income\",\n          value: 100000,\n          type: \"Operating Activities\",\n          parentItem: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          remoteId: \"report_item_1234\",\n          remoteGeneratedAt: new Date(\"2024-07-01T12:00:00Z\"),\n          companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          createdAt: new Date(\"2024-06-15T12:00:00Z\"),\n          modifiedAt: new Date(\"2024-06-15T12:00:00Z\"),\n        },\n      ],\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/purchaseorders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingPurchaseOrder
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.purchaseorders.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/taxrates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTaxRate
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.taxrates.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/taxrates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTaxRate
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.taxrates.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/trackingcategories"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTrackingCategorys
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.trackingcategories.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/trackingcategories/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTrackingCategory
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.trackingcategories.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/transactions"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingTransaction
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.transactions.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/transactions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingTransaction
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.transactions.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/accounting/vendorcredits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAccountingVendorCredit
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.vendorcredits.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/accounting/vendorcredits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAccountingVendorCredit
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.accounting.vendorcredits.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/activities"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsActivity
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.activities.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/activities"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsActivity
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.activities.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAtsActivityInput: {\n      activityType: \"NOTE\",\n      subject: \"Email subject\",\n      body: \"Dear Diana, I love you\",\n      visibility: \"PUBLIC\",\n      candidateId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      remoteCreatedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/activities/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsActivity
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.activities.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/applications"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsApplication
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.applications.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/applications"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsApplication
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.applications.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAtsApplicationInput: {\n      appliedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      rejectedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      offers: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n        \"12345678-1234-1234-1234-123456789012\",\n      ],\n      source: \"Source Name\",\n      creditedTo: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      currentStage: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      rejectReason: \"Candidate not experienced enough\",\n      candidateId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      jobId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/applications/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsApplication
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.applications.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsAttachment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.attachments.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsAttachment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.attachments.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAtsAttachmentInput: {\n      fileUrl: \"https://example.com/file.pdf\",\n      fileName: \"file.pdf\",\n      attachmentType: \"RESUME\",\n      remoteCreatedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      remoteModifiedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      candidateId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsAttachment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.attachments.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/candidates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsCandidate
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.candidates.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/candidates"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsCandidate
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.candidates.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAtsCandidateInput: {\n      firstName: \"Joe\",\n      lastName: \"Doe\",\n      company: \"Acme\",\n      title: \"Analyst\",\n      locations: \"New York\",\n      isPrivate: false,\n      emailReachable: true,\n      remoteCreatedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      remoteModifiedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      lastInteractionAt: new Date(\"2024-10-01T12:00:00Z\"),\n      attachments: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      applications: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      tags: [\n        \"tag_1\",\n        \"tag_2\",\n      ],\n      urls: [\n        {\n          url: \"mywebsite.com\",\n          urlType: \"WEBSITE\",\n        },\n      ],\n      phoneNumbers: [\n        {\n          phoneNumber: \"+33660688899\",\n          phoneType: \"WORK\",\n        },\n      ],\n      emailAddresses: [\n        {\n          emailAddress: \"joedoe@gmail.com\",\n          emailAddressType: \"WORK\",\n        },\n      ],\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/candidates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsCandidate
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.candidates.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/departments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsDepartments
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.departments.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/departments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsDepartment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.departments.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/eeocs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsEeocs
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.eeocs.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/eeocs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsEeocs
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.eeocs.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/interviews"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsInterview
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.interviews.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/interviews"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createAtsInterview
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.interviews.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedAtsInterviewInput: {\n      status: \"SCHEDULED\",\n      applicationId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      jobInterviewStageId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      organizedBy: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      interviewers: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      location: \"San Francisco\",\n      startAt: new Date(\"2024-10-01T12:00:00Z\"),\n      endAt: new Date(\"2024-10-01T12:00:00Z\"),\n      remoteCreatedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      remoteUpdatedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/interviews/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsInterview
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.interviews.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/jobinterviewstages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsJobInterviewStage
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.jobinterviewstages.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/jobinterviewstages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJobInterviewStage
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.jobinterviewstages.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/jobs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsJob
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.jobs.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/jobs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsJob
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.jobs.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/offers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsOffer
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.offers.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/offers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffer
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.offers.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/offices"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsOffice
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.offices.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/offices/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsOffice
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.offices.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/rejectreasons"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsRejectReasons
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.rejectreasons.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/rejectreasons/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsRejectReason
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.rejectreasons.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/scorecards"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsScorecard
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.scorecards.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/scorecards/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsScorecard
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.scorecards.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/tags"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsTags
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.tags.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsTag
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.tags.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ats/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listAtsUsers
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.users.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ats/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveAtsUser
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ats.users.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/auth/login"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: signIn
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.auth.login.signIn({
                email: "Oda.Treutel97@hotmail.com",
                passwordHash: "<value>",
              });
            }

            run();
  - target: $["paths"]["/connections"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getConnections
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.connections.getConnections();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/companies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmCompany
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.companies.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/crm/companies"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmCompany
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.companies.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedCrmCompanyInput: {\n      name: \"Acme\",\n      industry: \"ACCOUNTING\",\n      numberOfEmployees: 10,\n      userId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      emailAddresses: [\n        {\n          emailAddress: \"acme@gmail.com\",\n          emailAddressType: \"WORK\",\n        },\n      ],\n      addresses: [\n        {\n          street1: \"5th Avenue\",\n          street2: \"Street 2\",\n          city: \"New York\",\n          state: \"NY\",\n          postalCode: \"10001\",\n          country: \"USA\",\n          addressType: \"WORK\",\n          ownerType: \"<value>\",\n        },\n      ],\n      phoneNumbers: [\n        {\n          phoneNumber: \"+33660606067\",\n          phoneType: \"WORK\",\n        },\n      ],\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmCompany
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.companies.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmContacts
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.contacts.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/crm/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmContact
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.contacts.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedCrmContactInput: {\n      firstName: \"John\",\n      lastName: \"Doe\",\n      emailAddresses: [\n        {\n          emailAddress: \"Jena.Nienow28@yahoo.com\",\n          emailAddressType: \"<value>\",\n        },\n      ],\n      phoneNumbers: [\n        {\n          phoneNumber: \"1-809-839-8041\",\n          phoneType: \"<value>\",\n        },\n      ],\n      addresses: [\n        {\n          street1: \"5th Avenue\",\n          street2: \"Street 2\",\n          city: \"Anytown\",\n          state: \"CA\",\n          postalCode: \"10001\",\n          country: \"USA\",\n          addressType: \"PERSONAL\",\n          ownerType: \"<value>\",\n        },\n      ],\n      userId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmContact
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.contacts.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/deals"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmDeals
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.deals.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/crm/deals"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmDeal
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.deals.create({\n    xConnectionToken: \"<value>\",\n    unifiedCrmDealInput: {\n      name: \"Huge Contract with Acme\",\n      description: \"Contract with Sales Operations Team\",\n      amount: 1000,\n      userId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      stageId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      companyId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/deals/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmDeal
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.deals.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/engagements"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmEngagements
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.engagements.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/crm/engagements"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmEngagement
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.engagements.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedCrmEngagementInput: {\n      content: \"Meeting call with CTO\",\n      direction: \"INBOUND\",\n      subject: \"Technical features planning\",\n      startAt: new Date(\"2024-10-01T12:00:00Z\"),\n      endTime: new Date(\"2024-10-01T22:00:00Z\"),\n      type: \"MEETING\",\n      userId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      companyId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      contacts: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/engagements/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmEngagement
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.engagements.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/notes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmNote
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.notes.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/crm/notes"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmNote
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.notes.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedCrmNoteInput: {\n      content: \"My notes taken during the meeting\",\n      userId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      companyId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      contactId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      dealId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/notes/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmNote
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.notes.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/stages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmStages
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.stages.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/crm/stages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmStage
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.stages.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/tasks"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmTask
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.tasks.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/crm/tasks"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createCrmTask
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.tasks.create({\n    xConnectionToken: \"<value>\",\n    unifiedCrmTaskInput: {\n      subject: \"Answer customers\",\n      content: \"Prepare email campaign\",\n      status: \"PENDING\",\n      dueDate: \"2024-10-01T12:00:00Z\",\n      finishedDate: \"2024-10-01T12:00:00Z\",\n      userId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      companyId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      dealId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/tasks/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmTask
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.tasks.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/crm/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listCrmUsers
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.users.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/crm/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCrmUser
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.crm.users.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"b008e199-eda9-4629-bd41-a01b6195864a\",\n    remoteData: true,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/customers"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listEcommerceCustomers
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.customers.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/customers/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceCustomer
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.customers.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/fulfillments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listEcommerceFulfillments
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.fulfillments.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/fulfillments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceFulfillment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.fulfillments.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/orders"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listEcommerceOrders
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.orders.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/orders"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createEcommerceOrder
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.orders.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedEcommerceOrderInput: {\n      orderStatus: \"UNSHIPPED\",\n      orderNumber: \"19823838833\",\n      paymentStatus: \"SUCCESS\",\n      currency: \"AUD\",\n      totalPrice: 300,\n      totalDiscount: 10,\n      totalShipping: 120,\n      totalTax: 120,\n      fulfillmentStatus: \"PENDING\",\n      customerId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      items: [\n        {\n          name: \"Net Income\",\n          value: 100000,\n          type: \"Operating Activities\",\n          parentItem: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          remoteId: \"12345\",\n          remoteGeneratedAt: new Date(\"2024-07-01T12:00:00Z\"),\n          companyInfoId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n          createdAt: new Date(\"2024-06-15T12:00:00Z\"),\n          modifiedAt: new Date(\"2024-06-15T12:00:00Z\"),\n        },\n      ],\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/orders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceOrder
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.orders.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/products"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listEcommerceProducts
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.products.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/products"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createEcommerceProduct
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.products.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedEcommerceProductInput: {\n      productUrl: \"https://product_url/tee\",\n      productType: \"teeshirt\",\n      productStatus: \"ACTIVE\",\n      imagesUrls: [\n        \"https://myproduct/image\",\n      ],\n      description: \"best tee ever\",\n      vendor: \"vendor_extern\",\n      variants: [\n        {},\n      ],\n      tags: [\n        \"tag_1\",\n      ],\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ecommerce/products/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveEcommerceProduct
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ecommerce.products.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/events"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getPanoraCoreEvents
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.events.getPanoraCoreEvents({});\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/field_mappings"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: defineCustomField
          source: "import { Panora } from \"@panora/sdk\";\nimport { CustomFieldCreateDtoDataType, CustomFieldCreateDtoObjectTypeOwner } from \"@panora/sdk/models/components\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.fieldMappings.defineCustomField({\n    objectTypeOwner: CustomFieldCreateDtoObjectTypeOwner.Company,\n    name: \"my_favorite_dish\",\n    description: \"Favorite Dish\",\n    dataType: CustomFieldCreateDtoDataType.String,\n    sourceCustomFieldId: \"id_1\",\n    sourceProvider: \"hubspot\",\n    linkedUserId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/field_mappings/attributes"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getFieldMappings
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.fieldMappings.getFieldMappings();
            }

            run();
  - target: $["paths"]["/field_mappings/define"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: definitions
          source: "import { Panora } from \"@panora/sdk\";\nimport { DataType, ObjectTypeOwner } from \"@panora/sdk/models/components\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.fieldMappings.definitions({\n    objectTypeOwner: ObjectTypeOwner.Company,\n    name: \"fav_dish\",\n    description: \"My favorite dish\",\n    dataType: DataType.String,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/field_mappings/entities"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getFieldMappingsEntities
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.fieldMappings.getFieldMappingsEntities();
            }

            run();
  - target: $["paths"]["/field_mappings/map"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: map
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.fieldMappings.map({\n    attributeId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    sourceCustomFieldId: \"id_1\",\n    sourceProvider: \"hubspot\",\n    linkedUserId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/field_mappings/values"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getFieldMappingValues
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.fieldMappings.getFieldMappingValues();
            }

            run();
  - target: $["paths"]["/filestorage/files"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFile
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.files.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/filestorage/files"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFile
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.files.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedFilestorageFileInput: {\n      name: \"my_paris_photo.png\",\n      fileUrl: \"https://example.com/my_paris_photo.png\",\n      mimeType: \"application/pdf\",\n      size: \"1024\",\n      folderId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      permission: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      sharedLink: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/filestorage/files/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFile
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.files.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/filestorage/folders"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageFolder
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.folders.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/filestorage/folders"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createFilestorageFolder
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.folders.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedFilestorageFolderInput: {\n      name: \"school\",\n      size: \"2048\",\n      folderUrl: \"https://example.com/school\",\n      description: \"All things school related\",\n      driveId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      parentFolderId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      sharedLink: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      permission: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/filestorage/folders/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageFolder
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.folders.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/filestorage/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageGroup
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.groups.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/filestorage/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageGroup
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.groups.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/filestorage/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listFilestorageUsers
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.users.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/filestorage/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveFilestorageUser
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.filestorage.users.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/health"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: health
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.health();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/bankinfos"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisBankInfo
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.bankinfos.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/bankinfos/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBankInfo
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.bankinfos.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/benefits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisBenefits
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.benefits.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/benefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisBenefit
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.benefits.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/companies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisCompanies
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.companies.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/companies/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisCompany
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.companies.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/dependents"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisDependents
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.dependents.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/dependents/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisDependent
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.dependents.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/employeepayrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployeePayrollRun
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employeepayrollruns.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/employeepayrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployeePayrollRun
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employeepayrollruns.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/employees"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployees
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employees.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/employees"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createHrisEmployee
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employees.create({\n    xConnectionToken: \"<value>\",\n    unifiedHrisEmployeeInput: {\n      groups: [\n        \"Group1\",\n        \"Group2\",\n      ],\n      locations: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      employeeNumber: \"EMP001\",\n      companyId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      firstName: \"John\",\n      lastName: \"Doe\",\n      preferredName: \"Johnny\",\n      displayFullName: \"John Doe\",\n      username: \"johndoe\",\n      workEmail: \"john.doe@company.com\",\n      personalEmail: \"john.doe@personal.com\",\n      mobilePhoneNumber: \"+1234567890\",\n      employments: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      ssn: \"123-45-6789\",\n      gender: \"MALE\",\n      ethnicity: \"AMERICAN_INDIAN_OR_ALASKA_NATIVE\",\n      maritalStatus: \"Married\",\n      dateOfBirth: new Date(\"1990-01-01\"),\n      startDate: new Date(\"2020-01-01\"),\n      employmentStatus: \"ACTIVE\",\n      terminationDate: new Date(\"2025-01-01\"),\n      avatarUrl: \"https://example.com/avatar.jpg\",\n      managerId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/employees/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployee
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employees.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/employerbenefits"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployerBenefits
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employerbenefits.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/employerbenefits/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployerBenefit
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employerbenefits.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/employments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisEmployments
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employments.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/employments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisEmployment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.employments.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/groups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisGroups
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.groups.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/groups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisGroup
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.groups.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/locations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisLocations
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.locations.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/locations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisLocation
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.locations.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/paygroups"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisPaygroups
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.paygroups.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/paygroups/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPaygroup
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.paygroups.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/payrollruns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisPayrollRuns
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.payrollruns.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/payrollruns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisPayrollRun
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.payrollruns.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/timeoffbalances"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffbalances
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.timeoffbalances.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/timeoffbalances/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoffbalance
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.timeoffbalances.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/timeoffs"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisTimeoffs
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.timeoffs.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/timeoffs"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createHrisTimeoff
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.timeoffs.create({\n    xConnectionToken: \"<value>\",\n    unifiedHrisTimeoffInput: {\n      employee: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      approver: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      status: \"REQUESTED\",\n      employeeNote: \"Annual vacation\",\n      units: \"DAYS\",\n      amount: 5,\n      requestType: \"VACATION\",\n      startTime: new Date(\"2024-07-01T09:00:00Z\"),\n      endTime: new Date(\"2024-07-05T17:00:00Z\"),\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/timeoffs/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimeoff
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.timeoffs.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/timesheetentries"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listHrisTimesheetentries
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.timesheetentries.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/hris/timesheetentries"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createHrisTimesheetentry
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.timesheetentries.create({\n    xConnectionToken: \"<value>\",\n    unifiedHrisTimesheetEntryInput: {\n      hoursWorked: 40,\n      startTime: new Date(\"2024-10-01T08:00:00Z\"),\n      endTime: new Date(\"2024-10-01T16:00:00Z\"),\n      employeeId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      remoteWasDeleted: false,\n      fieldMappings: {},\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/hris/timesheetentries/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveHrisTimesheetentry
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.hris.timesheetentries.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/linked_users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listLinkedUsers
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.linkedUsers.list();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/linked_users"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createLinkedUser
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.linkedUsers.create({\n    linkedUserOriginId: \"id_1\",\n    alias: \"acme\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/linked_users/batch"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: importBatch
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.linkedUsers.importBatch({\n    linkedUserOriginIds: [\n      \"id_1\",\n    ],\n    alias: \"acme\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/linked_users/fromRemoteId"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: remoteId
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.linkedUsers.remoteId({\n    remoteId: \"id_1\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/linked_users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveLinkedUser
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.linkedUsers.retrieve({\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/actions"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAction
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.actions.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/actions"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAction
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.actions.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedMarketingautomationActionInput: {},\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/actions/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAction
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.actions.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/automations"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationAutomations
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.automations.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/automations"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationAutomation
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.automations.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedMarketingautomationAutomationInput: {},\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/automations/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationAutomation
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.automations.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/campaigns"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationCampaigns
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.campaigns.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/campaigns"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationCampaign
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.campaigns.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedMarketingautomationCampaignInput: {},\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/campaigns/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationCampaign
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.campaigns.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationContacts
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.contacts.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/contacts"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingAutomationContact
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.contacts.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedMarketingautomationContactInput: {},\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationContact
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.contacts.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/emails"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationEmails
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.emails.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/emails/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEmail
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.emails.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/events"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationEvents
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.events.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/events/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationEvent
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.events.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/lists"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationLists
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.lists.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/lists"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationList
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.lists.create({\n    xConnectionToken: \"<value>\",\n    unifiedMarketingautomationListInput: {},\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/lists/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationList
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.lists.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/messages"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationMessages
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.messages.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/messages/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationMessage
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.messages.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/templates"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingautomationTemplates
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.templates.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/templates"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createMarketingautomationTemplate
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.templates.create({\n    xConnectionToken: \"<value>\",\n    unifiedMarketingautomationTemplateInput: {},\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/templates/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingautomationTemplate
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.templates.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listMarketingAutomationUsers
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.users.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/marketingautomation/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveMarketingAutomationUser
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.marketingautomation.users.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/passthrough"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: request
          source: "import { Panora } from \"@panora/sdk\";\nimport { PassThroughRequestDtoMethod } from \"@panora/sdk/models/components\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.passthrough.request({\n    xConnectionToken: \"<value>\",\n    passThroughRequestDto: {\n      method: PassThroughRequestDtoMethod.Get,\n      path: \"/dev\",\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/passthrough/{retryId}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getRetriedRequestResponse
          source: |-
            import { Panora } from "@panora/sdk";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.passthrough.retryid.getRetriedRequestResponse({
                retryId: "<value>",
              });
            }

            run();
  - target: $["paths"]["/projects"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getProjects
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.projects.getProjects();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/projects"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createProject
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.projects.create({\n    name: \"Project Name\",\n    idOrganization: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    idUser: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/rag/query"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: RagController_queryEmbeddings
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.rag.query.ragControllerQueryEmbeddings();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/sync/pull-frequencies"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: getPullFrequency
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.sync.getPullFrequency();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/sync/pull-frequencies"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: updatePullFrequency
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.sync.updatePullFrequency({\n    crm: 1800,\n    ats: 3600,\n    hris: 7200,\n    accounting: 14400,\n    filestorage: 28800,\n    ecommerce: 43200,\n    ticketing: 86400,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/sync/resync"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: resync
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.sync.resync();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/sync/status/{vertical}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: status
          source: |-
            import { Panora } from "@panora/sdk";
            import { Vertical } from "@panora/sdk/models/operations";

            const panora = new Panora({
              apiKey: "<YOUR_API_KEY_HERE>",
            });

            async function run() {
              await panora.sync.status({
                vertical: Vertical.Ticketing,
              });
            }

            run();
  - target: $["paths"]["/ticketing/accounts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingAccount
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.accounts.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/accounts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAccount
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.accounts.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/attachments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingAttachments
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.attachments.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/attachments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingAttachment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.attachments.create({\n    xConnectionToken: \"<value>\",\n    unifiedTicketingAttachmentInput: {\n      fileName: \"features_planning.pdf\",\n      fileUrl: \"https://example.com/features_planning.pdf\",\n      uploader: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ticketId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      commentId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/attachments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingAttachment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.attachments.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/collections"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingCollections
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.collections.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/collections/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveCollection
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.collections.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/comments"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingComments
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.comments.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/comments"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingComment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.comments.create({\n    xConnectionToken: \"<value>\",\n    unifiedTicketingCommentInput: {\n      body: \"Assigned to Eric !\",\n      htmlBody: \"<p>Assigned to Eric !</p>\",\n      isPrivate: false,\n      creatorType: \"USER\",\n      ticketId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      contactId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      userId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      attachments: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/comments/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingComment
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.comments.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/contacts"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingContacts
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.contacts.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/contacts/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingContact
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.contacts.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"<id>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/tags"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTags
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.tags.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/tags/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTag
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.tags.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/teams"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTeams
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.teams.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/teams/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTeam
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.teams.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/tickets"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingTicket
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.tickets.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/tickets"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createTicketingTicket
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.tickets.create({\n    xConnectionToken: \"<value>\",\n    remoteData: false,\n    unifiedTicketingTicketInput: {\n      name: \"Customer Service Inquiry\",\n      status: \"OPEN\",\n      description: \"Help customer\",\n      dueDate: new Date(\"2024-10-01T12:00:00Z\"),\n      type: \"BUG\",\n      parentTicket: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      collections: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      tags: [\n        \"my_tag\",\n        \"urgent_tag\",\n      ],\n      completedAt: new Date(\"2024-10-01T12:00:00Z\"),\n      priority: \"HIGH\",\n      assignedTo: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      comment: {\n        body: \"Assigned to Eric !\",\n        htmlBody: \"<p>Assigned to Eric !</p>\",\n        isPrivate: false,\n        creatorType: \"USER\",\n        ticketId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n        contactId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n        userId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n        attachments: [\n          \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n        ],\n      },\n      accountId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      contactId: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      attachments: [\n        \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n      ],\n      fieldMappings: {\n        \"fav_dish\": \"broccoli\",\n        \"fav_color\": \"red\",\n      },\n    },\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/tickets/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingTicket
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.tickets.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/ticketing/users"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listTicketingUsers
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.users.list({\n    xConnectionToken: \"<value>\",\n    remoteData: true,\n    limit: 10,\n    cursor: \"1b8b05bb-5273-4012-b520-8657b0b90874\",\n  });\n  \n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
  - target: $["paths"]["/ticketing/users/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: retrieveTicketingUser
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.ticketing.users.retrieve({\n    xConnectionToken: \"<value>\",\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n    remoteData: false,\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/webhooks"]["get"]
    update:
      x-codeSamples:
        - lang: typescript
          label: listWebhooks
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.webhooks.list();\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/webhooks"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: createWebhookPublic
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.webhooks.create({\n    url: \"https://acme.com/webhook_receiver\",\n    description: \"Webhook to receive connection events\",\n    scope: [\n      \"connection.created\",\n    ],\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/webhooks/verifyEvent"]["post"]
    update:
      x-codeSamples:
        - lang: typescript
          label: verifyEvent
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.webhooks.verifyEvent({\n    payload: {\n  \n    },\n    signature: \"<value>\",\n    secret: \"<value>\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/webhooks/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: typescript
          label: delete
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.webhooks.delete({\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
  - target: $["paths"]["/webhooks/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: typescript
          label: updateStatus
          source: "import { Panora } from \"@panora/sdk\";\n\nconst panora = new Panora({\n  apiKey: \"<YOUR_API_KEY_HERE>\",\n});\n\nasync function run() {\n  const result = await panora.webhooks.updateStatus({\n    id: \"801f9ede-c698-4e66-a7fc-48d19eebaa4f\",\n  });\n  \n  // Handle the result\n  console.log(result)\n}\n\nrun();"
