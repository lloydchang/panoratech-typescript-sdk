/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as m$ from "../lib/matchers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import { unwrap as unwrap$ } from "../types/fp.js";
import { Accounting } from "./accounting.js";
import { Ats } from "./ats.js";
import { Crm } from "./crm.js";
import { FieldMappings } from "./fieldmappings.js";
import { Filestorage } from "./filestorage.js";
import { Hris } from "./hris.js";
import { LinkedUsers } from "./linkedusers.js";
import { Marketingautomation } from "./marketingautomation.js";
import { Passthrough } from "./passthrough.js";
import { Sync } from "./sync.js";
import { Ticketing } from "./ticketing.js";
import { Webhooks } from "./webhooks.js";
import * as z from "zod";

export class Panora extends ClientSDK {
    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    private _ticketing?: Ticketing;
    get ticketing(): Ticketing {
        return (this._ticketing ??= new Ticketing(this.options$));
    }

    private _sync?: Sync;
    get sync(): Sync {
        return (this._sync ??= new Sync(this.options$));
    }

    private _crm?: Crm;
    get crm(): Crm {
        return (this._crm ??= new Crm(this.options$));
    }

    private _linkedUsers?: LinkedUsers;
    get linkedUsers(): LinkedUsers {
        return (this._linkedUsers ??= new LinkedUsers(this.options$));
    }

    private _fieldMappings?: FieldMappings;
    get fieldMappings(): FieldMappings {
        return (this._fieldMappings ??= new FieldMappings(this.options$));
    }

    private _passthrough?: Passthrough;
    get passthrough(): Passthrough {
        return (this._passthrough ??= new Passthrough(this.options$));
    }

    private _hris?: Hris;
    get hris(): Hris {
        return (this._hris ??= new Hris(this.options$));
    }

    private _marketingautomation?: Marketingautomation;
    get marketingautomation(): Marketingautomation {
        return (this._marketingautomation ??= new Marketingautomation(this.options$));
    }

    private _ats?: Ats;
    get ats(): Ats {
        return (this._ats ??= new Ats(this.options$));
    }

    private _accounting?: Accounting;
    get accounting(): Accounting {
        return (this._accounting ??= new Accounting(this.options$));
    }

    private _filestorage?: Filestorage;
    get filestorage(): Filestorage {
        return (this._filestorage ??= new Filestorage(this.options$));
    }

    async hello(options?: RequestOptions): Promise<string> {
        const path$ = pathToFunc("/")();

        const headers$ = new Headers({
            Accept: "text/plain",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "hello",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<string, SDKError | SDKValidationError>(
            m$.text(200, z.string()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }

    async health(options?: RequestOptions): Promise<number> {
        const path$ = pathToFunc("/health")();

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "health",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const [result$] = await m$.match<number, SDKError | SDKValidationError>(
            m$.json(200, z.number()),
            m$.fail(["4XX", "5XX"])
        )(response);

        return unwrap$(result$);
    }
}
