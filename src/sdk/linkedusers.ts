/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { linkedUsersCreate } from "../funcs/linkedUsersCreate.js";
import { linkedUsersImportBatch } from "../funcs/linkedUsersImportBatch.js";
import { linkedUsersList } from "../funcs/linkedUsersList.js";
import { linkedUsersRemoteId } from "../funcs/linkedUsersRemoteId.js";
import { linkedUsersRetrieve } from "../funcs/linkedUsersRetrieve.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class LinkedUsers extends ClientSDK {
    /**
     * Create Linked Users
     */
    async create(
        request: components.CreateLinkedUserDto,
        options?: RequestOptions
    ): Promise<components.LinkedUserResponse> {
        return unwrapAsync(linkedUsersCreate(this, request, options));
    }

    /**
     * List Linked Users
     */
    async list(options?: RequestOptions): Promise<Array<components.LinkedUserResponse>> {
        return unwrapAsync(linkedUsersList(this, options));
    }

    /**
     * Add Batch Linked Users
     */
    async importBatch(
        request: components.CreateBatchLinkedUserDto,
        options?: RequestOptions
    ): Promise<Array<components.LinkedUserResponse>> {
        return unwrapAsync(linkedUsersImportBatch(this, request, options));
    }

    /**
     * Retrieve Linked Users
     */
    async retrieve(
        request: operations.RetrieveLinkedUserRequest,
        options?: RequestOptions
    ): Promise<components.LinkedUserResponse> {
        return unwrapAsync(linkedUsersRetrieve(this, request, options));
    }

    /**
     * Retrieve a Linked User From A Remote Id
     */
    async remoteId(
        request: operations.RemoteIdRequest,
        options?: RequestOptions
    ): Promise<components.LinkedUserResponse> {
        return unwrapAsync(linkedUsersRemoteId(this, request, options));
    }
}
