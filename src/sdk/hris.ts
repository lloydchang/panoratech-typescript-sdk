/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Bankinfo } from "./bankinfo.js";
import { Benefit } from "./benefit.js";
import { Company } from "./company.js";
import { Dependent } from "./dependent.js";
import { Employee } from "./employee.js";
import { Employeepayrollrun } from "./employeepayrollrun.js";
import { Employerbenefit } from "./employerbenefit.js";
import { Employment } from "./employment.js";
import { Group } from "./group.js";
import { Location } from "./location.js";
import { Paygroup } from "./paygroup.js";
import { Payrollrun } from "./payrollrun.js";
import { Timeoff } from "./timeoff.js";
import { Timeoffbalance } from "./timeoffbalance.js";

export class Hris extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _bankinfo?: Bankinfo;
    get bankinfo(): Bankinfo {
        return (this._bankinfo ??= new Bankinfo(this.options$));
    }

    private _benefit?: Benefit;
    get benefit(): Benefit {
        return (this._benefit ??= new Benefit(this.options$));
    }

    private _company?: Company;
    get company(): Company {
        return (this._company ??= new Company(this.options$));
    }

    private _dependent?: Dependent;
    get dependent(): Dependent {
        return (this._dependent ??= new Dependent(this.options$));
    }

    private _employeepayrollrun?: Employeepayrollrun;
    get employeepayrollrun(): Employeepayrollrun {
        return (this._employeepayrollrun ??= new Employeepayrollrun(this.options$));
    }

    private _employee?: Employee;
    get employee(): Employee {
        return (this._employee ??= new Employee(this.options$));
    }

    private _employerbenefit?: Employerbenefit;
    get employerbenefit(): Employerbenefit {
        return (this._employerbenefit ??= new Employerbenefit(this.options$));
    }

    private _employment?: Employment;
    get employment(): Employment {
        return (this._employment ??= new Employment(this.options$));
    }

    private _group?: Group;
    get group(): Group {
        return (this._group ??= new Group(this.options$));
    }

    private _location?: Location;
    get location(): Location {
        return (this._location ??= new Location(this.options$));
    }

    private _paygroup?: Paygroup;
    get paygroup(): Paygroup {
        return (this._paygroup ??= new Paygroup(this.options$));
    }

    private _payrollrun?: Payrollrun;
    get payrollrun(): Payrollrun {
        return (this._payrollrun ??= new Payrollrun(this.options$));
    }

    private _timeoff?: Timeoff;
    get timeoff(): Timeoff {
        return (this._timeoff ??= new Timeoff(this.options$));
    }

    private _timeoffbalance?: Timeoffbalance;
    get timeoffbalance(): Timeoffbalance {
        return (this._timeoffbalance ??= new Timeoffbalance(this.options$));
    }
}
