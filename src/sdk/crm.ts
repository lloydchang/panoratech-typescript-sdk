/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Companies } from "./companies.js";
import { Deals } from "./deals.js";
import { Engagements } from "./engagements.js";
import { Notes } from "./notes.js";
import { PanoraContacts } from "./panoracontacts.js";
import { PanoraUsers } from "./panorausers.js";
import { Stages } from "./stages.js";
import { Tasks } from "./tasks.js";

export class Crm extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _companies?: Companies;
    get companies(): Companies {
        return (this._companies ??= new Companies(this.options$));
    }

    private _contacts?: PanoraContacts;
    get contacts(): PanoraContacts {
        return (this._contacts ??= new PanoraContacts(this.options$));
    }

    private _deals?: Deals;
    get deals(): Deals {
        return (this._deals ??= new Deals(this.options$));
    }

    private _engagements?: Engagements;
    get engagements(): Engagements {
        return (this._engagements ??= new Engagements(this.options$));
    }

    private _notes?: Notes;
    get notes(): Notes {
        return (this._notes ??= new Notes(this.options$));
    }

    private _stages?: Stages;
    get stages(): Stages {
        return (this._stages ??= new Stages(this.options$));
    }

    private _tasks?: Tasks;
    get tasks(): Tasks {
        return (this._tasks ??= new Tasks(this.options$));
    }

    private _users?: PanoraUsers;
    get users(): PanoraUsers {
        return (this._users ??= new PanoraUsers(this.options$));
    }
}
