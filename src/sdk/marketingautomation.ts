/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { HTTPClient } from "../lib/http.js";
import { ClientSDK } from "../lib/sdks.js";
import { Action } from "./action.js";
import { Automation } from "./automation.js";
import { Campaign } from "./campaign.js";
import { Contact } from "./contact.js";
import { Email } from "./email.js";
import { Event } from "./event.js";
import { List } from "./list.js";
import { Message } from "./message.js";
import { Template } from "./template.js";
import { User } from "./user.js";

export class Marketingautomation extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _action?: Action;
    get action(): Action {
        return (this._action ??= new Action(this.options$));
    }

    private _automation?: Automation;
    get automation(): Automation {
        return (this._automation ??= new Automation(this.options$));
    }

    private _campaign?: Campaign;
    get campaign(): Campaign {
        return (this._campaign ??= new Campaign(this.options$));
    }

    private _contact?: Contact;
    get contact(): Contact {
        return (this._contact ??= new Contact(this.options$));
    }

    private _email?: Email;
    get email(): Email {
        return (this._email ??= new Email(this.options$));
    }

    private _event?: Event;
    get event(): Event {
        return (this._event ??= new Event(this.options$));
    }

    private _list?: List;
    get list(): List {
        return (this._list ??= new List(this.options$));
    }

    private _message?: Message;
    get message(): Message {
        return (this._message ??= new Message(this.options$));
    }

    private _template?: Template;
    get template(): Template {
        return (this._template ??= new Template(this.options$));
    }

    private _user?: User;
    get user(): User {
        return (this._user ??= new User(this.options$));
    }
}
