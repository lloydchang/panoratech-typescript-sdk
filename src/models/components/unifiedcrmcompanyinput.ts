/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { Address, Address$ } from "./address.js";
import { Email, Email$ } from "./email.js";
import { Phone, Phone$ } from "./phone.js";
import * as z from "zod";

export type UnifiedCrmCompanyInputFieldMappings = {};

export type UnifiedCrmCompanyInput = {
    /**
     * The name of the company
     */
    name: string;
    /**
     * The industry of the company. Authorized values can be found in the Industry enum.
     */
    industry?: string | undefined;
    /**
     * The number of employees of the company
     */
    numberOfEmployees?: number | undefined;
    /**
     * The UUID of the user who owns the company
     */
    userId?: string | undefined;
    /**
     * The email addresses of the company
     */
    emailAddresses?: Array<Email> | undefined;
    /**
     * The addresses of the company
     */
    addresses?: Array<Address> | undefined;
    /**
     * The phone numbers of the company
     */
    phoneNumbers?: Array<Phone> | undefined;
    fieldMappings: UnifiedCrmCompanyInputFieldMappings;
};

/** @internal */
export namespace UnifiedCrmCompanyInputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedCrmCompanyInputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedCrmCompanyInputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedCrmCompanyInput$ {
    export const inboundSchema: z.ZodType<UnifiedCrmCompanyInput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            industry: z.string().optional(),
            number_of_employees: z.number().optional(),
            user_id: z.string().optional(),
            email_addresses: z.array(Email$.inboundSchema).optional(),
            addresses: z.array(Address$.inboundSchema).optional(),
            phone_numbers: z.array(Phone$.inboundSchema).optional(),
            field_mappings: z.lazy(() => UnifiedCrmCompanyInputFieldMappings$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                number_of_employees: "numberOfEmployees",
                user_id: "userId",
                email_addresses: "emailAddresses",
                phone_numbers: "phoneNumbers",
                field_mappings: "fieldMappings",
            });
        });

    export type Outbound = {
        name: string;
        industry?: string | undefined;
        number_of_employees?: number | undefined;
        user_id?: string | undefined;
        email_addresses?: Array<Email$.Outbound> | undefined;
        addresses?: Array<Address$.Outbound> | undefined;
        phone_numbers?: Array<Phone$.Outbound> | undefined;
        field_mappings: UnifiedCrmCompanyInputFieldMappings$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmCompanyInput> = z
        .object({
            name: z.string(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            userId: z.string().optional(),
            emailAddresses: z.array(Email$.outboundSchema).optional(),
            addresses: z.array(Address$.outboundSchema).optional(),
            phoneNumbers: z.array(Phone$.outboundSchema).optional(),
            fieldMappings: z.lazy(() => UnifiedCrmCompanyInputFieldMappings$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                numberOfEmployees: "number_of_employees",
                userId: "user_id",
                emailAddresses: "email_addresses",
                phoneNumbers: "phone_numbers",
                fieldMappings: "field_mappings",
            });
        });
}
