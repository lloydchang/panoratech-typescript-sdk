/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedFilestorageFileInputFieldMappings = {};

export type UnifiedFilestorageFileInput = {
    /**
     * The name of the file
     */
    name: string;
    /**
     * The url of the file
     */
    fileUrl: string;
    /**
     * The mime type of the file
     */
    mimeType: string;
    /**
     * The size of the file
     */
    size: string;
    /**
     * The UUID of the folder tied to the file
     */
    folderId: string;
    /**
     * The UUID of the permission tied to the file
     */
    permission: string;
    /**
     * The UUID of the shared link tied to the file
     */
    sharedLink: string;
    fieldMappings: UnifiedFilestorageFileInputFieldMappings;
};

/** @internal */
export namespace UnifiedFilestorageFileInputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageFileInputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageFileInputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageFileInput$ {
    export const inboundSchema: z.ZodType<UnifiedFilestorageFileInput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            file_url: z.string(),
            mime_type: z.string(),
            size: z.string(),
            folder_id: z.string(),
            permission: z.string(),
            shared_link: z.string(),
            field_mappings: z.lazy(() => UnifiedFilestorageFileInputFieldMappings$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                file_url: "fileUrl",
                mime_type: "mimeType",
                folder_id: "folderId",
                shared_link: "sharedLink",
                field_mappings: "fieldMappings",
            });
        });

    export type Outbound = {
        name: string;
        file_url: string;
        mime_type: string;
        size: string;
        folder_id: string;
        permission: string;
        shared_link: string;
        field_mappings: UnifiedFilestorageFileInputFieldMappings$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedFilestorageFileInput> = z
        .object({
            name: z.string(),
            fileUrl: z.string(),
            mimeType: z.string(),
            size: z.string(),
            folderId: z.string(),
            permission: z.string(),
            sharedLink: z.string(),
            fieldMappings: z.lazy(() => UnifiedFilestorageFileInputFieldMappings$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                fileUrl: "file_url",
                mimeType: "mime_type",
                folderId: "folder_id",
                sharedLink: "shared_link",
                fieldMappings: "field_mappings",
            });
        });
}
