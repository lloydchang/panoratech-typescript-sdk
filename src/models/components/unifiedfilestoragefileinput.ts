/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnifiedFilestorageFileInput = {
  /**
   * The name of the file
   */
  name: string | null;
  /**
   * The url of the file
   */
  fileUrl: string | null;
  /**
   * The mime type of the file
   */
  mimeType: string | null;
  /**
   * The size of the file
   */
  size: string | null;
  /**
   * The UUID of the folder tied to the file
   */
  folderId: string | null;
  /**
   * The UUID of the permission tied to the file
   */
  permission: string | null;
  /**
   * The UUID of the shared link tied to the file
   */
  sharedLink: string | null;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedFilestorageFileInput$inboundSchema: z.ZodType<
  UnifiedFilestorageFileInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  file_url: z.nullable(z.string()),
  mime_type: z.nullable(z.string()),
  size: z.nullable(z.string()),
  folder_id: z.nullable(z.string()),
  permission: z.nullable(z.string()),
  shared_link: z.nullable(z.string()),
  field_mappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_url": "fileUrl",
    "mime_type": "mimeType",
    "folder_id": "folderId",
    "shared_link": "sharedLink",
    "field_mappings": "fieldMappings",
  });
});

/** @internal */
export type UnifiedFilestorageFileInput$Outbound = {
  name: string | null;
  file_url: string | null;
  mime_type: string | null;
  size: string | null;
  folder_id: string | null;
  permission: string | null;
  shared_link: string | null;
  field_mappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedFilestorageFileInput$outboundSchema: z.ZodType<
  UnifiedFilestorageFileInput$Outbound,
  z.ZodTypeDef,
  UnifiedFilestorageFileInput
> = z.object({
  name: z.nullable(z.string()),
  fileUrl: z.nullable(z.string()),
  mimeType: z.nullable(z.string()),
  size: z.nullable(z.string()),
  folderId: z.nullable(z.string()),
  permission: z.nullable(z.string()),
  sharedLink: z.nullable(z.string()),
  fieldMappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    fileUrl: "file_url",
    mimeType: "mime_type",
    folderId: "folder_id",
    sharedLink: "shared_link",
    fieldMappings: "field_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedFilestorageFileInput$ {
  /** @deprecated use `UnifiedFilestorageFileInput$inboundSchema` instead. */
  export const inboundSchema = UnifiedFilestorageFileInput$inboundSchema;
  /** @deprecated use `UnifiedFilestorageFileInput$outboundSchema` instead. */
  export const outboundSchema = UnifiedFilestorageFileInput$outboundSchema;
  /** @deprecated use `UnifiedFilestorageFileInput$Outbound` instead. */
  export type Outbound = UnifiedFilestorageFileInput$Outbound;
}

export function unifiedFilestorageFileInputToJSON(
  unifiedFilestorageFileInput: UnifiedFilestorageFileInput,
): string {
  return JSON.stringify(
    UnifiedFilestorageFileInput$outboundSchema.parse(
      unifiedFilestorageFileInput,
    ),
  );
}

export function unifiedFilestorageFileInputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedFilestorageFileInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedFilestorageFileInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedFilestorageFileInput' from JSON`,
  );
}
