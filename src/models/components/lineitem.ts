/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type LineItem = {
    /**
     * The name of the report item
     */
    name?: string | null | undefined;
    /**
     * The value of the report item
     */
    value?: number | null | undefined;
    /**
     * The type of the report item
     */
    type?: string | null | undefined;
    /**
     * The UUID of the parent item
     */
    parentItem?: string | null | undefined;
    /**
     * The remote ID of the report item
     */
    remoteId?: string | null | undefined;
    /**
     * The date when the report item was generated in the remote system
     */
    remoteGeneratedAt?: Date | null | undefined;
    /**
     * The UUID of the associated company info object
     */
    companyInfoId?: string | null | undefined;
    /**
     * The created date of the report item
     */
    createdAt?: Date | undefined;
    /**
     * The last modified date of the report item
     */
    modifiedAt?: Date | undefined;
};

/** @internal */
export const LineItem$inboundSchema: z.ZodType<LineItem, z.ZodTypeDef, unknown> = z
    .object({
        name: z.nullable(z.string()).optional(),
        value: z.nullable(z.number()).optional(),
        type: z.nullable(z.string()).optional(),
        parent_item: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_generated_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        company_info_id: z.nullable(z.string()).optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        modified_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            parent_item: "parentItem",
            remote_id: "remoteId",
            remote_generated_at: "remoteGeneratedAt",
            company_info_id: "companyInfoId",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type LineItem$Outbound = {
    name?: string | null | undefined;
    value?: number | null | undefined;
    type?: string | null | undefined;
    parent_item?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_generated_at?: string | null | undefined;
    company_info_id?: string | null | undefined;
    created_at?: string | undefined;
    modified_at?: string | undefined;
};

/** @internal */
export const LineItem$outboundSchema: z.ZodType<LineItem$Outbound, z.ZodTypeDef, LineItem> = z
    .object({
        name: z.nullable(z.string()).optional(),
        value: z.nullable(z.number()).optional(),
        type: z.nullable(z.string()).optional(),
        parentItem: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteGeneratedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        companyInfoId: z.nullable(z.string()).optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        modifiedAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            parentItem: "parent_item",
            remoteId: "remote_id",
            remoteGeneratedAt: "remote_generated_at",
            companyInfoId: "company_info_id",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItem$ {
    /** @deprecated use `LineItem$inboundSchema` instead. */
    export const inboundSchema = LineItem$inboundSchema;
    /** @deprecated use `LineItem$outboundSchema` instead. */
    export const outboundSchema = LineItem$outboundSchema;
    /** @deprecated use `LineItem$Outbound` instead. */
    export type Outbound = LineItem$Outbound;
}
