/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedAtsActivityInputFieldMappings = {};

export type UnifiedAtsActivityInput = {
    /**
     * The type of activity
     */
    activityType?: string | undefined;
    /**
     * The subject of the activity
     */
    subject?: string | undefined;
    /**
     * The body of the activity
     */
    body?: string | undefined;
    /**
     * The visibility of the activity
     */
    visibility?: string | undefined;
    /**
     * The UUID of the candidate
     */
    candidateId?: string | undefined;
    /**
     * The remote creation date of the activity
     */
    remoteCreatedAt?: Date | undefined;
    fieldMappings: UnifiedAtsActivityInputFieldMappings;
};

/** @internal */
export namespace UnifiedAtsActivityInputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsActivityInputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsActivityInputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsActivityInput$ {
    export const inboundSchema: z.ZodType<UnifiedAtsActivityInput, z.ZodTypeDef, unknown> = z
        .object({
            activity_type: z.string().optional(),
            subject: z.string().optional(),
            body: z.string().optional(),
            visibility: z.string().optional(),
            candidate_id: z.string().optional(),
            remote_created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            field_mappings: z.lazy(() => UnifiedAtsActivityInputFieldMappings$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                activity_type: "activityType",
                candidate_id: "candidateId",
                remote_created_at: "remoteCreatedAt",
                field_mappings: "fieldMappings",
            });
        });

    export type Outbound = {
        activity_type?: string | undefined;
        subject?: string | undefined;
        body?: string | undefined;
        visibility?: string | undefined;
        candidate_id?: string | undefined;
        remote_created_at?: string | undefined;
        field_mappings: UnifiedAtsActivityInputFieldMappings$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedAtsActivityInput> = z
        .object({
            activityType: z.string().optional(),
            subject: z.string().optional(),
            body: z.string().optional(),
            visibility: z.string().optional(),
            candidateId: z.string().optional(),
            remoteCreatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            fieldMappings: z.lazy(() => UnifiedAtsActivityInputFieldMappings$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                activityType: "activity_type",
                candidateId: "candidate_id",
                remoteCreatedAt: "remote_created_at",
                fieldMappings: "field_mappings",
            });
        });
}
