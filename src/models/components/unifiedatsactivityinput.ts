/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedAtsActivityInput = {
    /**
     * The type of activity
     */
    activityType?: string | null | undefined;
    /**
     * The subject of the activity
     */
    subject?: string | null | undefined;
    /**
     * The body of the activity
     */
    body?: string | null | undefined;
    /**
     * The visibility of the activity
     */
    visibility?: string | null | undefined;
    /**
     * The UUID of the candidate
     */
    candidateId?: string | null | undefined;
    /**
     * The remote creation date of the activity
     */
    remoteCreatedAt?: Date | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedAtsActivityInput$inboundSchema: z.ZodType<
    UnifiedAtsActivityInput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        activity_type: z.nullable(z.string()).optional(),
        subject: z.nullable(z.string()).optional(),
        body: z.nullable(z.string()).optional(),
        visibility: z.nullable(z.string()).optional(),
        candidate_id: z.nullable(z.string()).optional(),
        remote_created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        field_mappings: z.nullable(z.record(z.any())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            activity_type: "activityType",
            candidate_id: "candidateId",
            remote_created_at: "remoteCreatedAt",
            field_mappings: "fieldMappings",
        });
    });

/** @internal */
export type UnifiedAtsActivityInput$Outbound = {
    activity_type?: string | null | undefined;
    subject?: string | null | undefined;
    body?: string | null | undefined;
    visibility?: string | null | undefined;
    candidate_id?: string | null | undefined;
    remote_created_at?: string | null | undefined;
    field_mappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedAtsActivityInput$outboundSchema: z.ZodType<
    UnifiedAtsActivityInput$Outbound,
    z.ZodTypeDef,
    UnifiedAtsActivityInput
> = z
    .object({
        activityType: z.nullable(z.string()).optional(),
        subject: z.nullable(z.string()).optional(),
        body: z.nullable(z.string()).optional(),
        visibility: z.nullable(z.string()).optional(),
        candidateId: z.nullable(z.string()).optional(),
        remoteCreatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        fieldMappings: z.nullable(z.record(z.any())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            activityType: "activity_type",
            candidateId: "candidate_id",
            remoteCreatedAt: "remote_created_at",
            fieldMappings: "field_mappings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAtsActivityInput$ {
    /** @deprecated use `UnifiedAtsActivityInput$inboundSchema` instead. */
    export const inboundSchema = UnifiedAtsActivityInput$inboundSchema;
    /** @deprecated use `UnifiedAtsActivityInput$outboundSchema` instead. */
    export const outboundSchema = UnifiedAtsActivityInput$outboundSchema;
    /** @deprecated use `UnifiedAtsActivityInput$Outbound` instead. */
    export type Outbound = UnifiedAtsActivityInput$Outbound;
}
