/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedAtsTagOutputFieldMappings = {};

export type UnifiedAtsTagOutputRemoteData = {};

export type UnifiedAtsTagOutput = {
    /**
     * The name of the tag
     */
    name?: string | undefined;
    /**
     * The UUID of the candidate
     */
    idAtsCandidate?: string | undefined;
    fieldMappings: UnifiedAtsTagOutputFieldMappings;
    /**
     * The UUID of the tag
     */
    id?: string | undefined;
    /**
     * The remote ID of the tag in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedAtsTagOutputRemoteData;
    /**
     * The creation date of the tag
     */
    createdAt?: Date | undefined;
    /**
     * The modification date of the tag
     */
    modifiedAt?: Date | undefined;
};

/** @internal */
export namespace UnifiedAtsTagOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<UnifiedAtsTagOutputFieldMappings, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsTagOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsTagOutputRemoteData$ {
    export const inboundSchema: z.ZodType<UnifiedAtsTagOutputRemoteData, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedAtsTagOutputRemoteData> =
        z.object({});
}

/** @internal */
export namespace UnifiedAtsTagOutput$ {
    export const inboundSchema: z.ZodType<UnifiedAtsTagOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string().optional(),
            id_ats_candidate: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedAtsTagOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedAtsTagOutputRemoteData$.inboundSchema),
            created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            modified_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                id_ats_candidate: "idAtsCandidate",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name?: string | undefined;
        id_ats_candidate?: string | undefined;
        field_mappings: UnifiedAtsTagOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedAtsTagOutputRemoteData$.Outbound;
        created_at?: string | undefined;
        modified_at?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedAtsTagOutput> = z
        .object({
            name: z.string().optional(),
            idAtsCandidate: z.string().optional(),
            fieldMappings: z.lazy(() => UnifiedAtsTagOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedAtsTagOutputRemoteData$.outboundSchema),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            modifiedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                idAtsCandidate: "id_ats_candidate",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
