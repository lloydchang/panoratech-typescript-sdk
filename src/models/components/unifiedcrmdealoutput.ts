/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedCrmDealOutputFieldMappings = {};

export type UnifiedCrmDealOutputRemoteData = {};

export type UnifiedCrmDealOutputCreatedAt = {};

export type UnifiedCrmDealOutputModifiedAt = {};

export type UnifiedCrmDealOutput = {
    /**
     * The name of the deal
     */
    name: string;
    /**
     * The description of the deal
     */
    description: string;
    /**
     * The amount of the deal
     */
    amount: number;
    /**
     * The UUID of the user who is on the deal
     */
    userId?: string | undefined;
    /**
     * The UUID of the stage of the deal
     */
    stageId?: string | undefined;
    /**
     * The UUID of the company tied to the deal
     */
    companyId?: string | undefined;
    fieldMappings: UnifiedCrmDealOutputFieldMappings;
    /**
     * The UUID of the deal
     */
    id?: string | undefined;
    /**
     * The id of the deal in the context of the Crm 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedCrmDealOutputRemoteData;
    createdAt: UnifiedCrmDealOutputCreatedAt;
    modifiedAt: UnifiedCrmDealOutputModifiedAt;
};

/** @internal */
export namespace UnifiedCrmDealOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedCrmDealOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedCrmDealOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedCrmDealOutputRemoteData$ {
    export const inboundSchema: z.ZodType<UnifiedCrmDealOutputRemoteData, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmDealOutputRemoteData> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmDealOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<UnifiedCrmDealOutputCreatedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmDealOutputCreatedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmDealOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<UnifiedCrmDealOutputModifiedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmDealOutputModifiedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmDealOutput$ {
    export const inboundSchema: z.ZodType<UnifiedCrmDealOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            description: z.string(),
            amount: z.number(),
            user_id: z.string().optional(),
            stage_id: z.string().optional(),
            company_id: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedCrmDealOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedCrmDealOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedCrmDealOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedCrmDealOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                user_id: "userId",
                stage_id: "stageId",
                company_id: "companyId",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name: string;
        description: string;
        amount: number;
        user_id?: string | undefined;
        stage_id?: string | undefined;
        company_id?: string | undefined;
        field_mappings: UnifiedCrmDealOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedCrmDealOutputRemoteData$.Outbound;
        created_at: UnifiedCrmDealOutputCreatedAt$.Outbound;
        modified_at: UnifiedCrmDealOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmDealOutput> = z
        .object({
            name: z.string(),
            description: z.string(),
            amount: z.number(),
            userId: z.string().optional(),
            stageId: z.string().optional(),
            companyId: z.string().optional(),
            fieldMappings: z.lazy(() => UnifiedCrmDealOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedCrmDealOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedCrmDealOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedCrmDealOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                userId: "user_id",
                stageId: "stage_id",
                companyId: "company_id",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
