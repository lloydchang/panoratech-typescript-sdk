/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    LineItem,
    LineItem$inboundSchema,
    LineItem$Outbound,
    LineItem$outboundSchema,
} from "./lineitem.js";
import * as z from "zod";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingInvoiceInputFieldMappings = {};

export type UnifiedAccountingInvoiceInput = {
    /**
     * The type of the invoice
     */
    type?: string | null | undefined;
    /**
     * The invoice number
     */
    number?: string | null | undefined;
    /**
     * The date the invoice was issued
     */
    issueDate?: Date | null | undefined;
    /**
     * The due date of the invoice
     */
    dueDate?: Date | null | undefined;
    /**
     * The date the invoice was paid
     */
    paidOnDate?: Date | null | undefined;
    /**
     * A memo or note on the invoice
     */
    memo?: string | null | undefined;
    /**
     * The currency of the invoice
     */
    currency?: string | null | undefined;
    /**
     * The exchange rate applied to the invoice
     */
    exchangeRate?: string | null | undefined;
    /**
     * The total discount applied to the invoice
     */
    totalDiscount?: number | null | undefined;
    /**
     * The subtotal of the invoice
     */
    subTotal?: number | null | undefined;
    /**
     * The status of the invoice
     */
    status?: string | null | undefined;
    /**
     * The total tax amount on the invoice
     */
    totalTaxAmount?: number | null | undefined;
    /**
     * The total amount of the invoice
     */
    totalAmount?: number | null | undefined;
    /**
     * The remaining balance on the invoice
     */
    balance?: number | null | undefined;
    /**
     * The UUID of the associated contact
     */
    contactId?: string | null | undefined;
    /**
     * The UUID of the associated accounting period
     */
    accountingPeriodId?: string | null | undefined;
    /**
     * The UUIDs of the tracking categories associated with the invoice
     */
    trackingCategories?: Array<string> | null | undefined;
    /**
     * The line items associated with this invoice
     */
    lineItems?: Array<LineItem> | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedAccountingInvoiceInputFieldMappings | null | undefined;
};

/** @internal */
export const UnifiedAccountingInvoiceInputFieldMappings$inboundSchema: z.ZodType<
    UnifiedAccountingInvoiceInputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingInvoiceInputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingInvoiceInputFieldMappings$outboundSchema: z.ZodType<
    UnifiedAccountingInvoiceInputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingInvoiceInputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingInvoiceInputFieldMappings$ {
    /** @deprecated use `UnifiedAccountingInvoiceInputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingInvoiceInputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedAccountingInvoiceInputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingInvoiceInputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedAccountingInvoiceInputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedAccountingInvoiceInputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingInvoiceInput$inboundSchema: z.ZodType<
    UnifiedAccountingInvoiceInput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: z.nullable(z.string()).optional(),
        number: z.nullable(z.string()).optional(),
        issue_date: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        due_date: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        paid_on_date: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        memo: z.nullable(z.string()).optional(),
        currency: z.nullable(z.string()).optional(),
        exchange_rate: z.nullable(z.string()).optional(),
        total_discount: z.nullable(z.number()).optional(),
        sub_total: z.nullable(z.number()).optional(),
        status: z.nullable(z.string()).optional(),
        total_tax_amount: z.nullable(z.number()).optional(),
        total_amount: z.nullable(z.number()).optional(),
        balance: z.nullable(z.number()).optional(),
        contact_id: z.nullable(z.string()).optional(),
        accounting_period_id: z.nullable(z.string()).optional(),
        tracking_categories: z.nullable(z.array(z.string())).optional(),
        line_items: z.array(LineItem$inboundSchema).optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedAccountingInvoiceInputFieldMappings$inboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            issue_date: "issueDate",
            due_date: "dueDate",
            paid_on_date: "paidOnDate",
            exchange_rate: "exchangeRate",
            total_discount: "totalDiscount",
            sub_total: "subTotal",
            total_tax_amount: "totalTaxAmount",
            total_amount: "totalAmount",
            contact_id: "contactId",
            accounting_period_id: "accountingPeriodId",
            tracking_categories: "trackingCategories",
            line_items: "lineItems",
            field_mappings: "fieldMappings",
        });
    });

/** @internal */
export type UnifiedAccountingInvoiceInput$Outbound = {
    type?: string | null | undefined;
    number?: string | null | undefined;
    issue_date?: string | null | undefined;
    due_date?: string | null | undefined;
    paid_on_date?: string | null | undefined;
    memo?: string | null | undefined;
    currency?: string | null | undefined;
    exchange_rate?: string | null | undefined;
    total_discount?: number | null | undefined;
    sub_total?: number | null | undefined;
    status?: string | null | undefined;
    total_tax_amount?: number | null | undefined;
    total_amount?: number | null | undefined;
    balance?: number | null | undefined;
    contact_id?: string | null | undefined;
    accounting_period_id?: string | null | undefined;
    tracking_categories?: Array<string> | null | undefined;
    line_items?: Array<LineItem$Outbound> | undefined;
    field_mappings?: UnifiedAccountingInvoiceInputFieldMappings$Outbound | null | undefined;
};

/** @internal */
export const UnifiedAccountingInvoiceInput$outboundSchema: z.ZodType<
    UnifiedAccountingInvoiceInput$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingInvoiceInput
> = z
    .object({
        type: z.nullable(z.string()).optional(),
        number: z.nullable(z.string()).optional(),
        issueDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        dueDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        paidOnDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        memo: z.nullable(z.string()).optional(),
        currency: z.nullable(z.string()).optional(),
        exchangeRate: z.nullable(z.string()).optional(),
        totalDiscount: z.nullable(z.number()).optional(),
        subTotal: z.nullable(z.number()).optional(),
        status: z.nullable(z.string()).optional(),
        totalTaxAmount: z.nullable(z.number()).optional(),
        totalAmount: z.nullable(z.number()).optional(),
        balance: z.nullable(z.number()).optional(),
        contactId: z.nullable(z.string()).optional(),
        accountingPeriodId: z.nullable(z.string()).optional(),
        trackingCategories: z.nullable(z.array(z.string())).optional(),
        lineItems: z.array(LineItem$outboundSchema).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedAccountingInvoiceInputFieldMappings$outboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            issueDate: "issue_date",
            dueDate: "due_date",
            paidOnDate: "paid_on_date",
            exchangeRate: "exchange_rate",
            totalDiscount: "total_discount",
            subTotal: "sub_total",
            totalTaxAmount: "total_tax_amount",
            totalAmount: "total_amount",
            contactId: "contact_id",
            accountingPeriodId: "accounting_period_id",
            trackingCategories: "tracking_categories",
            lineItems: "line_items",
            fieldMappings: "field_mappings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingInvoiceInput$ {
    /** @deprecated use `UnifiedAccountingInvoiceInput$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingInvoiceInput$inboundSchema;
    /** @deprecated use `UnifiedAccountingInvoiceInput$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingInvoiceInput$outboundSchema;
    /** @deprecated use `UnifiedAccountingInvoiceInput$Outbound` instead. */
    export type Outbound = UnifiedAccountingInvoiceInput$Outbound;
}
