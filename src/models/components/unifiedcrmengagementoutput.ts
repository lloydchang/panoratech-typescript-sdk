/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UnifiedCrmEngagementOutput = {
  /**
   * The content of the engagement
   */
  content?: string | null | undefined;
  /**
   * The direction of the engagement. Authorized values are INBOUND or OUTBOUND
   */
  direction?: string | null | undefined;
  /**
   * The subject of the engagement
   */
  subject?: string | null | undefined;
  /**
   * The start time of the engagement
   */
  startAt?: Date | null | undefined;
  /**
   * The end time of the engagement
   */
  endTime?: Date | null | undefined;
  /**
   * The type of the engagement. Authorized values are EMAIL, CALL or MEETING
   */
  type: string | null;
  /**
   * The UUID of the user tied to the engagement
   */
  userId?: string | null | undefined;
  /**
   * The UUID of the company tied to the engagement
   */
  companyId?: string | null | undefined;
  /**
   * The UUIDs of contacts tied to the engagement object
   */
  contacts?: Array<string> | null | undefined;
  /**
   * The custom field mappings of the engagement between the remote 3rd party & Panora
   */
  fieldMappings?: { [k: string]: any } | null | undefined;
  /**
   * The UUID of the engagement
   */
  id?: string | null | undefined;
  /**
   * The id of the engagement in the context of the Crm 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The remote data of the engagement in the context of the Crm 3rd Party
   */
  remoteData?: { [k: string]: any } | null | undefined;
  /**
   * The created date of the object
   */
  createdAt?: Date | null | undefined;
  /**
   * The modified date of the object
   */
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedCrmEngagementOutput$inboundSchema: z.ZodType<
  UnifiedCrmEngagementOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()).optional(),
  direction: z.nullable(z.string()).optional(),
  subject: z.nullable(z.string()).optional(),
  start_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_time: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  type: z.nullable(z.string()),
  user_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  contacts: z.nullable(z.array(z.string())).optional(),
  field_mappings: z.nullable(z.record(z.any())).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_data: z.nullable(z.record(z.any())).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_at": "startAt",
    "end_time": "endTime",
    "user_id": "userId",
    "company_id": "companyId",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_data": "remoteData",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedCrmEngagementOutput$Outbound = {
  content?: string | null | undefined;
  direction?: string | null | undefined;
  subject?: string | null | undefined;
  start_at?: string | null | undefined;
  end_time?: string | null | undefined;
  type: string | null;
  user_id?: string | null | undefined;
  company_id?: string | null | undefined;
  contacts?: Array<string> | null | undefined;
  field_mappings?: { [k: string]: any } | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_data?: { [k: string]: any } | null | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedCrmEngagementOutput$outboundSchema: z.ZodType<
  UnifiedCrmEngagementOutput$Outbound,
  z.ZodTypeDef,
  UnifiedCrmEngagementOutput
> = z.object({
  content: z.nullable(z.string()).optional(),
  direction: z.nullable(z.string()).optional(),
  subject: z.nullable(z.string()).optional(),
  startAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endTime: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  type: z.nullable(z.string()),
  userId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  contacts: z.nullable(z.array(z.string())).optional(),
  fieldMappings: z.nullable(z.record(z.any())).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteData: z.nullable(z.record(z.any())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    startAt: "start_at",
    endTime: "end_time",
    userId: "user_id",
    companyId: "company_id",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteData: "remote_data",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCrmEngagementOutput$ {
  /** @deprecated use `UnifiedCrmEngagementOutput$inboundSchema` instead. */
  export const inboundSchema = UnifiedCrmEngagementOutput$inboundSchema;
  /** @deprecated use `UnifiedCrmEngagementOutput$outboundSchema` instead. */
  export const outboundSchema = UnifiedCrmEngagementOutput$outboundSchema;
  /** @deprecated use `UnifiedCrmEngagementOutput$Outbound` instead. */
  export type Outbound = UnifiedCrmEngagementOutput$Outbound;
}
