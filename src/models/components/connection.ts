/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Strategy type
 */
export enum TokenType {
  Oauth2 = "oauth2",
  Apikey = "apikey",
  Basic = "basic",
}

export type Connection = {
  /**
   * Unique identifier for the connection
   */
  idConnection: string;
  /**
   * Status of the connection
   */
  status: string;
  /**
   * Slug for the provider
   */
  providerSlug: string;
  /**
   * Vertical category of the connection
   */
  vertical: string;
  /**
   * URL of the account
   */
  accountUrl: string;
  /**
   * Strategy type
   */
  tokenType: TokenType;
  /**
   * Access token for the connection
   */
  accessToken: string;
  /**
   * Refresh token for the connection
   */
  refreshToken: string;
  /**
   * Expiration timestamp of the access token
   */
  expirationTimestamp: Date;
  /**
   * Timestamp when the connection was created
   */
  createdAt: Date;
  /**
   * UUID Token for the connection
   */
  connectionToken: string;
  /**
   * Project ID associated with the connection
   */
  idProject: string;
  /**
   * Linked user ID associated with the connection
   */
  idLinkedUser: string;
};

/** @internal */
export const TokenType$inboundSchema: z.ZodNativeEnum<typeof TokenType> = z
  .nativeEnum(TokenType);

/** @internal */
export const TokenType$outboundSchema: z.ZodNativeEnum<typeof TokenType> =
  TokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenType$ {
  /** @deprecated use `TokenType$inboundSchema` instead. */
  export const inboundSchema = TokenType$inboundSchema;
  /** @deprecated use `TokenType$outboundSchema` instead. */
  export const outboundSchema = TokenType$outboundSchema;
}

/** @internal */
export const Connection$inboundSchema: z.ZodType<
  Connection,
  z.ZodTypeDef,
  unknown
> = z.object({
  id_connection: z.string(),
  status: z.string(),
  provider_slug: z.string(),
  vertical: z.string(),
  account_url: z.string(),
  token_type: TokenType$inboundSchema,
  access_token: z.string(),
  refresh_token: z.string(),
  expiration_timestamp: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  connection_token: z.string(),
  id_project: z.string(),
  id_linked_user: z.string(),
}).transform((v) => {
  return remap$(v, {
    "id_connection": "idConnection",
    "provider_slug": "providerSlug",
    "account_url": "accountUrl",
    "token_type": "tokenType",
    "access_token": "accessToken",
    "refresh_token": "refreshToken",
    "expiration_timestamp": "expirationTimestamp",
    "created_at": "createdAt",
    "connection_token": "connectionToken",
    "id_project": "idProject",
    "id_linked_user": "idLinkedUser",
  });
});

/** @internal */
export type Connection$Outbound = {
  id_connection: string;
  status: string;
  provider_slug: string;
  vertical: string;
  account_url: string;
  token_type: string;
  access_token: string;
  refresh_token: string;
  expiration_timestamp: string;
  created_at: string;
  connection_token: string;
  id_project: string;
  id_linked_user: string;
};

/** @internal */
export const Connection$outboundSchema: z.ZodType<
  Connection$Outbound,
  z.ZodTypeDef,
  Connection
> = z.object({
  idConnection: z.string(),
  status: z.string(),
  providerSlug: z.string(),
  vertical: z.string(),
  accountUrl: z.string(),
  tokenType: TokenType$outboundSchema,
  accessToken: z.string(),
  refreshToken: z.string(),
  expirationTimestamp: z.date().transform(v => v.toISOString()),
  createdAt: z.date().transform(v => v.toISOString()),
  connectionToken: z.string(),
  idProject: z.string(),
  idLinkedUser: z.string(),
}).transform((v) => {
  return remap$(v, {
    idConnection: "id_connection",
    providerSlug: "provider_slug",
    accountUrl: "account_url",
    tokenType: "token_type",
    accessToken: "access_token",
    refreshToken: "refresh_token",
    expirationTimestamp: "expiration_timestamp",
    createdAt: "created_at",
    connectionToken: "connection_token",
    idProject: "id_project",
    idLinkedUser: "id_linked_user",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Connection$ {
  /** @deprecated use `Connection$inboundSchema` instead. */
  export const inboundSchema = Connection$inboundSchema;
  /** @deprecated use `Connection$outboundSchema` instead. */
  export const outboundSchema = Connection$outboundSchema;
  /** @deprecated use `Connection$Outbound` instead. */
  export type Outbound = Connection$Outbound;
}

export function connectionToJSON(connection: Connection): string {
  return JSON.stringify(Connection$outboundSchema.parse(connection));
}

export function connectionFromJSON(
  jsonString: string,
): SafeParseResult<Connection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Connection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Connection' from JSON`,
  );
}
