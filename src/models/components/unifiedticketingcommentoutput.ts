/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTicketingCommentOutputRemoteData = {};

export type UnifiedTicketingCommentOutputCreatedAt = {};

export type UnifiedTicketingCommentOutputModifiedAt = {};

export type UnifiedTicketingCommentOutput = {
    /**
     * The body of the comment
     */
    body: string;
    /**
     * The html body of the comment
     */
    htmlBody?: string | undefined;
    /**
     * The public status of the comment
     */
    isPrivate?: boolean | undefined;
    /**
     * The creator type of the comment. Authorized values are either USER or CONTACT
     */
    creatorType?: string | undefined;
    /**
     * The UUID of the ticket the comment is tied to
     */
    ticketId?: string | undefined;
    /**
     * The UUID of the contact which the comment belongs to (if no user_id specified)
     */
    contactId?: string | undefined;
    /**
     * The UUID of the user which the comment belongs to (if no contact_id specified)
     */
    userId?: string | undefined;
    /**
     * The attachements UUIDs tied to the comment
     */
    attachments?: Array<string> | undefined;
    /**
     * The UUID of the comment
     */
    id?: string | undefined;
    /**
     * The id of the comment in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedTicketingCommentOutputRemoteData;
    createdAt: UnifiedTicketingCommentOutputCreatedAt;
    modifiedAt: UnifiedTicketingCommentOutputModifiedAt;
};

/** @internal */
export namespace UnifiedTicketingCommentOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingCommentOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingCommentOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingCommentOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingCommentOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingCommentOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingCommentOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingCommentOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingCommentOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingCommentOutput$ {
    export const inboundSchema: z.ZodType<UnifiedTicketingCommentOutput, z.ZodTypeDef, unknown> = z
        .object({
            body: z.string(),
            html_body: z.string().optional(),
            is_private: z.boolean().optional(),
            creator_type: z.string().optional(),
            ticket_id: z.string().optional(),
            contact_id: z.string().optional(),
            user_id: z.string().optional(),
            attachments: z.array(z.string()).optional(),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedTicketingCommentOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedTicketingCommentOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedTicketingCommentOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                html_body: "htmlBody",
                is_private: "isPrivate",
                creator_type: "creatorType",
                ticket_id: "ticketId",
                contact_id: "contactId",
                user_id: "userId",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        body: string;
        html_body?: string | undefined;
        is_private?: boolean | undefined;
        creator_type?: string | undefined;
        ticket_id?: string | undefined;
        contact_id?: string | undefined;
        user_id?: string | undefined;
        attachments?: Array<string> | undefined;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedTicketingCommentOutputRemoteData$.Outbound;
        created_at: UnifiedTicketingCommentOutputCreatedAt$.Outbound;
        modified_at: UnifiedTicketingCommentOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedTicketingCommentOutput> =
        z
            .object({
                body: z.string(),
                htmlBody: z.string().optional(),
                isPrivate: z.boolean().optional(),
                creatorType: z.string().optional(),
                ticketId: z.string().optional(),
                contactId: z.string().optional(),
                userId: z.string().optional(),
                attachments: z.array(z.string()).optional(),
                id: z.string().optional(),
                remoteId: z.string().optional(),
                remoteData: z.lazy(() => UnifiedTicketingCommentOutputRemoteData$.outboundSchema),
                createdAt: z.lazy(() => UnifiedTicketingCommentOutputCreatedAt$.outboundSchema),
                modifiedAt: z.lazy(() => UnifiedTicketingCommentOutputModifiedAt$.outboundSchema),
            })
            .transform((v) => {
                return remap$(v, {
                    htmlBody: "html_body",
                    isPrivate: "is_private",
                    creatorType: "creator_type",
                    ticketId: "ticket_id",
                    contactId: "contact_id",
                    userId: "user_id",
                    remoteId: "remote_id",
                    remoteData: "remote_data",
                    createdAt: "created_at",
                    modifiedAt: "modified_at",
                });
            });
}
