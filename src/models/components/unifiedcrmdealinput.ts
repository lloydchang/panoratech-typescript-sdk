/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedCrmDealInput = {
    /**
     * The name of the deal
     */
    name: string | null;
    /**
     * The description of the deal
     */
    description: string | null;
    /**
     * The amount of the deal
     */
    amount: number | null;
    /**
     * The UUID of the user who is on the deal
     */
    userId?: string | null | undefined;
    /**
     * The UUID of the stage of the deal
     */
    stageId?: string | null | undefined;
    /**
     * The UUID of the company tied to the deal
     */
    companyId?: string | null | undefined;
    /**
     * The custom field mappings of the company between the remote 3rd party & Panora
     */
    fieldMappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedCrmDealInput$inboundSchema: z.ZodType<
    UnifiedCrmDealInput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()),
        description: z.nullable(z.string()),
        amount: z.nullable(z.number()),
        user_id: z.nullable(z.string()).optional(),
        stage_id: z.nullable(z.string()).optional(),
        company_id: z.nullable(z.string()).optional(),
        field_mappings: z.nullable(z.record(z.any())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            user_id: "userId",
            stage_id: "stageId",
            company_id: "companyId",
            field_mappings: "fieldMappings",
        });
    });

/** @internal */
export type UnifiedCrmDealInput$Outbound = {
    name: string | null;
    description: string | null;
    amount: number | null;
    user_id?: string | null | undefined;
    stage_id?: string | null | undefined;
    company_id?: string | null | undefined;
    field_mappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedCrmDealInput$outboundSchema: z.ZodType<
    UnifiedCrmDealInput$Outbound,
    z.ZodTypeDef,
    UnifiedCrmDealInput
> = z
    .object({
        name: z.nullable(z.string()),
        description: z.nullable(z.string()),
        amount: z.nullable(z.number()),
        userId: z.nullable(z.string()).optional(),
        stageId: z.nullable(z.string()).optional(),
        companyId: z.nullable(z.string()).optional(),
        fieldMappings: z.nullable(z.record(z.any())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            userId: "user_id",
            stageId: "stage_id",
            companyId: "company_id",
            fieldMappings: "field_mappings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCrmDealInput$ {
    /** @deprecated use `UnifiedCrmDealInput$inboundSchema` instead. */
    export const inboundSchema = UnifiedCrmDealInput$inboundSchema;
    /** @deprecated use `UnifiedCrmDealInput$outboundSchema` instead. */
    export const outboundSchema = UnifiedCrmDealInput$outboundSchema;
    /** @deprecated use `UnifiedCrmDealInput$Outbound` instead. */
    export type Outbound = UnifiedCrmDealInput$Outbound;
}
