/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  LineItem,
  LineItem$inboundSchema,
  LineItem$Outbound,
  LineItem$outboundSchema,
} from "./lineitem.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingPaymentOutputFieldMappings = {};

/**
 * The remote data of the payment in the context of the 3rd Party
 */
export type UnifiedAccountingPaymentOutputRemoteData = {};

export type UnifiedAccountingPaymentOutput = {
  /**
   * The UUID of the associated invoice
   */
  invoiceId?: string | null | undefined;
  /**
   * The date of the transaction
   */
  transactionDate?: Date | null | undefined;
  /**
   * The UUID of the associated contact
   */
  contactId?: string | null | undefined;
  /**
   * The UUID of the associated account
   */
  accountId?: string | null | undefined;
  /**
   * The currency of the payment
   */
  currency?: string | null | undefined;
  /**
   * The exchange rate applied to the payment
   */
  exchangeRate?: string | null | undefined;
  /**
   * The total amount of the payment in cents
   */
  totalAmount?: number | null | undefined;
  /**
   * The type of payment
   */
  type?: string | null | undefined;
  /**
   * The UUID of the associated company info
   */
  companyInfoId?: string | null | undefined;
  /**
   * The UUID of the associated accounting period
   */
  accountingPeriodId?: string | null | undefined;
  /**
   * The UUIDs of the tracking categories associated with the payment
   */
  trackingCategories?: Array<string> | null | undefined;
  /**
   * The line items associated with this payment
   */
  lineItems?: Array<LineItem> | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?:
    | UnifiedAccountingPaymentOutputFieldMappings
    | null
    | undefined;
  /**
   * The UUID of the payment record
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the payment in the context of the 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The date when the payment was last updated in the remote system
   */
  remoteUpdatedAt?: Date | null | undefined;
  /**
   * The remote data of the payment in the context of the 3rd Party
   */
  remoteData?: UnifiedAccountingPaymentOutputRemoteData | null | undefined;
  /**
   * The created date of the payment record
   */
  createdAt?: Date | null | undefined;
  /**
   * The last modified date of the payment record
   */
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAccountingPaymentOutputFieldMappings$inboundSchema:
  z.ZodType<
    UnifiedAccountingPaymentOutputFieldMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingPaymentOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingPaymentOutputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedAccountingPaymentOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingPaymentOutputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingPaymentOutputFieldMappings$ {
  /** @deprecated use `UnifiedAccountingPaymentOutputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingPaymentOutputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentOutputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingPaymentOutputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentOutputFieldMappings$Outbound` instead. */
  export type Outbound = UnifiedAccountingPaymentOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingPaymentOutputRemoteData$inboundSchema: z.ZodType<
  UnifiedAccountingPaymentOutputRemoteData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingPaymentOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingPaymentOutputRemoteData$outboundSchema: z.ZodType<
  UnifiedAccountingPaymentOutputRemoteData$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingPaymentOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingPaymentOutputRemoteData$ {
  /** @deprecated use `UnifiedAccountingPaymentOutputRemoteData$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingPaymentOutputRemoteData$inboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentOutputRemoteData$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingPaymentOutputRemoteData$outboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentOutputRemoteData$Outbound` instead. */
  export type Outbound = UnifiedAccountingPaymentOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedAccountingPaymentOutput$inboundSchema: z.ZodType<
  UnifiedAccountingPaymentOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  invoice_id: z.nullable(z.string()).optional(),
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  contact_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchange_rate: z.nullable(z.string()).optional(),
  total_amount: z.nullable(z.number()).optional(),
  type: z.nullable(z.string()).optional(),
  company_info_id: z.nullable(z.string()).optional(),
  accounting_period_id: z.nullable(z.string()).optional(),
  tracking_categories: z.nullable(z.array(z.string())).optional(),
  line_items: z.array(LineItem$inboundSchema).optional(),
  field_mappings: z.nullable(
    z.lazy(() => UnifiedAccountingPaymentOutputFieldMappings$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_data: z.nullable(
    z.lazy(() => UnifiedAccountingPaymentOutputRemoteData$inboundSchema),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "invoice_id": "invoiceId",
    "transaction_date": "transactionDate",
    "contact_id": "contactId",
    "account_id": "accountId",
    "exchange_rate": "exchangeRate",
    "total_amount": "totalAmount",
    "company_info_id": "companyInfoId",
    "accounting_period_id": "accountingPeriodId",
    "tracking_categories": "trackingCategories",
    "line_items": "lineItems",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_updated_at": "remoteUpdatedAt",
    "remote_data": "remoteData",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedAccountingPaymentOutput$Outbound = {
  invoice_id?: string | null | undefined;
  transaction_date?: string | null | undefined;
  contact_id?: string | null | undefined;
  account_id?: string | null | undefined;
  currency?: string | null | undefined;
  exchange_rate?: string | null | undefined;
  total_amount?: number | null | undefined;
  type?: string | null | undefined;
  company_info_id?: string | null | undefined;
  accounting_period_id?: string | null | undefined;
  tracking_categories?: Array<string> | null | undefined;
  line_items?: Array<LineItem$Outbound> | undefined;
  field_mappings?:
    | UnifiedAccountingPaymentOutputFieldMappings$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_updated_at?: string | null | undefined;
  remote_data?:
    | UnifiedAccountingPaymentOutputRemoteData$Outbound
    | null
    | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingPaymentOutput$outboundSchema: z.ZodType<
  UnifiedAccountingPaymentOutput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingPaymentOutput
> = z.object({
  invoiceId: z.nullable(z.string()).optional(),
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  contactId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchangeRate: z.nullable(z.string()).optional(),
  totalAmount: z.nullable(z.number()).optional(),
  type: z.nullable(z.string()).optional(),
  companyInfoId: z.nullable(z.string()).optional(),
  accountingPeriodId: z.nullable(z.string()).optional(),
  trackingCategories: z.nullable(z.array(z.string())).optional(),
  lineItems: z.array(LineItem$outboundSchema).optional(),
  fieldMappings: z.nullable(
    z.lazy(() => UnifiedAccountingPaymentOutputFieldMappings$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteUpdatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  remoteData: z.nullable(
    z.lazy(() => UnifiedAccountingPaymentOutputRemoteData$outboundSchema),
  ).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    invoiceId: "invoice_id",
    transactionDate: "transaction_date",
    contactId: "contact_id",
    accountId: "account_id",
    exchangeRate: "exchange_rate",
    totalAmount: "total_amount",
    companyInfoId: "company_info_id",
    accountingPeriodId: "accounting_period_id",
    trackingCategories: "tracking_categories",
    lineItems: "line_items",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteUpdatedAt: "remote_updated_at",
    remoteData: "remote_data",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingPaymentOutput$ {
  /** @deprecated use `UnifiedAccountingPaymentOutput$inboundSchema` instead. */
  export const inboundSchema = UnifiedAccountingPaymentOutput$inboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentOutput$outboundSchema` instead. */
  export const outboundSchema = UnifiedAccountingPaymentOutput$outboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentOutput$Outbound` instead. */
  export type Outbound = UnifiedAccountingPaymentOutput$Outbound;
}
