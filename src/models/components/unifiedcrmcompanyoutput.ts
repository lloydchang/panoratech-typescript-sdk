/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    Address,
    Address$inboundSchema,
    Address$Outbound,
    Address$outboundSchema,
} from "./address.js";
import { Email, Email$inboundSchema, Email$Outbound, Email$outboundSchema } from "./email.js";
import { Phone, Phone$inboundSchema, Phone$Outbound, Phone$outboundSchema } from "./phone.js";
import * as z from "zod";

/**
 * The created date of the object
 */
export type CreatedAt = {};

/**
 * The modified date of the object
 */
export type ModifiedAt = {};

export type UnifiedCrmCompanyOutput = {
    /**
     * The name of the company
     */
    name: string | null;
    /**
     * The industry of the company. Authorized values can be found in the Industry enum.
     */
    industry?: string | null | undefined;
    /**
     * The number of employees of the company
     */
    numberOfEmployees?: number | null | undefined;
    /**
     * The UUID of the user who owns the company
     */
    userId?: string | null | undefined;
    /**
     * The email addresses of the company
     */
    emailAddresses?: Array<Email> | null | undefined;
    /**
     * The addresses of the company
     */
    addresses?: Array<Address> | null | undefined;
    /**
     * The phone numbers of the company
     */
    phoneNumbers?: Array<Phone> | null | undefined;
    /**
     * The custom field mappings of the company between the remote 3rd party & Panora
     */
    fieldMappings?: { [k: string]: any } | null | undefined;
    /**
     * The UUID of the company
     */
    id?: string | null | undefined;
    /**
     * The id of the company in the context of the Crm 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the company in the context of the Crm 3rd Party
     */
    remoteData?: { [k: string]: any } | null | undefined;
    /**
     * The created date of the object
     */
    createdAt?: CreatedAt | null | undefined;
    /**
     * The modified date of the object
     */
    modifiedAt?: ModifiedAt | null | undefined;
};

/** @internal */
export const CreatedAt$inboundSchema: z.ZodType<CreatedAt, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type CreatedAt$Outbound = {};

/** @internal */
export const CreatedAt$outboundSchema: z.ZodType<CreatedAt$Outbound, z.ZodTypeDef, CreatedAt> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedAt$ {
    /** @deprecated use `CreatedAt$inboundSchema` instead. */
    export const inboundSchema = CreatedAt$inboundSchema;
    /** @deprecated use `CreatedAt$outboundSchema` instead. */
    export const outboundSchema = CreatedAt$outboundSchema;
    /** @deprecated use `CreatedAt$Outbound` instead. */
    export type Outbound = CreatedAt$Outbound;
}

/** @internal */
export const ModifiedAt$inboundSchema: z.ZodType<ModifiedAt, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type ModifiedAt$Outbound = {};

/** @internal */
export const ModifiedAt$outboundSchema: z.ZodType<ModifiedAt$Outbound, z.ZodTypeDef, ModifiedAt> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifiedAt$ {
    /** @deprecated use `ModifiedAt$inboundSchema` instead. */
    export const inboundSchema = ModifiedAt$inboundSchema;
    /** @deprecated use `ModifiedAt$outboundSchema` instead. */
    export const outboundSchema = ModifiedAt$outboundSchema;
    /** @deprecated use `ModifiedAt$Outbound` instead. */
    export type Outbound = ModifiedAt$Outbound;
}

/** @internal */
export const UnifiedCrmCompanyOutput$inboundSchema: z.ZodType<
    UnifiedCrmCompanyOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()),
        industry: z.nullable(z.string()).optional(),
        number_of_employees: z.nullable(z.number()).optional(),
        user_id: z.nullable(z.string()).optional(),
        email_addresses: z.nullable(z.array(Email$inboundSchema)).optional(),
        addresses: z.nullable(z.array(Address$inboundSchema)).optional(),
        phone_numbers: z.nullable(z.array(Phone$inboundSchema)).optional(),
        field_mappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z.nullable(z.record(z.any())).optional(),
        created_at: z.nullable(z.lazy(() => CreatedAt$inboundSchema)).optional(),
        modified_at: z.nullable(z.lazy(() => ModifiedAt$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            number_of_employees: "numberOfEmployees",
            user_id: "userId",
            email_addresses: "emailAddresses",
            phone_numbers: "phoneNumbers",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedCrmCompanyOutput$Outbound = {
    name: string | null;
    industry?: string | null | undefined;
    number_of_employees?: number | null | undefined;
    user_id?: string | null | undefined;
    email_addresses?: Array<Email$Outbound> | null | undefined;
    addresses?: Array<Address$Outbound> | null | undefined;
    phone_numbers?: Array<Phone$Outbound> | null | undefined;
    field_mappings?: { [k: string]: any } | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: { [k: string]: any } | null | undefined;
    created_at?: CreatedAt$Outbound | null | undefined;
    modified_at?: ModifiedAt$Outbound | null | undefined;
};

/** @internal */
export const UnifiedCrmCompanyOutput$outboundSchema: z.ZodType<
    UnifiedCrmCompanyOutput$Outbound,
    z.ZodTypeDef,
    UnifiedCrmCompanyOutput
> = z
    .object({
        name: z.nullable(z.string()),
        industry: z.nullable(z.string()).optional(),
        numberOfEmployees: z.nullable(z.number()).optional(),
        userId: z.nullable(z.string()).optional(),
        emailAddresses: z.nullable(z.array(Email$outboundSchema)).optional(),
        addresses: z.nullable(z.array(Address$outboundSchema)).optional(),
        phoneNumbers: z.nullable(z.array(Phone$outboundSchema)).optional(),
        fieldMappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z.nullable(z.record(z.any())).optional(),
        createdAt: z.nullable(z.lazy(() => CreatedAt$outboundSchema)).optional(),
        modifiedAt: z.nullable(z.lazy(() => ModifiedAt$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            numberOfEmployees: "number_of_employees",
            userId: "user_id",
            emailAddresses: "email_addresses",
            phoneNumbers: "phone_numbers",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCrmCompanyOutput$ {
    /** @deprecated use `UnifiedCrmCompanyOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedCrmCompanyOutput$inboundSchema;
    /** @deprecated use `UnifiedCrmCompanyOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedCrmCompanyOutput$outboundSchema;
    /** @deprecated use `UnifiedCrmCompanyOutput$Outbound` instead. */
    export type Outbound = UnifiedCrmCompanyOutput$Outbound;
}
