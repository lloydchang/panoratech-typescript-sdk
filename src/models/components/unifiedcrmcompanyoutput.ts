/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    Address,
    Address$inboundSchema,
    Address$Outbound,
    Address$outboundSchema,
} from "./address.js";
import { Email, Email$inboundSchema, Email$Outbound, Email$outboundSchema } from "./email.js";
import { Phone, Phone$inboundSchema, Phone$Outbound, Phone$outboundSchema } from "./phone.js";
import * as z from "zod";

/**
 * The industry of the company. Authorized values can be found in the Industry enum.
 */
export enum Industry {
    Accounting = "ACCOUNTING",
    AirlinesAviation = "AIRLINES_AVIATION",
    AlternativeDisputeResolution = "ALTERNATIVE_DISPUTE_RESOLUTION",
    AlternativeMedicine = "ALTERNATIVE_MEDICINE",
    Animation = "ANIMATION",
    ApparelFashion = "APPAREL_FASHION",
    ArchitecturePlanning = "ARCHITECTURE_PLANNING",
    ArtsAndCrafts = "ARTS_AND_CRAFTS",
    Automotive = "AUTOMOTIVE",
    AviationAerospace = "AVIATION_AEROSPACE",
    Banking = "BANKING",
    Biotechnology = "BIOTECHNOLOGY",
    BroadcastMedia = "BROADCAST_MEDIA",
    BuildingMaterials = "BUILDING_MATERIALS",
    BusinessSuppliesAndEquipment = "BUSINESS_SUPPLIES_AND_EQUIPMENT",
    CapitalMarkets = "CAPITAL_MARKETS",
    Chemicals = "CHEMICALS",
    CivicSocialOrganization = "CIVIC_SOCIAL_ORGANIZATION",
    CivilEngineering = "CIVIL_ENGINEERING",
    CommercialRealEstate = "COMMERCIAL_REAL_ESTATE",
    ComputerNetworkSecurity = "COMPUTER_NETWORK_SECURITY",
    ComputerGames = "COMPUTER_GAMES",
    ComputerHardware = "COMPUTER_HARDWARE",
    ComputerNetworking = "COMPUTER_NETWORKING",
    ComputerSoftware = "COMPUTER_SOFTWARE",
    Internet = "INTERNET",
    Construction = "CONSTRUCTION",
    ConsumerElectronics = "CONSUMER_ELECTRONICS",
    ConsumerGoods = "CONSUMER_GOODS",
    ConsumerServices = "CONSUMER_SERVICES",
    Cosmetics = "COSMETICS",
    Dairy = "DAIRY",
    DefenseSpace = "DEFENSE_SPACE",
    Design = "DESIGN",
    EducationManagement = "EDUCATION_MANAGEMENT",
    ELearning = "E_LEARNING",
    ElectricalElectronicManufacturing = "ELECTRICAL_ELECTRONIC_MANUFACTURING",
    Entertainment = "ENTERTAINMENT",
    EnvironmentalServices = "ENVIRONMENTAL_SERVICES",
    EventsServices = "EVENTS_SERVICES",
    ExecutiveOffice = "EXECUTIVE_OFFICE",
    FacilitiesServices = "FACILITIES_SERVICES",
    Farming = "FARMING",
    FinancialServices = "FINANCIAL_SERVICES",
    FineArt = "FINE_ART",
    Fishery = "FISHERY",
    FoodBeverages = "FOOD_BEVERAGES",
    FoodProduction = "FOOD_PRODUCTION",
    FundRaising = "FUND_RAISING",
    Furniture = "FURNITURE",
    GamblingCasinos = "GAMBLING_CASINOS",
    GlassCeramicsConcrete = "GLASS_CERAMICS_CONCRETE",
    GovernmentAdministration = "GOVERNMENT_ADMINISTRATION",
    GovernmentRelations = "GOVERNMENT_RELATIONS",
    GraphicDesign = "GRAPHIC_DESIGN",
    HealthWellnessAndFitness = "HEALTH_WELLNESS_AND_FITNESS",
    HigherEducation = "HIGHER_EDUCATION",
    HospitalHealthCare = "HOSPITAL_HEALTH_CARE",
    Hospitality = "HOSPITALITY",
    HumanResources = "HUMAN_RESOURCES",
    ImportAndExport = "IMPORT_AND_EXPORT",
    IndividualFamilyServices = "INDIVIDUAL_FAMILY_SERVICES",
    IndustrialAutomation = "INDUSTRIAL_AUTOMATION",
    InformationServices = "INFORMATION_SERVICES",
    InformationTechnologyAndServices = "INFORMATION_TECHNOLOGY_AND_SERVICES",
    Insurance = "INSURANCE",
    InternationalAffairs = "INTERNATIONAL_AFFAIRS",
    InternationalTradeAndDevelopment = "INTERNATIONAL_TRADE_AND_DEVELOPMENT",
    InvestmentBanking = "INVESTMENT_BANKING",
    InvestmentManagement = "INVESTMENT_MANAGEMENT",
    Judiciary = "JUDICIARY",
    LawEnforcement = "LAW_ENFORCEMENT",
    LawPractice = "LAW_PRACTICE",
    LegalServices = "LEGAL_SERVICES",
    LegislativeOffice = "LEGISLATIVE_OFFICE",
    LeisureTravelTourism = "LEISURE_TRAVEL_TOURISM",
    Libraries = "LIBRARIES",
    LogisticsAndSupplyChain = "LOGISTICS_AND_SUPPLY_CHAIN",
    LuxuryGoodsJewelry = "LUXURY_GOODS_JEWELRY",
    Machinery = "MACHINERY",
    ManagementConsulting = "MANAGEMENT_CONSULTING",
    Maritime = "MARITIME",
    MarketResearch = "MARKET_RESEARCH",
    MarketingAndAdvertising = "MARKETING_AND_ADVERTISING",
    MechanicalOrIndustrialEngineering = "MECHANICAL_OR_INDUSTRIAL_ENGINEERING",
    MediaProduction = "MEDIA_PRODUCTION",
    MedicalDevices = "MEDICAL_DEVICES",
    MedicalPractice = "MEDICAL_PRACTICE",
    MentalHealthCare = "MENTAL_HEALTH_CARE",
    Military = "MILITARY",
    MiningMetals = "MINING_METALS",
    MotionPicturesAndFilm = "MOTION_PICTURES_AND_FILM",
    MuseumsAndInstitutions = "MUSEUMS_AND_INSTITUTIONS",
    Music = "MUSIC",
    Nanotechnology = "NANOTECHNOLOGY",
    Newspapers = "NEWSPAPERS",
    NonProfitOrganizationManagement = "NON_PROFIT_ORGANIZATION_MANAGEMENT",
    OilEnergy = "OIL_ENERGY",
    OnlineMedia = "ONLINE_MEDIA",
    OutsourcingOffshoring = "OUTSOURCING_OFFSHORING",
    PackageFreightDelivery = "PACKAGE_FREIGHT_DELIVERY",
    PackagingAndContainers = "PACKAGING_AND_CONTAINERS",
    PaperForestProducts = "PAPER_FOREST_PRODUCTS",
    PerformingArts = "PERFORMING_ARTS",
    Pharmaceuticals = "PHARMACEUTICALS",
    Philanthropy = "PHILANTHROPY",
    Photography = "PHOTOGRAPHY",
    Plastics = "PLASTICS",
    PoliticalOrganization = "POLITICAL_ORGANIZATION",
    PrimarySecondaryEducation = "PRIMARY_SECONDARY_EDUCATION",
    Printing = "PRINTING",
    ProfessionalTrainingCoaching = "PROFESSIONAL_TRAINING_COACHING",
    ProgramDevelopment = "PROGRAM_DEVELOPMENT",
    PublicPolicy = "PUBLIC_POLICY",
    PublicRelationsAndCommunications = "PUBLIC_RELATIONS_AND_COMMUNICATIONS",
    PublicSafety = "PUBLIC_SAFETY",
    Publishing = "PUBLISHING",
    RailroadManufacture = "RAILROAD_MANUFACTURE",
    Ranching = "RANCHING",
    RealEstate = "REAL_ESTATE",
    RecreationalFacilitiesAndServices = "RECREATIONAL_FACILITIES_AND_SERVICES",
    ReligiousInstitutions = "RELIGIOUS_INSTITUTIONS",
    RenewablesEnvironment = "RENEWABLES_ENVIRONMENT",
    Research = "RESEARCH",
    Restaurants = "RESTAURANTS",
    Retail = "RETAIL",
    SecurityAndInvestigations = "SECURITY_AND_INVESTIGATIONS",
    Semiconductors = "SEMICONDUCTORS",
    Shipbuilding = "SHIPBUILDING",
    SportingGoods = "SPORTING_GOODS",
    Sports = "SPORTS",
    StaffingAndRecruiting = "STAFFING_AND_RECRUITING",
    Supermarkets = "SUPERMARKETS",
    Telecommunications = "TELECOMMUNICATIONS",
    Textiles = "TEXTILES",
    ThinkTanks = "THINK_TANKS",
    Tobacco = "TOBACCO",
    TranslationAndLocalization = "TRANSLATION_AND_LOCALIZATION",
    TransportationTruckingRailroad = "TRANSPORTATION_TRUCKING_RAILROAD",
    Utilities = "UTILITIES",
    VentureCapitalPrivateEquity = "VENTURE_CAPITAL_PRIVATE_EQUITY",
    Veterinary = "VETERINARY",
    Warehousing = "WAREHOUSING",
    Wholesale = "WHOLESALE",
    WineAndSpirits = "WINE_AND_SPIRITS",
    Wireless = "WIRELESS",
    WritingAndEditing = "WRITING_AND_EDITING",
}

/**
 * The created date of the object
 */
export type CreatedAt = {};

/**
 * The modified date of the object
 */
export type ModifiedAt = {};

export type UnifiedCrmCompanyOutput = {
    /**
     * The name of the company
     */
    name: string | null;
    /**
     * The industry of the company. Authorized values can be found in the Industry enum.
     */
    industry?: Industry | null | undefined;
    /**
     * The number of employees of the company
     */
    numberOfEmployees?: number | null | undefined;
    /**
     * The UUID of the user who owns the company
     */
    userId?: string | null | undefined;
    /**
     * The email addresses of the company
     */
    emailAddresses?: Array<Email> | null | undefined;
    /**
     * The addresses of the company
     */
    addresses?: Array<Address> | null | undefined;
    /**
     * The phone numbers of the company
     */
    phoneNumbers?: Array<Phone> | null | undefined;
    /**
     * The custom field mappings of the company between the remote 3rd party & Panora
     */
    fieldMappings?: { [k: string]: any } | null | undefined;
    /**
     * The UUID of the company
     */
    id?: string | null | undefined;
    /**
     * The id of the company in the context of the Crm 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the company in the context of the Crm 3rd Party
     */
    remoteData?: { [k: string]: any } | null | undefined;
    /**
     * The created date of the object
     */
    createdAt?: CreatedAt | null | undefined;
    /**
     * The modified date of the object
     */
    modifiedAt?: ModifiedAt | null | undefined;
};

/** @internal */
export const Industry$inboundSchema: z.ZodNativeEnum<typeof Industry> = z.nativeEnum(Industry);

/** @internal */
export const Industry$outboundSchema: z.ZodNativeEnum<typeof Industry> = Industry$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Industry$ {
    /** @deprecated use `Industry$inboundSchema` instead. */
    export const inboundSchema = Industry$inboundSchema;
    /** @deprecated use `Industry$outboundSchema` instead. */
    export const outboundSchema = Industry$outboundSchema;
}

/** @internal */
export const CreatedAt$inboundSchema: z.ZodType<CreatedAt, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type CreatedAt$Outbound = {};

/** @internal */
export const CreatedAt$outboundSchema: z.ZodType<CreatedAt$Outbound, z.ZodTypeDef, CreatedAt> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedAt$ {
    /** @deprecated use `CreatedAt$inboundSchema` instead. */
    export const inboundSchema = CreatedAt$inboundSchema;
    /** @deprecated use `CreatedAt$outboundSchema` instead. */
    export const outboundSchema = CreatedAt$outboundSchema;
    /** @deprecated use `CreatedAt$Outbound` instead. */
    export type Outbound = CreatedAt$Outbound;
}

/** @internal */
export const ModifiedAt$inboundSchema: z.ZodType<ModifiedAt, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type ModifiedAt$Outbound = {};

/** @internal */
export const ModifiedAt$outboundSchema: z.ZodType<ModifiedAt$Outbound, z.ZodTypeDef, ModifiedAt> =
    z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifiedAt$ {
    /** @deprecated use `ModifiedAt$inboundSchema` instead. */
    export const inboundSchema = ModifiedAt$inboundSchema;
    /** @deprecated use `ModifiedAt$outboundSchema` instead. */
    export const outboundSchema = ModifiedAt$outboundSchema;
    /** @deprecated use `ModifiedAt$Outbound` instead. */
    export type Outbound = ModifiedAt$Outbound;
}

/** @internal */
export const UnifiedCrmCompanyOutput$inboundSchema: z.ZodType<
    UnifiedCrmCompanyOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()),
        industry: z.nullable(Industry$inboundSchema).optional(),
        number_of_employees: z.nullable(z.number()).optional(),
        user_id: z.nullable(z.string()).optional(),
        email_addresses: z.nullable(z.array(Email$inboundSchema)).optional(),
        addresses: z.nullable(z.array(Address$inboundSchema)).optional(),
        phone_numbers: z.nullable(z.array(Phone$inboundSchema)).optional(),
        field_mappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z.nullable(z.record(z.any())).optional(),
        created_at: z.nullable(z.lazy(() => CreatedAt$inboundSchema)).optional(),
        modified_at: z.nullable(z.lazy(() => ModifiedAt$inboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            number_of_employees: "numberOfEmployees",
            user_id: "userId",
            email_addresses: "emailAddresses",
            phone_numbers: "phoneNumbers",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedCrmCompanyOutput$Outbound = {
    name: string | null;
    industry?: string | null | undefined;
    number_of_employees?: number | null | undefined;
    user_id?: string | null | undefined;
    email_addresses?: Array<Email$Outbound> | null | undefined;
    addresses?: Array<Address$Outbound> | null | undefined;
    phone_numbers?: Array<Phone$Outbound> | null | undefined;
    field_mappings?: { [k: string]: any } | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: { [k: string]: any } | null | undefined;
    created_at?: CreatedAt$Outbound | null | undefined;
    modified_at?: ModifiedAt$Outbound | null | undefined;
};

/** @internal */
export const UnifiedCrmCompanyOutput$outboundSchema: z.ZodType<
    UnifiedCrmCompanyOutput$Outbound,
    z.ZodTypeDef,
    UnifiedCrmCompanyOutput
> = z
    .object({
        name: z.nullable(z.string()),
        industry: z.nullable(Industry$outboundSchema).optional(),
        numberOfEmployees: z.nullable(z.number()).optional(),
        userId: z.nullable(z.string()).optional(),
        emailAddresses: z.nullable(z.array(Email$outboundSchema)).optional(),
        addresses: z.nullable(z.array(Address$outboundSchema)).optional(),
        phoneNumbers: z.nullable(z.array(Phone$outboundSchema)).optional(),
        fieldMappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z.nullable(z.record(z.any())).optional(),
        createdAt: z.nullable(z.lazy(() => CreatedAt$outboundSchema)).optional(),
        modifiedAt: z.nullable(z.lazy(() => ModifiedAt$outboundSchema)).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            numberOfEmployees: "number_of_employees",
            userId: "user_id",
            emailAddresses: "email_addresses",
            phoneNumbers: "phone_numbers",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCrmCompanyOutput$ {
    /** @deprecated use `UnifiedCrmCompanyOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedCrmCompanyOutput$inboundSchema;
    /** @deprecated use `UnifiedCrmCompanyOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedCrmCompanyOutput$outboundSchema;
    /** @deprecated use `UnifiedCrmCompanyOutput$Outbound` instead. */
    export type Outbound = UnifiedCrmCompanyOutput$Outbound;
}
