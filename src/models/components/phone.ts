/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type Phone = {
    /**
     * The phone number starting with a plus (+) followed by the country code (e.g +336676778890 for France)
     */
    phoneNumber: string;
    /**
     * The phone type. Authorized values are either MOBILE or WORK
     */
    phoneType: string;
    /**
     * The owner type of a phone number
     */
    ownerType?: string | undefined;
};

/** @internal */
export namespace Phone$ {
    export const inboundSchema: z.ZodType<Phone, z.ZodTypeDef, unknown> = z
        .object({
            phone_number: z.string(),
            phone_type: z.string(),
            owner_type: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                phone_number: "phoneNumber",
                phone_type: "phoneType",
                owner_type: "ownerType",
            });
        });

    export type Outbound = {
        phone_number: string;
        phone_type: string;
        owner_type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Phone> = z
        .object({
            phoneNumber: z.string(),
            phoneType: z.string(),
            ownerType: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                phoneNumber: "phone_number",
                phoneType: "phone_type",
                ownerType: "owner_type",
            });
        });
}
