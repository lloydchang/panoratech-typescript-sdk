/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingAccountInputFieldMappings = {};

export type UnifiedAccountingAccountInput = {
    /**
     * The name of the account
     */
    name?: string | null | undefined;
    /**
     * A description of the account
     */
    description?: string | null | undefined;
    /**
     * The classification of the account
     */
    classification?: string | null | undefined;
    /**
     * The type of the account
     */
    type?: string | null | undefined;
    /**
     * The status of the account
     */
    status?: string | null | undefined;
    /**
     * The current balance of the account
     */
    currentBalance?: number | null | undefined;
    /**
     * The currency of the account
     */
    currency?: string | null | undefined;
    /**
     * The account number
     */
    accountNumber?: string | null | undefined;
    /**
     * The UUID of the parent account
     */
    parentAccount?: string | null | undefined;
    /**
     * The UUID of the associated company info
     */
    companyInfoId?: string | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedAccountingAccountInputFieldMappings | null | undefined;
};

/** @internal */
export const UnifiedAccountingAccountInputFieldMappings$inboundSchema: z.ZodType<
    UnifiedAccountingAccountInputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingAccountInputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingAccountInputFieldMappings$outboundSchema: z.ZodType<
    UnifiedAccountingAccountInputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingAccountInputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingAccountInputFieldMappings$ {
    /** @deprecated use `UnifiedAccountingAccountInputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingAccountInputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedAccountingAccountInputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingAccountInputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedAccountingAccountInputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedAccountingAccountInputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingAccountInput$inboundSchema: z.ZodType<
    UnifiedAccountingAccountInput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()).optional(),
        description: z.nullable(z.string()).optional(),
        classification: z.nullable(z.string()).optional(),
        type: z.nullable(z.string()).optional(),
        status: z.nullable(z.string()).optional(),
        current_balance: z.nullable(z.number()).optional(),
        currency: z.nullable(z.string()).optional(),
        account_number: z.nullable(z.string()).optional(),
        parent_account: z.nullable(z.string()).optional(),
        company_info_id: z.nullable(z.string()).optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedAccountingAccountInputFieldMappings$inboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            current_balance: "currentBalance",
            account_number: "accountNumber",
            parent_account: "parentAccount",
            company_info_id: "companyInfoId",
            field_mappings: "fieldMappings",
        });
    });

/** @internal */
export type UnifiedAccountingAccountInput$Outbound = {
    name?: string | null | undefined;
    description?: string | null | undefined;
    classification?: string | null | undefined;
    type?: string | null | undefined;
    status?: string | null | undefined;
    current_balance?: number | null | undefined;
    currency?: string | null | undefined;
    account_number?: string | null | undefined;
    parent_account?: string | null | undefined;
    company_info_id?: string | null | undefined;
    field_mappings?: UnifiedAccountingAccountInputFieldMappings$Outbound | null | undefined;
};

/** @internal */
export const UnifiedAccountingAccountInput$outboundSchema: z.ZodType<
    UnifiedAccountingAccountInput$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingAccountInput
> = z
    .object({
        name: z.nullable(z.string()).optional(),
        description: z.nullable(z.string()).optional(),
        classification: z.nullable(z.string()).optional(),
        type: z.nullable(z.string()).optional(),
        status: z.nullable(z.string()).optional(),
        currentBalance: z.nullable(z.number()).optional(),
        currency: z.nullable(z.string()).optional(),
        accountNumber: z.nullable(z.string()).optional(),
        parentAccount: z.nullable(z.string()).optional(),
        companyInfoId: z.nullable(z.string()).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedAccountingAccountInputFieldMappings$outboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            currentBalance: "current_balance",
            accountNumber: "account_number",
            parentAccount: "parent_account",
            companyInfoId: "company_info_id",
            fieldMappings: "field_mappings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingAccountInput$ {
    /** @deprecated use `UnifiedAccountingAccountInput$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingAccountInput$inboundSchema;
    /** @deprecated use `UnifiedAccountingAccountInput$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingAccountInput$outboundSchema;
    /** @deprecated use `UnifiedAccountingAccountInput$Outbound` instead. */
    export type Outbound = UnifiedAccountingAccountInput$Outbound;
}
