/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Variant = {};

/** @internal */
export const Variant$inboundSchema: z.ZodType<Variant, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Variant$Outbound = {};

/** @internal */
export const Variant$outboundSchema: z.ZodType<
  Variant$Outbound,
  z.ZodTypeDef,
  Variant
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variant$ {
  /** @deprecated use `Variant$inboundSchema` instead. */
  export const inboundSchema = Variant$inboundSchema;
  /** @deprecated use `Variant$outboundSchema` instead. */
  export const outboundSchema = Variant$outboundSchema;
  /** @deprecated use `Variant$Outbound` instead. */
  export type Outbound = Variant$Outbound;
}

export function variantToJSON(variant: Variant): string {
  return JSON.stringify(Variant$outboundSchema.parse(variant));
}

export function variantFromJSON(
  jsonString: string,
): SafeParseResult<Variant, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Variant$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Variant' from JSON`,
  );
}
