/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LineItem,
  LineItem$inboundSchema,
  LineItem$Outbound,
  LineItem$outboundSchema,
} from "./lineitem.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingPurchaseorderInputFieldMappings = {};

export type UnifiedAccountingPurchaseorderInput = {
  /**
   * The status of the purchase order
   */
  status?: string | null | undefined;
  /**
   * The issue date of the purchase order
   */
  issueDate?: Date | null | undefined;
  /**
   * The purchase order number
   */
  purchaseOrderNumber?: string | null | undefined;
  /**
   * The delivery date for the purchase order
   */
  deliveryDate?: Date | null | undefined;
  /**
   * The UUID of the delivery address
   */
  deliveryAddress?: string | null | undefined;
  /**
   * The UUID of the customer
   */
  customer?: string | null | undefined;
  /**
   * The UUID of the vendor
   */
  vendor?: string | null | undefined;
  /**
   * A memo or note for the purchase order
   */
  memo?: string | null | undefined;
  /**
   * The UUID of the company
   */
  companyId?: string | null | undefined;
  /**
   * The total amount of the purchase order in cents
   */
  totalAmount?: number | null | undefined;
  /**
   * The currency of the purchase order
   */
  currency?: string | null | undefined;
  /**
   * The exchange rate applied to the purchase order
   */
  exchangeRate?: string | null | undefined;
  /**
   * The UUIDs of the tracking categories associated with the purchase order
   */
  trackingCategories?: Array<string> | null | undefined;
  /**
   * The UUID of the associated accounting period
   */
  accountingPeriodId?: string | null | undefined;
  /**
   * The line items associated with this purchase order
   */
  lineItems?: Array<LineItem> | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?:
    | UnifiedAccountingPurchaseorderInputFieldMappings
    | null
    | undefined;
};

/** @internal */
export const UnifiedAccountingPurchaseorderInputFieldMappings$inboundSchema:
  z.ZodType<
    UnifiedAccountingPurchaseorderInputFieldMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingPurchaseorderInputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingPurchaseorderInputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedAccountingPurchaseorderInputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingPurchaseorderInputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingPurchaseorderInputFieldMappings$ {
  /** @deprecated use `UnifiedAccountingPurchaseorderInputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingPurchaseorderInputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedAccountingPurchaseorderInputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingPurchaseorderInputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedAccountingPurchaseorderInputFieldMappings$Outbound` instead. */
  export type Outbound =
    UnifiedAccountingPurchaseorderInputFieldMappings$Outbound;
}

export function unifiedAccountingPurchaseorderInputFieldMappingsToJSON(
  unifiedAccountingPurchaseorderInputFieldMappings:
    UnifiedAccountingPurchaseorderInputFieldMappings,
): string {
  return JSON.stringify(
    UnifiedAccountingPurchaseorderInputFieldMappings$outboundSchema.parse(
      unifiedAccountingPurchaseorderInputFieldMappings,
    ),
  );
}

export function unifiedAccountingPurchaseorderInputFieldMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedAccountingPurchaseorderInputFieldMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingPurchaseorderInputFieldMappings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedAccountingPurchaseorderInputFieldMappings' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingPurchaseorderInput$inboundSchema: z.ZodType<
  UnifiedAccountingPurchaseorderInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.nullable(z.string()).optional(),
  issue_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  purchase_order_number: z.nullable(z.string()).optional(),
  delivery_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  delivery_address: z.nullable(z.string()).optional(),
  customer: z.nullable(z.string()).optional(),
  vendor: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  total_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchange_rate: z.nullable(z.string()).optional(),
  tracking_categories: z.nullable(z.array(z.string())).optional(),
  accounting_period_id: z.nullable(z.string()).optional(),
  line_items: z.array(LineItem$inboundSchema).optional(),
  field_mappings: z.nullable(
    z.lazy(() =>
      UnifiedAccountingPurchaseorderInputFieldMappings$inboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "issue_date": "issueDate",
    "purchase_order_number": "purchaseOrderNumber",
    "delivery_date": "deliveryDate",
    "delivery_address": "deliveryAddress",
    "company_id": "companyId",
    "total_amount": "totalAmount",
    "exchange_rate": "exchangeRate",
    "tracking_categories": "trackingCategories",
    "accounting_period_id": "accountingPeriodId",
    "line_items": "lineItems",
    "field_mappings": "fieldMappings",
  });
});

/** @internal */
export type UnifiedAccountingPurchaseorderInput$Outbound = {
  status?: string | null | undefined;
  issue_date?: string | null | undefined;
  purchase_order_number?: string | null | undefined;
  delivery_date?: string | null | undefined;
  delivery_address?: string | null | undefined;
  customer?: string | null | undefined;
  vendor?: string | null | undefined;
  memo?: string | null | undefined;
  company_id?: string | null | undefined;
  total_amount?: number | null | undefined;
  currency?: string | null | undefined;
  exchange_rate?: string | null | undefined;
  tracking_categories?: Array<string> | null | undefined;
  accounting_period_id?: string | null | undefined;
  line_items?: Array<LineItem$Outbound> | undefined;
  field_mappings?:
    | UnifiedAccountingPurchaseorderInputFieldMappings$Outbound
    | null
    | undefined;
};

/** @internal */
export const UnifiedAccountingPurchaseorderInput$outboundSchema: z.ZodType<
  UnifiedAccountingPurchaseorderInput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingPurchaseorderInput
> = z.object({
  status: z.nullable(z.string()).optional(),
  issueDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  purchaseOrderNumber: z.nullable(z.string()).optional(),
  deliveryDate: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  deliveryAddress: z.nullable(z.string()).optional(),
  customer: z.nullable(z.string()).optional(),
  vendor: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  totalAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchangeRate: z.nullable(z.string()).optional(),
  trackingCategories: z.nullable(z.array(z.string())).optional(),
  accountingPeriodId: z.nullable(z.string()).optional(),
  lineItems: z.array(LineItem$outboundSchema).optional(),
  fieldMappings: z.nullable(
    z.lazy(() =>
      UnifiedAccountingPurchaseorderInputFieldMappings$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    issueDate: "issue_date",
    purchaseOrderNumber: "purchase_order_number",
    deliveryDate: "delivery_date",
    deliveryAddress: "delivery_address",
    companyId: "company_id",
    totalAmount: "total_amount",
    exchangeRate: "exchange_rate",
    trackingCategories: "tracking_categories",
    accountingPeriodId: "accounting_period_id",
    lineItems: "line_items",
    fieldMappings: "field_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingPurchaseorderInput$ {
  /** @deprecated use `UnifiedAccountingPurchaseorderInput$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingPurchaseorderInput$inboundSchema;
  /** @deprecated use `UnifiedAccountingPurchaseorderInput$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingPurchaseorderInput$outboundSchema;
  /** @deprecated use `UnifiedAccountingPurchaseorderInput$Outbound` instead. */
  export type Outbound = UnifiedAccountingPurchaseorderInput$Outbound;
}

export function unifiedAccountingPurchaseorderInputToJSON(
  unifiedAccountingPurchaseorderInput: UnifiedAccountingPurchaseorderInput,
): string {
  return JSON.stringify(
    UnifiedAccountingPurchaseorderInput$outboundSchema.parse(
      unifiedAccountingPurchaseorderInput,
    ),
  );
}

export function unifiedAccountingPurchaseorderInputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedAccountingPurchaseorderInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingPurchaseorderInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedAccountingPurchaseorderInput' from JSON`,
  );
}
