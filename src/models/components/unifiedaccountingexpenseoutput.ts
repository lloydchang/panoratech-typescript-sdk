/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  LineItem,
  LineItem$inboundSchema,
  LineItem$Outbound,
  LineItem$outboundSchema,
} from "./lineitem.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingExpenseOutputFieldMappings = {};

/**
 * The remote data of the expense in the context of the 3rd Party
 */
export type UnifiedAccountingExpenseOutputRemoteData = {};

export type UnifiedAccountingExpenseOutput = {
  /**
   * The date of the expense transaction
   */
  transactionDate?: Date | null | undefined;
  /**
   * The total amount of the expense
   */
  totalAmount?: number | null | undefined;
  /**
   * The sub-total amount of the expense (before tax)
   */
  subTotal?: number | null | undefined;
  /**
   * The total tax amount of the expense
   */
  totalTaxAmount?: number | null | undefined;
  /**
   * The currency of the expense
   */
  currency?: string | null | undefined;
  /**
   * The exchange rate applied to the expense
   */
  exchangeRate?: string | null | undefined;
  /**
   * A memo or description for the expense
   */
  memo?: string | null | undefined;
  /**
   * The UUID of the associated account
   */
  accountId?: string | null | undefined;
  /**
   * The UUID of the associated contact
   */
  contactId?: string | null | undefined;
  /**
   * The UUID of the associated company info
   */
  companyInfoId?: string | null | undefined;
  /**
   * The UUIDs of the tracking categories associated with the expense
   */
  trackingCategories?: Array<string> | null | undefined;
  /**
   * The line items associated with this expense
   */
  lineItems?: Array<LineItem> | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?:
    | UnifiedAccountingExpenseOutputFieldMappings
    | null
    | undefined;
  /**
   * The UUID of the expense record
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the expense in the context of the 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The remote data of the expense in the context of the 3rd Party
   */
  remoteData?: UnifiedAccountingExpenseOutputRemoteData | null | undefined;
  /**
   * The date when the expense was created in the remote system
   */
  remoteCreatedAt?: Date | null | undefined;
  /**
   * The created date of the expense record
   */
  createdAt?: Date | null | undefined;
  /**
   * The last modified date of the expense record
   */
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAccountingExpenseOutputFieldMappings$inboundSchema:
  z.ZodType<
    UnifiedAccountingExpenseOutputFieldMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingExpenseOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingExpenseOutputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedAccountingExpenseOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingExpenseOutputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingExpenseOutputFieldMappings$ {
  /** @deprecated use `UnifiedAccountingExpenseOutputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingExpenseOutputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedAccountingExpenseOutputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingExpenseOutputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedAccountingExpenseOutputFieldMappings$Outbound` instead. */
  export type Outbound = UnifiedAccountingExpenseOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingExpenseOutputRemoteData$inboundSchema: z.ZodType<
  UnifiedAccountingExpenseOutputRemoteData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingExpenseOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingExpenseOutputRemoteData$outboundSchema: z.ZodType<
  UnifiedAccountingExpenseOutputRemoteData$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingExpenseOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingExpenseOutputRemoteData$ {
  /** @deprecated use `UnifiedAccountingExpenseOutputRemoteData$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingExpenseOutputRemoteData$inboundSchema;
  /** @deprecated use `UnifiedAccountingExpenseOutputRemoteData$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingExpenseOutputRemoteData$outboundSchema;
  /** @deprecated use `UnifiedAccountingExpenseOutputRemoteData$Outbound` instead. */
  export type Outbound = UnifiedAccountingExpenseOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedAccountingExpenseOutput$inboundSchema: z.ZodType<
  UnifiedAccountingExpenseOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  total_amount: z.nullable(z.number()).optional(),
  sub_total: z.nullable(z.number()).optional(),
  total_tax_amount: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchange_rate: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_info_id: z.nullable(z.string()).optional(),
  tracking_categories: z.nullable(z.array(z.string())).optional(),
  line_items: z.array(LineItem$inboundSchema).optional(),
  field_mappings: z.nullable(
    z.lazy(() => UnifiedAccountingExpenseOutputFieldMappings$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_data: z.nullable(
    z.lazy(() => UnifiedAccountingExpenseOutputRemoteData$inboundSchema),
  ).optional(),
  remote_created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_date": "transactionDate",
    "total_amount": "totalAmount",
    "sub_total": "subTotal",
    "total_tax_amount": "totalTaxAmount",
    "exchange_rate": "exchangeRate",
    "account_id": "accountId",
    "contact_id": "contactId",
    "company_info_id": "companyInfoId",
    "tracking_categories": "trackingCategories",
    "line_items": "lineItems",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_data": "remoteData",
    "remote_created_at": "remoteCreatedAt",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedAccountingExpenseOutput$Outbound = {
  transaction_date?: string | null | undefined;
  total_amount?: number | null | undefined;
  sub_total?: number | null | undefined;
  total_tax_amount?: number | null | undefined;
  currency?: string | null | undefined;
  exchange_rate?: string | null | undefined;
  memo?: string | null | undefined;
  account_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_info_id?: string | null | undefined;
  tracking_categories?: Array<string> | null | undefined;
  line_items?: Array<LineItem$Outbound> | undefined;
  field_mappings?:
    | UnifiedAccountingExpenseOutputFieldMappings$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_data?:
    | UnifiedAccountingExpenseOutputRemoteData$Outbound
    | null
    | undefined;
  remote_created_at?: string | null | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingExpenseOutput$outboundSchema: z.ZodType<
  UnifiedAccountingExpenseOutput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingExpenseOutput
> = z.object({
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  totalAmount: z.nullable(z.number()).optional(),
  subTotal: z.nullable(z.number()).optional(),
  totalTaxAmount: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchangeRate: z.nullable(z.string()).optional(),
  memo: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyInfoId: z.nullable(z.string()).optional(),
  trackingCategories: z.nullable(z.array(z.string())).optional(),
  lineItems: z.array(LineItem$outboundSchema).optional(),
  fieldMappings: z.nullable(
    z.lazy(() => UnifiedAccountingExpenseOutputFieldMappings$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteData: z.nullable(
    z.lazy(() => UnifiedAccountingExpenseOutputRemoteData$outboundSchema),
  ).optional(),
  remoteCreatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionDate: "transaction_date",
    totalAmount: "total_amount",
    subTotal: "sub_total",
    totalTaxAmount: "total_tax_amount",
    exchangeRate: "exchange_rate",
    accountId: "account_id",
    contactId: "contact_id",
    companyInfoId: "company_info_id",
    trackingCategories: "tracking_categories",
    lineItems: "line_items",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteData: "remote_data",
    remoteCreatedAt: "remote_created_at",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingExpenseOutput$ {
  /** @deprecated use `UnifiedAccountingExpenseOutput$inboundSchema` instead. */
  export const inboundSchema = UnifiedAccountingExpenseOutput$inboundSchema;
  /** @deprecated use `UnifiedAccountingExpenseOutput$outboundSchema` instead. */
  export const outboundSchema = UnifiedAccountingExpenseOutput$outboundSchema;
  /** @deprecated use `UnifiedAccountingExpenseOutput$Outbound` instead. */
  export type Outbound = UnifiedAccountingExpenseOutput$Outbound;
}
