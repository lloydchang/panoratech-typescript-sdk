/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  UnifiedTicketingAttachmentOutput,
  UnifiedTicketingAttachmentOutput$inboundSchema,
  UnifiedTicketingAttachmentOutput$Outbound,
  UnifiedTicketingAttachmentOutput$outboundSchema,
} from "./unifiedticketingattachmentoutput.js";

export type UnifiedTicketingCommentInputAttachments =
  | UnifiedTicketingAttachmentOutput
  | string;

export type UnifiedTicketingCommentInput = {
  /**
   * The body of the comment
   */
  body: string | null;
  /**
   * The html body of the comment
   */
  htmlBody?: string | null | undefined;
  /**
   * The public status of the comment
   */
  isPrivate?: boolean | null | undefined;
  /**
   * The creator type of the comment. Authorized values are either USER or CONTACT
   */
  creatorType?: string | null | undefined;
  /**
   * The UUID of the ticket the comment is tied to
   */
  ticketId?: string | null | undefined;
  /**
   * The UUID of the contact which the comment belongs to (if no user_id specified)
   */
  contactId?: string | null | undefined;
  /**
   * The UUID of the user which the comment belongs to (if no contact_id specified)
   */
  userId?: string | null | undefined;
  /**
   * The attachements UUIDs tied to the comment
   */
  attachments?:
    | Array<UnifiedTicketingAttachmentOutput | string>
    | null
    | undefined;
};

/** @internal */
export const UnifiedTicketingCommentInputAttachments$inboundSchema: z.ZodType<
  UnifiedTicketingCommentInputAttachments,
  z.ZodTypeDef,
  unknown
> = z.union([UnifiedTicketingAttachmentOutput$inboundSchema, z.string()]);

/** @internal */
export type UnifiedTicketingCommentInputAttachments$Outbound =
  | UnifiedTicketingAttachmentOutput$Outbound
  | string;

/** @internal */
export const UnifiedTicketingCommentInputAttachments$outboundSchema: z.ZodType<
  UnifiedTicketingCommentInputAttachments$Outbound,
  z.ZodTypeDef,
  UnifiedTicketingCommentInputAttachments
> = z.union([UnifiedTicketingAttachmentOutput$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTicketingCommentInputAttachments$ {
  /** @deprecated use `UnifiedTicketingCommentInputAttachments$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedTicketingCommentInputAttachments$inboundSchema;
  /** @deprecated use `UnifiedTicketingCommentInputAttachments$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedTicketingCommentInputAttachments$outboundSchema;
  /** @deprecated use `UnifiedTicketingCommentInputAttachments$Outbound` instead. */
  export type Outbound = UnifiedTicketingCommentInputAttachments$Outbound;
}

/** @internal */
export const UnifiedTicketingCommentInput$inboundSchema: z.ZodType<
  UnifiedTicketingCommentInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  body: z.nullable(z.string()),
  html_body: z.nullable(z.string()).optional(),
  is_private: z.nullable(z.boolean()).optional(),
  creator_type: z.nullable(z.string()).optional(),
  ticket_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  user_id: z.nullable(z.string()).optional(),
  attachments: z.nullable(
    z.array(
      z.union([UnifiedTicketingAttachmentOutput$inboundSchema, z.string()]),
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "html_body": "htmlBody",
    "is_private": "isPrivate",
    "creator_type": "creatorType",
    "ticket_id": "ticketId",
    "contact_id": "contactId",
    "user_id": "userId",
  });
});

/** @internal */
export type UnifiedTicketingCommentInput$Outbound = {
  body: string | null;
  html_body?: string | null | undefined;
  is_private?: boolean | null | undefined;
  creator_type?: string | null | undefined;
  ticket_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  user_id?: string | null | undefined;
  attachments?:
    | Array<UnifiedTicketingAttachmentOutput$Outbound | string>
    | null
    | undefined;
};

/** @internal */
export const UnifiedTicketingCommentInput$outboundSchema: z.ZodType<
  UnifiedTicketingCommentInput$Outbound,
  z.ZodTypeDef,
  UnifiedTicketingCommentInput
> = z.object({
  body: z.nullable(z.string()),
  htmlBody: z.nullable(z.string()).optional(),
  isPrivate: z.nullable(z.boolean()).optional(),
  creatorType: z.nullable(z.string()).optional(),
  ticketId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  userId: z.nullable(z.string()).optional(),
  attachments: z.nullable(
    z.array(
      z.union([UnifiedTicketingAttachmentOutput$outboundSchema, z.string()]),
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    htmlBody: "html_body",
    isPrivate: "is_private",
    creatorType: "creator_type",
    ticketId: "ticket_id",
    contactId: "contact_id",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTicketingCommentInput$ {
  /** @deprecated use `UnifiedTicketingCommentInput$inboundSchema` instead. */
  export const inboundSchema = UnifiedTicketingCommentInput$inboundSchema;
  /** @deprecated use `UnifiedTicketingCommentInput$outboundSchema` instead. */
  export const outboundSchema = UnifiedTicketingCommentInput$outboundSchema;
  /** @deprecated use `UnifiedTicketingCommentInput$Outbound` instead. */
  export type Outbound = UnifiedTicketingCommentInput$Outbound;
}
