/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The status of the time off request
 */
export enum UnifiedHrisTimeoffOutputStatus {
    Requested = "REQUESTED",
    Approved = "APPROVED",
    Declined = "DECLINED",
    Cancelled = "CANCELLED",
    Deleted = "DELETED",
}

/**
 * The units used for the time off (e.g., Days, Hours)
 */
export enum Units {
    Hours = "HOURS",
    Days = "DAYS",
}

/**
 * The type of time off request
 */
export enum RequestType {
    Vacation = "VACATION",
    Sick = "SICK",
    Personal = "PERSONAL",
    JuryDuty = "JURY_DUTY",
    Volunteer = "VOLUNTEER",
    Bereavement = "BEREAVEMENT",
}

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedHrisTimeoffOutputFieldMappings = {};

/**
 * The remote data of the time off in the context of the 3rd Party
 */
export type UnifiedHrisTimeoffOutputRemoteData = {};

export type UnifiedHrisTimeoffOutput = {
    /**
     * The UUID of the employee taking time off
     */
    employee?: string | null | undefined;
    /**
     * The UUID of the approver for the time off request
     */
    approver?: string | null | undefined;
    /**
     * The status of the time off request
     */
    status?: UnifiedHrisTimeoffOutputStatus | null | undefined;
    /**
     * A note from the employee about the time off request
     */
    employeeNote?: string | null | undefined;
    /**
     * The units used for the time off (e.g., Days, Hours)
     */
    units?: Units | null | undefined;
    /**
     * The amount of time off requested
     */
    amount?: number | null | undefined;
    /**
     * The type of time off request
     */
    requestType?: RequestType | null | undefined;
    /**
     * The start time of the time off
     */
    startTime?: Date | null | undefined;
    /**
     * The end time of the time off
     */
    endTime?: Date | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedHrisTimeoffOutputFieldMappings | null | undefined;
    /**
     * The UUID of the time off record
     */
    id?: string | null | undefined;
    /**
     * The remote ID of the time off in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the time off in the context of the 3rd Party
     */
    remoteData?: UnifiedHrisTimeoffOutputRemoteData | null | undefined;
    /**
     * The date when the time off was created in the 3rd party system
     */
    remoteCreatedAt?: Date | null | undefined;
    /**
     * The created date of the time off record
     */
    createdAt?: Date | null | undefined;
    /**
     * The last modified date of the time off record
     */
    modifiedAt?: Date | null | undefined;
    /**
     * Indicates if the time off was deleted in the remote system
     */
    remoteWasDeleted?: boolean | null | undefined;
};

/** @internal */
export const UnifiedHrisTimeoffOutputStatus$inboundSchema: z.ZodNativeEnum<
    typeof UnifiedHrisTimeoffOutputStatus
> = z.nativeEnum(UnifiedHrisTimeoffOutputStatus);

/** @internal */
export const UnifiedHrisTimeoffOutputStatus$outboundSchema: z.ZodNativeEnum<
    typeof UnifiedHrisTimeoffOutputStatus
> = UnifiedHrisTimeoffOutputStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisTimeoffOutputStatus$ {
    /** @deprecated use `UnifiedHrisTimeoffOutputStatus$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisTimeoffOutputStatus$inboundSchema;
    /** @deprecated use `UnifiedHrisTimeoffOutputStatus$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisTimeoffOutputStatus$outboundSchema;
}

/** @internal */
export const Units$inboundSchema: z.ZodNativeEnum<typeof Units> = z.nativeEnum(Units);

/** @internal */
export const Units$outboundSchema: z.ZodNativeEnum<typeof Units> = Units$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Units$ {
    /** @deprecated use `Units$inboundSchema` instead. */
    export const inboundSchema = Units$inboundSchema;
    /** @deprecated use `Units$outboundSchema` instead. */
    export const outboundSchema = Units$outboundSchema;
}

/** @internal */
export const RequestType$inboundSchema: z.ZodNativeEnum<typeof RequestType> =
    z.nativeEnum(RequestType);

/** @internal */
export const RequestType$outboundSchema: z.ZodNativeEnum<typeof RequestType> =
    RequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestType$ {
    /** @deprecated use `RequestType$inboundSchema` instead. */
    export const inboundSchema = RequestType$inboundSchema;
    /** @deprecated use `RequestType$outboundSchema` instead. */
    export const outboundSchema = RequestType$outboundSchema;
}

/** @internal */
export const UnifiedHrisTimeoffOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedHrisTimeoffOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedHrisTimeoffOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedHrisTimeoffOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedHrisTimeoffOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedHrisTimeoffOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisTimeoffOutputFieldMappings$ {
    /** @deprecated use `UnifiedHrisTimeoffOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisTimeoffOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedHrisTimeoffOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisTimeoffOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedHrisTimeoffOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedHrisTimeoffOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedHrisTimeoffOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedHrisTimeoffOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedHrisTimeoffOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedHrisTimeoffOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedHrisTimeoffOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedHrisTimeoffOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisTimeoffOutputRemoteData$ {
    /** @deprecated use `UnifiedHrisTimeoffOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisTimeoffOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedHrisTimeoffOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisTimeoffOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedHrisTimeoffOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedHrisTimeoffOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedHrisTimeoffOutput$inboundSchema: z.ZodType<
    UnifiedHrisTimeoffOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        employee: z.nullable(z.string()).optional(),
        approver: z.nullable(z.string()).optional(),
        status: z.nullable(UnifiedHrisTimeoffOutputStatus$inboundSchema).optional(),
        employee_note: z.nullable(z.string()).optional(),
        units: z.nullable(Units$inboundSchema).optional(),
        amount: z.nullable(z.number()).optional(),
        request_type: z.nullable(RequestType$inboundSchema).optional(),
        start_time: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        end_time: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedHrisTimeoffOutputFieldMappings$inboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z
            .nullable(z.lazy(() => UnifiedHrisTimeoffOutputRemoteData$inboundSchema))
            .optional(),
        remote_created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        remote_was_deleted: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            employee_note: "employeeNote",
            request_type: "requestType",
            start_time: "startTime",
            end_time: "endTime",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            remote_created_at: "remoteCreatedAt",
            created_at: "createdAt",
            modified_at: "modifiedAt",
            remote_was_deleted: "remoteWasDeleted",
        });
    });

/** @internal */
export type UnifiedHrisTimeoffOutput$Outbound = {
    employee?: string | null | undefined;
    approver?: string | null | undefined;
    status?: string | null | undefined;
    employee_note?: string | null | undefined;
    units?: string | null | undefined;
    amount?: number | null | undefined;
    request_type?: string | null | undefined;
    start_time?: string | null | undefined;
    end_time?: string | null | undefined;
    field_mappings?: UnifiedHrisTimeoffOutputFieldMappings$Outbound | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: UnifiedHrisTimeoffOutputRemoteData$Outbound | null | undefined;
    remote_created_at?: string | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
    remote_was_deleted?: boolean | null | undefined;
};

/** @internal */
export const UnifiedHrisTimeoffOutput$outboundSchema: z.ZodType<
    UnifiedHrisTimeoffOutput$Outbound,
    z.ZodTypeDef,
    UnifiedHrisTimeoffOutput
> = z
    .object({
        employee: z.nullable(z.string()).optional(),
        approver: z.nullable(z.string()).optional(),
        status: z.nullable(UnifiedHrisTimeoffOutputStatus$outboundSchema).optional(),
        employeeNote: z.nullable(z.string()).optional(),
        units: z.nullable(Units$outboundSchema).optional(),
        amount: z.nullable(z.number()).optional(),
        requestType: z.nullable(RequestType$outboundSchema).optional(),
        startTime: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        endTime: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedHrisTimeoffOutputFieldMappings$outboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z
            .nullable(z.lazy(() => UnifiedHrisTimeoffOutputRemoteData$outboundSchema))
            .optional(),
        remoteCreatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        remoteWasDeleted: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            employeeNote: "employee_note",
            requestType: "request_type",
            startTime: "start_time",
            endTime: "end_time",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            remoteCreatedAt: "remote_created_at",
            createdAt: "created_at",
            modifiedAt: "modified_at",
            remoteWasDeleted: "remote_was_deleted",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisTimeoffOutput$ {
    /** @deprecated use `UnifiedHrisTimeoffOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisTimeoffOutput$inboundSchema;
    /** @deprecated use `UnifiedHrisTimeoffOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisTimeoffOutput$outboundSchema;
    /** @deprecated use `UnifiedHrisTimeoffOutput$Outbound` instead. */
    export type Outbound = UnifiedHrisTimeoffOutput$Outbound;
}
