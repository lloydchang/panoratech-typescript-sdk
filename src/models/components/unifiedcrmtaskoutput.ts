/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The status of the task. Authorized values are PENDING, COMPLETED.
 */
export enum UnifiedCrmTaskOutputStatus {
    Pending = "PENDING",
    Completed = "COMPLETED",
}

export type UnifiedCrmTaskOutput = {
    /**
     * The subject of the task
     */
    subject: string | null;
    /**
     * The content of the task
     */
    content: string | null;
    /**
     * The status of the task. Authorized values are PENDING, COMPLETED.
     */
    status: UnifiedCrmTaskOutputStatus | null;
    /**
     * The due date of the task
     */
    dueDate?: string | null | undefined;
    /**
     * The finished date of the task
     */
    finishedDate?: string | null | undefined;
    /**
     * The UUID of the user tied to the task
     */
    userId?: string | null | undefined;
    /**
     * The UUID of the company tied to the task
     */
    companyId?: string | null | undefined;
    /**
     * The UUID of the deal tied to the task
     */
    dealId?: string | null | undefined;
    /**
     * The custom field mappings of the task between the remote 3rd party & Panora
     */
    fieldMappings?: { [k: string]: any } | null | undefined;
    /**
     * The UUID of the task
     */
    id?: string | null | undefined;
    /**
     * The ID of the task in the context of the Crm 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the task in the context of the Crm 3rd Party
     */
    remoteData?: { [k: string]: any } | null | undefined;
    /**
     * The created date of the object
     */
    createdAt?: Date | null | undefined;
    /**
     * The modified date of the object
     */
    modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedCrmTaskOutputStatus$inboundSchema: z.ZodNativeEnum<
    typeof UnifiedCrmTaskOutputStatus
> = z.nativeEnum(UnifiedCrmTaskOutputStatus);

/** @internal */
export const UnifiedCrmTaskOutputStatus$outboundSchema: z.ZodNativeEnum<
    typeof UnifiedCrmTaskOutputStatus
> = UnifiedCrmTaskOutputStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCrmTaskOutputStatus$ {
    /** @deprecated use `UnifiedCrmTaskOutputStatus$inboundSchema` instead. */
    export const inboundSchema = UnifiedCrmTaskOutputStatus$inboundSchema;
    /** @deprecated use `UnifiedCrmTaskOutputStatus$outboundSchema` instead. */
    export const outboundSchema = UnifiedCrmTaskOutputStatus$outboundSchema;
}

/** @internal */
export const UnifiedCrmTaskOutput$inboundSchema: z.ZodType<
    UnifiedCrmTaskOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        subject: z.nullable(z.string()),
        content: z.nullable(z.string()),
        status: z.nullable(UnifiedCrmTaskOutputStatus$inboundSchema),
        due_date: z.nullable(z.string()).optional(),
        finished_date: z.nullable(z.string()).optional(),
        user_id: z.nullable(z.string()).optional(),
        company_id: z.nullable(z.string()).optional(),
        deal_id: z.nullable(z.string()).optional(),
        field_mappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z.nullable(z.record(z.any())).optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            due_date: "dueDate",
            finished_date: "finishedDate",
            user_id: "userId",
            company_id: "companyId",
            deal_id: "dealId",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedCrmTaskOutput$Outbound = {
    subject: string | null;
    content: string | null;
    status: string | null;
    due_date?: string | null | undefined;
    finished_date?: string | null | undefined;
    user_id?: string | null | undefined;
    company_id?: string | null | undefined;
    deal_id?: string | null | undefined;
    field_mappings?: { [k: string]: any } | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: { [k: string]: any } | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedCrmTaskOutput$outboundSchema: z.ZodType<
    UnifiedCrmTaskOutput$Outbound,
    z.ZodTypeDef,
    UnifiedCrmTaskOutput
> = z
    .object({
        subject: z.nullable(z.string()),
        content: z.nullable(z.string()),
        status: z.nullable(UnifiedCrmTaskOutputStatus$outboundSchema),
        dueDate: z.nullable(z.string()).optional(),
        finishedDate: z.nullable(z.string()).optional(),
        userId: z.nullable(z.string()).optional(),
        companyId: z.nullable(z.string()).optional(),
        dealId: z.nullable(z.string()).optional(),
        fieldMappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z.nullable(z.record(z.any())).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            dueDate: "due_date",
            finishedDate: "finished_date",
            userId: "user_id",
            companyId: "company_id",
            dealId: "deal_id",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCrmTaskOutput$ {
    /** @deprecated use `UnifiedCrmTaskOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedCrmTaskOutput$inboundSchema;
    /** @deprecated use `UnifiedCrmTaskOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedCrmTaskOutput$outboundSchema;
    /** @deprecated use `UnifiedCrmTaskOutput$Outbound` instead. */
    export type Outbound = UnifiedCrmTaskOutput$Outbound;
}
