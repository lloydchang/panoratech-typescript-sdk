/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingAddressOutputFieldMappings = {};

/**
 * The remote data of the address in the context of the 3rd Party
 */
export type UnifiedAccountingAddressOutputRemoteData = {};

export type UnifiedAccountingAddressOutput = {
    /**
     * The type of the address
     */
    type?: string | null | undefined;
    /**
     * The first line of the street address
     */
    street1?: string | null | undefined;
    /**
     * The second line of the street address
     */
    street2?: string | null | undefined;
    /**
     * The city of the address
     */
    city?: string | null | undefined;
    /**
     * The state of the address
     */
    state?: string | null | undefined;
    /**
     * The country subdivision (e.g., province or state) of the address
     */
    countrySubdivision?: string | null | undefined;
    /**
     * The country of the address
     */
    country?: string | null | undefined;
    /**
     * The zip or postal code of the address
     */
    zip?: string | null | undefined;
    /**
     * The UUID of the associated contact
     */
    contactId?: string | null | undefined;
    /**
     * The UUID of the associated company info
     */
    companyInfoId?: string | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedAccountingAddressOutputFieldMappings | null | undefined;
    /**
     * The UUID of the address record
     */
    id?: string | null | undefined;
    /**
     * The remote ID of the address in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the address in the context of the 3rd Party
     */
    remoteData?: UnifiedAccountingAddressOutputRemoteData | null | undefined;
    /**
     * The created date of the address record
     */
    createdAt?: Date | null | undefined;
    /**
     * The last modified date of the address record
     */
    modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAccountingAddressOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedAccountingAddressOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingAddressOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingAddressOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedAccountingAddressOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingAddressOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingAddressOutputFieldMappings$ {
    /** @deprecated use `UnifiedAccountingAddressOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingAddressOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedAccountingAddressOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingAddressOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedAccountingAddressOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedAccountingAddressOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingAddressOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedAccountingAddressOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingAddressOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingAddressOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedAccountingAddressOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingAddressOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingAddressOutputRemoteData$ {
    /** @deprecated use `UnifiedAccountingAddressOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingAddressOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedAccountingAddressOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingAddressOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedAccountingAddressOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedAccountingAddressOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedAccountingAddressOutput$inboundSchema: z.ZodType<
    UnifiedAccountingAddressOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: z.nullable(z.string()).optional(),
        street_1: z.nullable(z.string()).optional(),
        street_2: z.nullable(z.string()).optional(),
        city: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        country_subdivision: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        zip: z.nullable(z.string()).optional(),
        contact_id: z.nullable(z.string()).optional(),
        company_info_id: z.nullable(z.string()).optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedAccountingAddressOutputFieldMappings$inboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z
            .nullable(z.lazy(() => UnifiedAccountingAddressOutputRemoteData$inboundSchema))
            .optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            street_1: "street1",
            street_2: "street2",
            country_subdivision: "countrySubdivision",
            contact_id: "contactId",
            company_info_id: "companyInfoId",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedAccountingAddressOutput$Outbound = {
    type?: string | null | undefined;
    street_1?: string | null | undefined;
    street_2?: string | null | undefined;
    city?: string | null | undefined;
    state?: string | null | undefined;
    country_subdivision?: string | null | undefined;
    country?: string | null | undefined;
    zip?: string | null | undefined;
    contact_id?: string | null | undefined;
    company_info_id?: string | null | undefined;
    field_mappings?: UnifiedAccountingAddressOutputFieldMappings$Outbound | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: UnifiedAccountingAddressOutputRemoteData$Outbound | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingAddressOutput$outboundSchema: z.ZodType<
    UnifiedAccountingAddressOutput$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingAddressOutput
> = z
    .object({
        type: z.nullable(z.string()).optional(),
        street1: z.nullable(z.string()).optional(),
        street2: z.nullable(z.string()).optional(),
        city: z.nullable(z.string()).optional(),
        state: z.nullable(z.string()).optional(),
        countrySubdivision: z.nullable(z.string()).optional(),
        country: z.nullable(z.string()).optional(),
        zip: z.nullable(z.string()).optional(),
        contactId: z.nullable(z.string()).optional(),
        companyInfoId: z.nullable(z.string()).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedAccountingAddressOutputFieldMappings$outboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z
            .nullable(z.lazy(() => UnifiedAccountingAddressOutputRemoteData$outboundSchema))
            .optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            street1: "street_1",
            street2: "street_2",
            countrySubdivision: "country_subdivision",
            contactId: "contact_id",
            companyInfoId: "company_info_id",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingAddressOutput$ {
    /** @deprecated use `UnifiedAccountingAddressOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingAddressOutput$inboundSchema;
    /** @deprecated use `UnifiedAccountingAddressOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingAddressOutput$outboundSchema;
    /** @deprecated use `UnifiedAccountingAddressOutput$Outbound` instead. */
    export type Outbound = UnifiedAccountingAddressOutput$Outbound;
}
