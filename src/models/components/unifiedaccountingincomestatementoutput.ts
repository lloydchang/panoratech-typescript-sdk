/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingIncomestatementOutputFieldMappings = {};

/**
 * The remote data of the income statement in the context of the 3rd Party
 */
export type UnifiedAccountingIncomestatementOutputRemoteData = {};

export type UnifiedAccountingIncomestatementOutput = {
  /**
   * The name of the income statement
   */
  name?: string | null | undefined;
  /**
   * The currency used in the income statement
   */
  currency?: string | null | undefined;
  /**
   * The start date of the period covered by the income statement
   */
  startPeriod?: Date | null | undefined;
  /**
   * The end date of the period covered by the income statement
   */
  endPeriod?: Date | null | undefined;
  /**
   * The gross profit for the period
   */
  grossProfit?: number | null | undefined;
  /**
   * The net operating income for the period
   */
  netOperatingIncome?: number | null | undefined;
  /**
   * The net income for the period
   */
  netIncome?: number | null | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?:
    | UnifiedAccountingIncomestatementOutputFieldMappings
    | null
    | undefined;
  /**
   * The UUID of the income statement record
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the income statement in the context of the 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The remote data of the income statement in the context of the 3rd Party
   */
  remoteData?:
    | UnifiedAccountingIncomestatementOutputRemoteData
    | null
    | undefined;
  /**
   * The created date of the income statement record
   */
  createdAt?: Date | null | undefined;
  /**
   * The last modified date of the income statement record
   */
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAccountingIncomestatementOutputFieldMappings$inboundSchema:
  z.ZodType<
    UnifiedAccountingIncomestatementOutputFieldMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingIncomestatementOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingIncomestatementOutputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedAccountingIncomestatementOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingIncomestatementOutputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingIncomestatementOutputFieldMappings$ {
  /** @deprecated use `UnifiedAccountingIncomestatementOutputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingIncomestatementOutputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedAccountingIncomestatementOutputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingIncomestatementOutputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedAccountingIncomestatementOutputFieldMappings$Outbound` instead. */
  export type Outbound =
    UnifiedAccountingIncomestatementOutputFieldMappings$Outbound;
}

export function unifiedAccountingIncomestatementOutputFieldMappingsToJSON(
  unifiedAccountingIncomestatementOutputFieldMappings:
    UnifiedAccountingIncomestatementOutputFieldMappings,
): string {
  return JSON.stringify(
    UnifiedAccountingIncomestatementOutputFieldMappings$outboundSchema.parse(
      unifiedAccountingIncomestatementOutputFieldMappings,
    ),
  );
}

export function unifiedAccountingIncomestatementOutputFieldMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedAccountingIncomestatementOutputFieldMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingIncomestatementOutputFieldMappings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedAccountingIncomestatementOutputFieldMappings' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingIncomestatementOutputRemoteData$inboundSchema:
  z.ZodType<
    UnifiedAccountingIncomestatementOutputRemoteData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingIncomestatementOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingIncomestatementOutputRemoteData$outboundSchema:
  z.ZodType<
    UnifiedAccountingIncomestatementOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingIncomestatementOutputRemoteData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingIncomestatementOutputRemoteData$ {
  /** @deprecated use `UnifiedAccountingIncomestatementOutputRemoteData$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingIncomestatementOutputRemoteData$inboundSchema;
  /** @deprecated use `UnifiedAccountingIncomestatementOutputRemoteData$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingIncomestatementOutputRemoteData$outboundSchema;
  /** @deprecated use `UnifiedAccountingIncomestatementOutputRemoteData$Outbound` instead. */
  export type Outbound =
    UnifiedAccountingIncomestatementOutputRemoteData$Outbound;
}

export function unifiedAccountingIncomestatementOutputRemoteDataToJSON(
  unifiedAccountingIncomestatementOutputRemoteData:
    UnifiedAccountingIncomestatementOutputRemoteData,
): string {
  return JSON.stringify(
    UnifiedAccountingIncomestatementOutputRemoteData$outboundSchema.parse(
      unifiedAccountingIncomestatementOutputRemoteData,
    ),
  );
}

export function unifiedAccountingIncomestatementOutputRemoteDataFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedAccountingIncomestatementOutputRemoteData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingIncomestatementOutputRemoteData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedAccountingIncomestatementOutputRemoteData' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingIncomestatementOutput$inboundSchema: z.ZodType<
  UnifiedAccountingIncomestatementOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  start_period: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_period: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  gross_profit: z.nullable(z.number()).optional(),
  net_operating_income: z.nullable(z.number()).optional(),
  net_income: z.nullable(z.number()).optional(),
  field_mappings: z.nullable(
    z.lazy(() =>
      UnifiedAccountingIncomestatementOutputFieldMappings$inboundSchema
    ),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_data: z.nullable(
    z.lazy(() =>
      UnifiedAccountingIncomestatementOutputRemoteData$inboundSchema
    ),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_period": "startPeriod",
    "end_period": "endPeriod",
    "gross_profit": "grossProfit",
    "net_operating_income": "netOperatingIncome",
    "net_income": "netIncome",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_data": "remoteData",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedAccountingIncomestatementOutput$Outbound = {
  name?: string | null | undefined;
  currency?: string | null | undefined;
  start_period?: string | null | undefined;
  end_period?: string | null | undefined;
  gross_profit?: number | null | undefined;
  net_operating_income?: number | null | undefined;
  net_income?: number | null | undefined;
  field_mappings?:
    | UnifiedAccountingIncomestatementOutputFieldMappings$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_data?:
    | UnifiedAccountingIncomestatementOutputRemoteData$Outbound
    | null
    | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingIncomestatementOutput$outboundSchema: z.ZodType<
  UnifiedAccountingIncomestatementOutput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingIncomestatementOutput
> = z.object({
  name: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  startPeriod: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endPeriod: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  grossProfit: z.nullable(z.number()).optional(),
  netOperatingIncome: z.nullable(z.number()).optional(),
  netIncome: z.nullable(z.number()).optional(),
  fieldMappings: z.nullable(
    z.lazy(() =>
      UnifiedAccountingIncomestatementOutputFieldMappings$outboundSchema
    ),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteData: z.nullable(
    z.lazy(() =>
      UnifiedAccountingIncomestatementOutputRemoteData$outboundSchema
    ),
  ).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    startPeriod: "start_period",
    endPeriod: "end_period",
    grossProfit: "gross_profit",
    netOperatingIncome: "net_operating_income",
    netIncome: "net_income",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteData: "remote_data",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingIncomestatementOutput$ {
  /** @deprecated use `UnifiedAccountingIncomestatementOutput$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingIncomestatementOutput$inboundSchema;
  /** @deprecated use `UnifiedAccountingIncomestatementOutput$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingIncomestatementOutput$outboundSchema;
  /** @deprecated use `UnifiedAccountingIncomestatementOutput$Outbound` instead. */
  export type Outbound = UnifiedAccountingIncomestatementOutput$Outbound;
}

export function unifiedAccountingIncomestatementOutputToJSON(
  unifiedAccountingIncomestatementOutput:
    UnifiedAccountingIncomestatementOutput,
): string {
  return JSON.stringify(
    UnifiedAccountingIncomestatementOutput$outboundSchema.parse(
      unifiedAccountingIncomestatementOutput,
    ),
  );
}

export function unifiedAccountingIncomestatementOutputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedAccountingIncomestatementOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingIncomestatementOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedAccountingIncomestatementOutput' from JSON`,
  );
}
