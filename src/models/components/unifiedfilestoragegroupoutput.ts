/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    UnifiedFilestorageUserOutput,
    UnifiedFilestorageUserOutput$inboundSchema,
    UnifiedFilestorageUserOutput$Outbound,
    UnifiedFilestorageUserOutput$outboundSchema,
} from "./unifiedfilestorageuseroutput.js";
import * as z from "zod";

export type Users = UnifiedFilestorageUserOutput | string;

export type UnifiedFilestorageGroupOutput = {
    /**
     * The name of the group
     */
    name: string | null;
    /**
     * Uuids of users of the group
     */
    users: Array<UnifiedFilestorageUserOutput | string>;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     */
    remoteWasDeleted: boolean | null;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: { [k: string]: any } | null | undefined;
    /**
     * The UUID of the group
     */
    id?: string | null | undefined;
    /**
     * The id of the group in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the group in the context of the 3rd Party
     */
    remoteData?: { [k: string]: any } | null | undefined;
    /**
     * The created date of the object
     */
    createdAt?: Date | null | undefined;
    /**
     * The modified date of the object
     */
    modifiedAt?: Date | null | undefined;
};

/** @internal */
export const Users$inboundSchema: z.ZodType<Users, z.ZodTypeDef, unknown> = z.union([
    UnifiedFilestorageUserOutput$inboundSchema,
    z.string(),
]);

/** @internal */
export type Users$Outbound = UnifiedFilestorageUserOutput$Outbound | string;

/** @internal */
export const Users$outboundSchema: z.ZodType<Users$Outbound, z.ZodTypeDef, Users> = z.union([
    UnifiedFilestorageUserOutput$outboundSchema,
    z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Users$ {
    /** @deprecated use `Users$inboundSchema` instead. */
    export const inboundSchema = Users$inboundSchema;
    /** @deprecated use `Users$outboundSchema` instead. */
    export const outboundSchema = Users$outboundSchema;
    /** @deprecated use `Users$Outbound` instead. */
    export type Outbound = Users$Outbound;
}

/** @internal */
export const UnifiedFilestorageGroupOutput$inboundSchema: z.ZodType<
    UnifiedFilestorageGroupOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()),
        users: z.array(z.union([UnifiedFilestorageUserOutput$inboundSchema, z.string()])),
        remote_was_deleted: z.nullable(z.boolean()),
        field_mappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z.nullable(z.record(z.any())).optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remote_was_deleted: "remoteWasDeleted",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedFilestorageGroupOutput$Outbound = {
    name: string | null;
    users: Array<UnifiedFilestorageUserOutput$Outbound | string>;
    remote_was_deleted: boolean | null;
    field_mappings?: { [k: string]: any } | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: { [k: string]: any } | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedFilestorageGroupOutput$outboundSchema: z.ZodType<
    UnifiedFilestorageGroupOutput$Outbound,
    z.ZodTypeDef,
    UnifiedFilestorageGroupOutput
> = z
    .object({
        name: z.nullable(z.string()),
        users: z.array(z.union([UnifiedFilestorageUserOutput$outboundSchema, z.string()])),
        remoteWasDeleted: z.nullable(z.boolean()),
        fieldMappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z.nullable(z.record(z.any())).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            remoteWasDeleted: "remote_was_deleted",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedFilestorageGroupOutput$ {
    /** @deprecated use `UnifiedFilestorageGroupOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedFilestorageGroupOutput$inboundSchema;
    /** @deprecated use `UnifiedFilestorageGroupOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedFilestorageGroupOutput$outboundSchema;
    /** @deprecated use `UnifiedFilestorageGroupOutput$Outbound` instead. */
    export type Outbound = UnifiedFilestorageGroupOutput$Outbound;
}
