/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedFilestorageGroupOutputFieldMappings = {};

export type UnifiedFilestorageGroupOutputRemoteData = {};

export type UnifiedFilestorageGroupOutputCreatedAt = {};

export type UnifiedFilestorageGroupOutputModifiedAt = {};

export type UnifiedFilestorageGroupOutput = {
    /**
     * The name of the group
     */
    name: string;
    /**
     * Uuids of users of the group
     */
    users: Array<string>;
    /**
     * Indicates whether or not this object has been deleted in the third party platform.
     */
    remoteWasDeleted: boolean;
    fieldMappings: UnifiedFilestorageGroupOutputFieldMappings;
    /**
     * The UUID of the group
     */
    id?: string | undefined;
    /**
     * The id of the group in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedFilestorageGroupOutputRemoteData;
    createdAt: UnifiedFilestorageGroupOutputCreatedAt;
    modifiedAt: UnifiedFilestorageGroupOutputModifiedAt;
};

/** @internal */
export namespace UnifiedFilestorageGroupOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageGroupOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageGroupOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageGroupOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageGroupOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageGroupOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageGroupOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageGroupOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageGroupOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageGroupOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageGroupOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageGroupOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageGroupOutput$ {
    export const inboundSchema: z.ZodType<UnifiedFilestorageGroupOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            users: z.array(z.string()),
            remote_was_deleted: z.boolean(),
            field_mappings: z.lazy(() => UnifiedFilestorageGroupOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedFilestorageGroupOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedFilestorageGroupOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedFilestorageGroupOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                remote_was_deleted: "remoteWasDeleted",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name: string;
        users: Array<string>;
        remote_was_deleted: boolean;
        field_mappings: UnifiedFilestorageGroupOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedFilestorageGroupOutputRemoteData$.Outbound;
        created_at: UnifiedFilestorageGroupOutputCreatedAt$.Outbound;
        modified_at: UnifiedFilestorageGroupOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedFilestorageGroupOutput> =
        z
            .object({
                name: z.string(),
                users: z.array(z.string()),
                remoteWasDeleted: z.boolean(),
                fieldMappings: z.lazy(
                    () => UnifiedFilestorageGroupOutputFieldMappings$.outboundSchema
                ),
                id: z.string().optional(),
                remoteId: z.string().optional(),
                remoteData: z.lazy(() => UnifiedFilestorageGroupOutputRemoteData$.outboundSchema),
                createdAt: z.lazy(() => UnifiedFilestorageGroupOutputCreatedAt$.outboundSchema),
                modifiedAt: z.lazy(() => UnifiedFilestorageGroupOutputModifiedAt$.outboundSchema),
            })
            .transform((v) => {
                return remap$(v, {
                    remoteWasDeleted: "remote_was_deleted",
                    fieldMappings: "field_mappings",
                    remoteId: "remote_id",
                    remoteData: "remote_data",
                    createdAt: "created_at",
                    modifiedAt: "modified_at",
                });
            });
}
