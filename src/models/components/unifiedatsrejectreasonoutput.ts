/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedAtsRejectreasonOutputFieldMappings = {};

export type UnifiedAtsRejectreasonOutputRemoteData = {};

export type UnifiedAtsRejectreasonOutputCreatedAt = {};

export type UnifiedAtsRejectreasonOutputModifiedAt = {};

export type UnifiedAtsRejectreasonOutput = {
    /**
     * The name of the reject reason
     */
    name?: string | undefined;
    fieldMappings: UnifiedAtsRejectreasonOutputFieldMappings;
    /**
     * The UUID of the reject reason
     */
    id?: string | undefined;
    /**
     * The remote ID of the reject reason in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedAtsRejectreasonOutputRemoteData;
    createdAt: UnifiedAtsRejectreasonOutputCreatedAt;
    modifiedAt: UnifiedAtsRejectreasonOutputModifiedAt;
};

/** @internal */
export namespace UnifiedAtsRejectreasonOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsRejectreasonOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsRejectreasonOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsRejectreasonOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsRejectreasonOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsRejectreasonOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsRejectreasonOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsRejectreasonOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsRejectreasonOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsRejectreasonOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsRejectreasonOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsRejectreasonOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsRejectreasonOutput$ {
    export const inboundSchema: z.ZodType<UnifiedAtsRejectreasonOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedAtsRejectreasonOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedAtsRejectreasonOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedAtsRejectreasonOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedAtsRejectreasonOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name?: string | undefined;
        field_mappings: UnifiedAtsRejectreasonOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedAtsRejectreasonOutputRemoteData$.Outbound;
        created_at: UnifiedAtsRejectreasonOutputCreatedAt$.Outbound;
        modified_at: UnifiedAtsRejectreasonOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedAtsRejectreasonOutput> = z
        .object({
            name: z.string().optional(),
            fieldMappings: z.lazy(() => UnifiedAtsRejectreasonOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedAtsRejectreasonOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedAtsRejectreasonOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedAtsRejectreasonOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
