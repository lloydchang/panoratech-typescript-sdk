/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UnifiedCrmNoteInput = {
  /**
   * The content of the note
   */
  content: string | null;
  /**
   * The UUID of the user tied to the note
   */
  userId?: string | null | undefined;
  /**
   * The UUID of the company tied to the note
   */
  companyId?: string | null | undefined;
  /**
   * The UUID of the contact tied to the note
   */
  contactId?: string | null | undefined;
  /**
   * The UUID of the deal tied to the note
   */
  dealId?: string | null | undefined;
  /**
   * The custom field mappings of the note between the remote 3rd party & Panora
   */
  fieldMappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedCrmNoteInput$inboundSchema: z.ZodType<
  UnifiedCrmNoteInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.nullable(z.string()),
  user_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  deal_id: z.nullable(z.string()).optional(),
  field_mappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "company_id": "companyId",
    "contact_id": "contactId",
    "deal_id": "dealId",
    "field_mappings": "fieldMappings",
  });
});

/** @internal */
export type UnifiedCrmNoteInput$Outbound = {
  content: string | null;
  user_id?: string | null | undefined;
  company_id?: string | null | undefined;
  contact_id?: string | null | undefined;
  deal_id?: string | null | undefined;
  field_mappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedCrmNoteInput$outboundSchema: z.ZodType<
  UnifiedCrmNoteInput$Outbound,
  z.ZodTypeDef,
  UnifiedCrmNoteInput
> = z.object({
  content: z.nullable(z.string()),
  userId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  dealId: z.nullable(z.string()).optional(),
  fieldMappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    companyId: "company_id",
    contactId: "contact_id",
    dealId: "deal_id",
    fieldMappings: "field_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCrmNoteInput$ {
  /** @deprecated use `UnifiedCrmNoteInput$inboundSchema` instead. */
  export const inboundSchema = UnifiedCrmNoteInput$inboundSchema;
  /** @deprecated use `UnifiedCrmNoteInput$outboundSchema` instead. */
  export const outboundSchema = UnifiedCrmNoteInput$outboundSchema;
  /** @deprecated use `UnifiedCrmNoteInput$Outbound` instead. */
  export type Outbound = UnifiedCrmNoteInput$Outbound;
}
