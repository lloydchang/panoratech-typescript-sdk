/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTicketingAccountOutputFieldMappings = {};

export type UnifiedTicketingAccountOutputRemoteData = {};

export type UnifiedTicketingAccountOutputCreatedAt = {};

export type UnifiedTicketingAccountOutputModifiedAt = {};

export type UnifiedTicketingAccountOutput = {
    /**
     * The name of the account
     */
    name: string;
    /**
     * The domains of the account
     */
    domains?: Array<string> | undefined;
    fieldMappings: UnifiedTicketingAccountOutputFieldMappings;
    /**
     * The UUID of the account
     */
    id?: string | undefined;
    /**
     * The id of the account in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedTicketingAccountOutputRemoteData;
    createdAt: UnifiedTicketingAccountOutputCreatedAt;
    modifiedAt: UnifiedTicketingAccountOutputModifiedAt;
};

/** @internal */
export namespace UnifiedTicketingAccountOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAccountOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAccountOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAccountOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAccountOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAccountOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAccountOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAccountOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAccountOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAccountOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAccountOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAccountOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAccountOutput$ {
    export const inboundSchema: z.ZodType<UnifiedTicketingAccountOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            domains: z.array(z.string()).optional(),
            field_mappings: z.lazy(() => UnifiedTicketingAccountOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedTicketingAccountOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedTicketingAccountOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedTicketingAccountOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name: string;
        domains?: Array<string> | undefined;
        field_mappings: UnifiedTicketingAccountOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedTicketingAccountOutputRemoteData$.Outbound;
        created_at: UnifiedTicketingAccountOutputCreatedAt$.Outbound;
        modified_at: UnifiedTicketingAccountOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedTicketingAccountOutput> =
        z
            .object({
                name: z.string(),
                domains: z.array(z.string()).optional(),
                fieldMappings: z.lazy(
                    () => UnifiedTicketingAccountOutputFieldMappings$.outboundSchema
                ),
                id: z.string().optional(),
                remoteId: z.string().optional(),
                remoteData: z.lazy(() => UnifiedTicketingAccountOutputRemoteData$.outboundSchema),
                createdAt: z.lazy(() => UnifiedTicketingAccountOutputCreatedAt$.outboundSchema),
                modifiedAt: z.lazy(() => UnifiedTicketingAccountOutputModifiedAt$.outboundSchema),
            })
            .transform((v) => {
                return remap$(v, {
                    fieldMappings: "field_mappings",
                    remoteId: "remote_id",
                    remoteData: "remote_data",
                    createdAt: "created_at",
                    modifiedAt: "modified_at",
                });
            });
}
