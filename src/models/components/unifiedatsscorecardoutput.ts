/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedAtsScorecardOutputFieldMappings = {};

export type UnifiedAtsScorecardOutputRemoteData = {};

export type UnifiedAtsScorecardOutputCreatedAt = {};

export type UnifiedAtsScorecardOutputModifiedAt = {};

export type UnifiedAtsScorecardOutput = {
    /**
     * The overall recommendation
     */
    overallRecommendation?: string | undefined;
    /**
     * The UUID of the application
     */
    applicationId?: string | undefined;
    /**
     * The UUID of the interview
     */
    interviewId?: string | undefined;
    /**
     * The remote creation date of the scorecard
     */
    remoteCreatedAt?: Date | undefined;
    /**
     * The submission date of the scorecard
     */
    submittedAt?: Date | undefined;
    fieldMappings: UnifiedAtsScorecardOutputFieldMappings;
    /**
     * The UUID of the scorecard
     */
    id?: string | undefined;
    /**
     * The remote ID of the scorecard in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedAtsScorecardOutputRemoteData;
    createdAt: UnifiedAtsScorecardOutputCreatedAt;
    modifiedAt: UnifiedAtsScorecardOutputModifiedAt;
};

/** @internal */
export namespace UnifiedAtsScorecardOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsScorecardOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsScorecardOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsScorecardOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsScorecardOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsScorecardOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsScorecardOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsScorecardOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsScorecardOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsScorecardOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsScorecardOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsScorecardOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsScorecardOutput$ {
    export const inboundSchema: z.ZodType<UnifiedAtsScorecardOutput, z.ZodTypeDef, unknown> = z
        .object({
            overall_recommendation: z.string().optional(),
            application_id: z.string().optional(),
            interview_id: z.string().optional(),
            remote_created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            submitted_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            field_mappings: z.lazy(() => UnifiedAtsScorecardOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedAtsScorecardOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedAtsScorecardOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedAtsScorecardOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                overall_recommendation: "overallRecommendation",
                application_id: "applicationId",
                interview_id: "interviewId",
                remote_created_at: "remoteCreatedAt",
                submitted_at: "submittedAt",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        overall_recommendation?: string | undefined;
        application_id?: string | undefined;
        interview_id?: string | undefined;
        remote_created_at?: string | undefined;
        submitted_at?: string | undefined;
        field_mappings: UnifiedAtsScorecardOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedAtsScorecardOutputRemoteData$.Outbound;
        created_at: UnifiedAtsScorecardOutputCreatedAt$.Outbound;
        modified_at: UnifiedAtsScorecardOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedAtsScorecardOutput> = z
        .object({
            overallRecommendation: z.string().optional(),
            applicationId: z.string().optional(),
            interviewId: z.string().optional(),
            remoteCreatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            submittedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            fieldMappings: z.lazy(() => UnifiedAtsScorecardOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedAtsScorecardOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedAtsScorecardOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedAtsScorecardOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                overallRecommendation: "overall_recommendation",
                applicationId: "application_id",
                interviewId: "interview_id",
                remoteCreatedAt: "remote_created_at",
                submittedAt: "submitted_at",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
