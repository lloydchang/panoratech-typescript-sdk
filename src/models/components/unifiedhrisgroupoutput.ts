/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The type of the group
 */
export enum UnifiedHrisGroupOutputType {
    Team = "TEAM",
    Department = "DEPARTMENT",
    CostCenter = "COST_CENTER",
    BusinessUnit = "BUSINESS_UNIT",
    Group = "GROUP",
}

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedHrisGroupOutputFieldMappings = {};

/**
 * The remote data of the group in the context of the 3rd Party
 */
export type UnifiedHrisGroupOutputRemoteData = {};

export type UnifiedHrisGroupOutput = {
    /**
     * The UUID of the parent group
     */
    parentGroup?: string | null | undefined;
    /**
     * The name of the group
     */
    name?: string | null | undefined;
    /**
     * The type of the group
     */
    type?: UnifiedHrisGroupOutputType | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedHrisGroupOutputFieldMappings | null | undefined;
    /**
     * The UUID of the group record
     */
    id?: string | null | undefined;
    /**
     * The remote ID of the group in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the group in the context of the 3rd Party
     */
    remoteData?: UnifiedHrisGroupOutputRemoteData | null | undefined;
    /**
     * The date when the group was created in the 3rd party system
     */
    remoteCreatedAt?: Date | null | undefined;
    /**
     * The created date of the group record
     */
    createdAt?: Date | null | undefined;
    /**
     * The last modified date of the group record
     */
    modifiedAt?: Date | null | undefined;
    /**
     * Indicates if the group was deleted in the remote system
     */
    remoteWasDeleted?: boolean | null | undefined;
};

/** @internal */
export const UnifiedHrisGroupOutputType$inboundSchema: z.ZodNativeEnum<
    typeof UnifiedHrisGroupOutputType
> = z.nativeEnum(UnifiedHrisGroupOutputType);

/** @internal */
export const UnifiedHrisGroupOutputType$outboundSchema: z.ZodNativeEnum<
    typeof UnifiedHrisGroupOutputType
> = UnifiedHrisGroupOutputType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisGroupOutputType$ {
    /** @deprecated use `UnifiedHrisGroupOutputType$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisGroupOutputType$inboundSchema;
    /** @deprecated use `UnifiedHrisGroupOutputType$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisGroupOutputType$outboundSchema;
}

/** @internal */
export const UnifiedHrisGroupOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedHrisGroupOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedHrisGroupOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedHrisGroupOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedHrisGroupOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedHrisGroupOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisGroupOutputFieldMappings$ {
    /** @deprecated use `UnifiedHrisGroupOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisGroupOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedHrisGroupOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisGroupOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedHrisGroupOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedHrisGroupOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedHrisGroupOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedHrisGroupOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedHrisGroupOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedHrisGroupOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedHrisGroupOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedHrisGroupOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisGroupOutputRemoteData$ {
    /** @deprecated use `UnifiedHrisGroupOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisGroupOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedHrisGroupOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisGroupOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedHrisGroupOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedHrisGroupOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedHrisGroupOutput$inboundSchema: z.ZodType<
    UnifiedHrisGroupOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        parent_group: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        type: z.nullable(UnifiedHrisGroupOutputType$inboundSchema).optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedHrisGroupOutputFieldMappings$inboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z
            .nullable(z.lazy(() => UnifiedHrisGroupOutputRemoteData$inboundSchema))
            .optional(),
        remote_created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        remote_was_deleted: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            parent_group: "parentGroup",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            remote_created_at: "remoteCreatedAt",
            created_at: "createdAt",
            modified_at: "modifiedAt",
            remote_was_deleted: "remoteWasDeleted",
        });
    });

/** @internal */
export type UnifiedHrisGroupOutput$Outbound = {
    parent_group?: string | null | undefined;
    name?: string | null | undefined;
    type?: string | null | undefined;
    field_mappings?: UnifiedHrisGroupOutputFieldMappings$Outbound | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: UnifiedHrisGroupOutputRemoteData$Outbound | null | undefined;
    remote_created_at?: string | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
    remote_was_deleted?: boolean | null | undefined;
};

/** @internal */
export const UnifiedHrisGroupOutput$outboundSchema: z.ZodType<
    UnifiedHrisGroupOutput$Outbound,
    z.ZodTypeDef,
    UnifiedHrisGroupOutput
> = z
    .object({
        parentGroup: z.nullable(z.string()).optional(),
        name: z.nullable(z.string()).optional(),
        type: z.nullable(UnifiedHrisGroupOutputType$outboundSchema).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedHrisGroupOutputFieldMappings$outboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z
            .nullable(z.lazy(() => UnifiedHrisGroupOutputRemoteData$outboundSchema))
            .optional(),
        remoteCreatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        remoteWasDeleted: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            parentGroup: "parent_group",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            remoteCreatedAt: "remote_created_at",
            createdAt: "created_at",
            modifiedAt: "modified_at",
            remoteWasDeleted: "remote_was_deleted",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisGroupOutput$ {
    /** @deprecated use `UnifiedHrisGroupOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisGroupOutput$inboundSchema;
    /** @deprecated use `UnifiedHrisGroupOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisGroupOutput$outboundSchema;
    /** @deprecated use `UnifiedHrisGroupOutput$Outbound` instead. */
    export type Outbound = UnifiedHrisGroupOutput$Outbound;
}
