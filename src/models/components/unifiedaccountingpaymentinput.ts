/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LineItem,
  LineItem$inboundSchema,
  LineItem$Outbound,
  LineItem$outboundSchema,
} from "./lineitem.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingPaymentInputFieldMappings = {};

export type UnifiedAccountingPaymentInput = {
  /**
   * The UUID of the associated invoice
   */
  invoiceId?: string | null | undefined;
  /**
   * The date of the transaction
   */
  transactionDate?: Date | null | undefined;
  /**
   * The UUID of the associated contact
   */
  contactId?: string | null | undefined;
  /**
   * The UUID of the associated account
   */
  accountId?: string | null | undefined;
  /**
   * The currency of the payment
   */
  currency?: string | null | undefined;
  /**
   * The exchange rate applied to the payment
   */
  exchangeRate?: string | null | undefined;
  /**
   * The total amount of the payment in cents
   */
  totalAmount?: number | null | undefined;
  /**
   * The type of payment
   */
  type?: string | null | undefined;
  /**
   * The UUID of the associated company info
   */
  companyInfoId?: string | null | undefined;
  /**
   * The UUID of the associated accounting period
   */
  accountingPeriodId?: string | null | undefined;
  /**
   * The UUIDs of the tracking categories associated with the payment
   */
  trackingCategories?: Array<string> | null | undefined;
  /**
   * The line items associated with this payment
   */
  lineItems?: Array<LineItem> | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?: UnifiedAccountingPaymentInputFieldMappings | null | undefined;
};

/** @internal */
export const UnifiedAccountingPaymentInputFieldMappings$inboundSchema:
  z.ZodType<UnifiedAccountingPaymentInputFieldMappings, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type UnifiedAccountingPaymentInputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingPaymentInputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedAccountingPaymentInputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingPaymentInputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingPaymentInputFieldMappings$ {
  /** @deprecated use `UnifiedAccountingPaymentInputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingPaymentInputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentInputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingPaymentInputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentInputFieldMappings$Outbound` instead. */
  export type Outbound = UnifiedAccountingPaymentInputFieldMappings$Outbound;
}

export function unifiedAccountingPaymentInputFieldMappingsToJSON(
  unifiedAccountingPaymentInputFieldMappings:
    UnifiedAccountingPaymentInputFieldMappings,
): string {
  return JSON.stringify(
    UnifiedAccountingPaymentInputFieldMappings$outboundSchema.parse(
      unifiedAccountingPaymentInputFieldMappings,
    ),
  );
}

export function unifiedAccountingPaymentInputFieldMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedAccountingPaymentInputFieldMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingPaymentInputFieldMappings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedAccountingPaymentInputFieldMappings' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingPaymentInput$inboundSchema: z.ZodType<
  UnifiedAccountingPaymentInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  invoice_id: z.nullable(z.string()).optional(),
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  contact_id: z.nullable(z.string()).optional(),
  account_id: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchange_rate: z.nullable(z.string()).optional(),
  total_amount: z.nullable(z.number()).optional(),
  type: z.nullable(z.string()).optional(),
  company_info_id: z.nullable(z.string()).optional(),
  accounting_period_id: z.nullable(z.string()).optional(),
  tracking_categories: z.nullable(z.array(z.string())).optional(),
  line_items: z.array(LineItem$inboundSchema).optional(),
  field_mappings: z.nullable(
    z.lazy(() => UnifiedAccountingPaymentInputFieldMappings$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "invoice_id": "invoiceId",
    "transaction_date": "transactionDate",
    "contact_id": "contactId",
    "account_id": "accountId",
    "exchange_rate": "exchangeRate",
    "total_amount": "totalAmount",
    "company_info_id": "companyInfoId",
    "accounting_period_id": "accountingPeriodId",
    "tracking_categories": "trackingCategories",
    "line_items": "lineItems",
    "field_mappings": "fieldMappings",
  });
});

/** @internal */
export type UnifiedAccountingPaymentInput$Outbound = {
  invoice_id?: string | null | undefined;
  transaction_date?: string | null | undefined;
  contact_id?: string | null | undefined;
  account_id?: string | null | undefined;
  currency?: string | null | undefined;
  exchange_rate?: string | null | undefined;
  total_amount?: number | null | undefined;
  type?: string | null | undefined;
  company_info_id?: string | null | undefined;
  accounting_period_id?: string | null | undefined;
  tracking_categories?: Array<string> | null | undefined;
  line_items?: Array<LineItem$Outbound> | undefined;
  field_mappings?:
    | UnifiedAccountingPaymentInputFieldMappings$Outbound
    | null
    | undefined;
};

/** @internal */
export const UnifiedAccountingPaymentInput$outboundSchema: z.ZodType<
  UnifiedAccountingPaymentInput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingPaymentInput
> = z.object({
  invoiceId: z.nullable(z.string()).optional(),
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  contactId: z.nullable(z.string()).optional(),
  accountId: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchangeRate: z.nullable(z.string()).optional(),
  totalAmount: z.nullable(z.number()).optional(),
  type: z.nullable(z.string()).optional(),
  companyInfoId: z.nullable(z.string()).optional(),
  accountingPeriodId: z.nullable(z.string()).optional(),
  trackingCategories: z.nullable(z.array(z.string())).optional(),
  lineItems: z.array(LineItem$outboundSchema).optional(),
  fieldMappings: z.nullable(
    z.lazy(() => UnifiedAccountingPaymentInputFieldMappings$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    invoiceId: "invoice_id",
    transactionDate: "transaction_date",
    contactId: "contact_id",
    accountId: "account_id",
    exchangeRate: "exchange_rate",
    totalAmount: "total_amount",
    companyInfoId: "company_info_id",
    accountingPeriodId: "accounting_period_id",
    trackingCategories: "tracking_categories",
    lineItems: "line_items",
    fieldMappings: "field_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingPaymentInput$ {
  /** @deprecated use `UnifiedAccountingPaymentInput$inboundSchema` instead. */
  export const inboundSchema = UnifiedAccountingPaymentInput$inboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentInput$outboundSchema` instead. */
  export const outboundSchema = UnifiedAccountingPaymentInput$outboundSchema;
  /** @deprecated use `UnifiedAccountingPaymentInput$Outbound` instead. */
  export type Outbound = UnifiedAccountingPaymentInput$Outbound;
}

export function unifiedAccountingPaymentInputToJSON(
  unifiedAccountingPaymentInput: UnifiedAccountingPaymentInput,
): string {
  return JSON.stringify(
    UnifiedAccountingPaymentInput$outboundSchema.parse(
      unifiedAccountingPaymentInput,
    ),
  );
}

export function unifiedAccountingPaymentInputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedAccountingPaymentInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedAccountingPaymentInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedAccountingPaymentInput' from JSON`,
  );
}
