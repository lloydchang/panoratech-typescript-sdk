/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RagQueryOutput = {
  /**
   * The chunk which matches the embed query
   */
  chunk: string;
  /**
   * The metadata tied to the chunk
   */
  metadata: { [k: string]: any } | null;
  /**
   * The score
   */
  score: number | null;
  /**
   * The embedding of the relevant chunk
   */
  embedding: Array<number> | null;
};

/** @internal */
export const RagQueryOutput$inboundSchema: z.ZodType<
  RagQueryOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  chunk: z.string(),
  metadata: z.nullable(z.record(z.any())),
  score: z.nullable(z.number()),
  embedding: z.nullable(z.array(z.number())),
});

/** @internal */
export type RagQueryOutput$Outbound = {
  chunk: string;
  metadata: { [k: string]: any } | null;
  score: number | null;
  embedding: Array<number> | null;
};

/** @internal */
export const RagQueryOutput$outboundSchema: z.ZodType<
  RagQueryOutput$Outbound,
  z.ZodTypeDef,
  RagQueryOutput
> = z.object({
  chunk: z.string(),
  metadata: z.nullable(z.record(z.any())),
  score: z.nullable(z.number()),
  embedding: z.nullable(z.array(z.number())),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RagQueryOutput$ {
  /** @deprecated use `RagQueryOutput$inboundSchema` instead. */
  export const inboundSchema = RagQueryOutput$inboundSchema;
  /** @deprecated use `RagQueryOutput$outboundSchema` instead. */
  export const outboundSchema = RagQueryOutput$outboundSchema;
  /** @deprecated use `RagQueryOutput$Outbound` instead. */
  export type Outbound = RagQueryOutput$Outbound;
}

export function ragQueryOutputToJSON(ragQueryOutput: RagQueryOutput): string {
  return JSON.stringify(RagQueryOutput$outboundSchema.parse(ragQueryOutput));
}

export function ragQueryOutputFromJSON(
  jsonString: string,
): SafeParseResult<RagQueryOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RagQueryOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RagQueryOutput' from JSON`,
  );
}
