/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingCreditnoteOutputFieldMappings = {};

/**
 * The remote data of the credit note in the context of the 3rd Party
 */
export type UnifiedAccountingCreditnoteOutputRemoteData = {};

export type UnifiedAccountingCreditnoteOutput = {
  /**
   * The date of the credit note transaction
   */
  transactionDate?: Date | null | undefined;
  /**
   * The status of the credit note
   */
  status?: string | null | undefined;
  /**
   * The number of the credit note
   */
  number?: string | null | undefined;
  /**
   * The UUID of the associated contact
   */
  contactId?: string | null | undefined;
  /**
   * The UUID of the associated company
   */
  companyId?: string | null | undefined;
  /**
   * The exchange rate applied to the credit note
   */
  exchangeRate?: string | null | undefined;
  /**
   * The total amount of the credit note
   */
  totalAmount?: number | null | undefined;
  /**
   * The remaining credit on the credit note
   */
  remainingCredit?: number | null | undefined;
  /**
   * The UUIDs of the tracking categories associated with the credit note
   */
  trackingCategories?: Array<string> | null | undefined;
  /**
   * The currency of the credit note
   */
  currency?: string | null | undefined;
  /**
   * The payments associated with the credit note
   */
  payments?: Array<string> | null | undefined;
  /**
   * The applied payments associated with the credit note
   */
  appliedPayments?: Array<string> | null | undefined;
  /**
   * The UUID of the associated accounting period
   */
  accountingPeriodId?: string | null | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?:
    | UnifiedAccountingCreditnoteOutputFieldMappings
    | null
    | undefined;
  /**
   * The UUID of the credit note record
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the credit note in the context of the 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The remote data of the credit note in the context of the 3rd Party
   */
  remoteData?: UnifiedAccountingCreditnoteOutputRemoteData | null | undefined;
  /**
   * The date when the credit note was created in the remote system
   */
  remoteCreatedAt?: Date | null | undefined;
  /**
   * The date when the credit note was last updated in the remote system
   */
  remoteUpdatedAt?: Date | null | undefined;
  /**
   * The created date of the credit note record
   */
  createdAt?: Date | null | undefined;
  /**
   * The last modified date of the credit note record
   */
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAccountingCreditnoteOutputFieldMappings$inboundSchema:
  z.ZodType<
    UnifiedAccountingCreditnoteOutputFieldMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingCreditnoteOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingCreditnoteOutputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedAccountingCreditnoteOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingCreditnoteOutputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingCreditnoteOutputFieldMappings$ {
  /** @deprecated use `UnifiedAccountingCreditnoteOutputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingCreditnoteOutputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedAccountingCreditnoteOutputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingCreditnoteOutputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedAccountingCreditnoteOutputFieldMappings$Outbound` instead. */
  export type Outbound =
    UnifiedAccountingCreditnoteOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingCreditnoteOutputRemoteData$inboundSchema:
  z.ZodType<
    UnifiedAccountingCreditnoteOutputRemoteData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingCreditnoteOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingCreditnoteOutputRemoteData$outboundSchema:
  z.ZodType<
    UnifiedAccountingCreditnoteOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingCreditnoteOutputRemoteData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingCreditnoteOutputRemoteData$ {
  /** @deprecated use `UnifiedAccountingCreditnoteOutputRemoteData$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingCreditnoteOutputRemoteData$inboundSchema;
  /** @deprecated use `UnifiedAccountingCreditnoteOutputRemoteData$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingCreditnoteOutputRemoteData$outboundSchema;
  /** @deprecated use `UnifiedAccountingCreditnoteOutputRemoteData$Outbound` instead. */
  export type Outbound = UnifiedAccountingCreditnoteOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedAccountingCreditnoteOutput$inboundSchema: z.ZodType<
  UnifiedAccountingCreditnoteOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  status: z.nullable(z.string()).optional(),
  number: z.nullable(z.string()).optional(),
  contact_id: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  exchange_rate: z.nullable(z.string()).optional(),
  total_amount: z.nullable(z.number()).optional(),
  remaining_credit: z.nullable(z.number()).optional(),
  tracking_categories: z.nullable(z.array(z.string())).optional(),
  currency: z.nullable(z.string()).optional(),
  payments: z.nullable(z.array(z.string())).optional(),
  applied_payments: z.nullable(z.array(z.string())).optional(),
  accounting_period_id: z.nullable(z.string()).optional(),
  field_mappings: z.nullable(
    z.lazy(() => UnifiedAccountingCreditnoteOutputFieldMappings$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_data: z.nullable(
    z.lazy(() => UnifiedAccountingCreditnoteOutputRemoteData$inboundSchema),
  ).optional(),
  remote_created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_date": "transactionDate",
    "contact_id": "contactId",
    "company_id": "companyId",
    "exchange_rate": "exchangeRate",
    "total_amount": "totalAmount",
    "remaining_credit": "remainingCredit",
    "tracking_categories": "trackingCategories",
    "applied_payments": "appliedPayments",
    "accounting_period_id": "accountingPeriodId",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_data": "remoteData",
    "remote_created_at": "remoteCreatedAt",
    "remote_updated_at": "remoteUpdatedAt",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedAccountingCreditnoteOutput$Outbound = {
  transaction_date?: string | null | undefined;
  status?: string | null | undefined;
  number?: string | null | undefined;
  contact_id?: string | null | undefined;
  company_id?: string | null | undefined;
  exchange_rate?: string | null | undefined;
  total_amount?: number | null | undefined;
  remaining_credit?: number | null | undefined;
  tracking_categories?: Array<string> | null | undefined;
  currency?: string | null | undefined;
  payments?: Array<string> | null | undefined;
  applied_payments?: Array<string> | null | undefined;
  accounting_period_id?: string | null | undefined;
  field_mappings?:
    | UnifiedAccountingCreditnoteOutputFieldMappings$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_data?:
    | UnifiedAccountingCreditnoteOutputRemoteData$Outbound
    | null
    | undefined;
  remote_created_at?: string | null | undefined;
  remote_updated_at?: string | null | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingCreditnoteOutput$outboundSchema: z.ZodType<
  UnifiedAccountingCreditnoteOutput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingCreditnoteOutput
> = z.object({
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  status: z.nullable(z.string()).optional(),
  number: z.nullable(z.string()).optional(),
  contactId: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  exchangeRate: z.nullable(z.string()).optional(),
  totalAmount: z.nullable(z.number()).optional(),
  remainingCredit: z.nullable(z.number()).optional(),
  trackingCategories: z.nullable(z.array(z.string())).optional(),
  currency: z.nullable(z.string()).optional(),
  payments: z.nullable(z.array(z.string())).optional(),
  appliedPayments: z.nullable(z.array(z.string())).optional(),
  accountingPeriodId: z.nullable(z.string()).optional(),
  fieldMappings: z.nullable(
    z.lazy(() => UnifiedAccountingCreditnoteOutputFieldMappings$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteData: z.nullable(
    z.lazy(() => UnifiedAccountingCreditnoteOutputRemoteData$outboundSchema),
  ).optional(),
  remoteCreatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  remoteUpdatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionDate: "transaction_date",
    contactId: "contact_id",
    companyId: "company_id",
    exchangeRate: "exchange_rate",
    totalAmount: "total_amount",
    remainingCredit: "remaining_credit",
    trackingCategories: "tracking_categories",
    appliedPayments: "applied_payments",
    accountingPeriodId: "accounting_period_id",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteData: "remote_data",
    remoteCreatedAt: "remote_created_at",
    remoteUpdatedAt: "remote_updated_at",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingCreditnoteOutput$ {
  /** @deprecated use `UnifiedAccountingCreditnoteOutput$inboundSchema` instead. */
  export const inboundSchema = UnifiedAccountingCreditnoteOutput$inboundSchema;
  /** @deprecated use `UnifiedAccountingCreditnoteOutput$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingCreditnoteOutput$outboundSchema;
  /** @deprecated use `UnifiedAccountingCreditnoteOutput$Outbound` instead. */
  export type Outbound = UnifiedAccountingCreditnoteOutput$Outbound;
}
