/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The currency associated with the contact
 */
export enum UnifiedAccountingContactOutputCurrency {
    Aed = "AED",
    Afn = "AFN",
    All = "ALL",
    Amd = "AMD",
    Ang = "ANG",
    Aoa = "AOA",
    Ars = "ARS",
    Aud = "AUD",
    Awg = "AWG",
    Azn = "AZN",
    Bam = "BAM",
    Bbd = "BBD",
    Bdt = "BDT",
    Bgn = "BGN",
    Bhd = "BHD",
    Bif = "BIF",
    Bmd = "BMD",
    Bnd = "BND",
    Bob = "BOB",
    Brl = "BRL",
    Bsd = "BSD",
    Btn = "BTN",
    Bwp = "BWP",
    Byn = "BYN",
    Bzd = "BZD",
    Cad = "CAD",
    Cdf = "CDF",
    Chf = "CHF",
    Clp = "CLP",
    Cny = "CNY",
    Cop = "COP",
    Crc = "CRC",
    Cup = "CUP",
    Cve = "CVE",
    Czk = "CZK",
    Djf = "DJF",
    Dkk = "DKK",
    Dop = "DOP",
    Dzd = "DZD",
    Egp = "EGP",
    Ern = "ERN",
    Etb = "ETB",
    Eur = "EUR",
    Fjd = "FJD",
    Fkp = "FKP",
    Fok = "FOK",
    Gbp = "GBP",
    Gel = "GEL",
    Ggp = "GGP",
    Ghs = "GHS",
    Gip = "GIP",
    Gmd = "GMD",
    Gnf = "GNF",
    Gtq = "GTQ",
    Gyd = "GYD",
    Hkd = "HKD",
    Hnl = "HNL",
    Hrk = "HRK",
    Htg = "HTG",
    Huf = "HUF",
    Idr = "IDR",
    Ils = "ILS",
    Imp = "IMP",
    Inr = "INR",
    Iqd = "IQD",
    Irr = "IRR",
    Isk = "ISK",
    Jep = "JEP",
    Jmd = "JMD",
    Jod = "JOD",
    Jpy = "JPY",
    Kes = "KES",
    Kgs = "KGS",
    Khr = "KHR",
    Kid = "KID",
    Kmf = "KMF",
    Krw = "KRW",
    Kwd = "KWD",
    Kyd = "KYD",
    Kzt = "KZT",
    Lak = "LAK",
    Lbp = "LBP",
    Lkr = "LKR",
    Lrd = "LRD",
    Lsl = "LSL",
    Lyd = "LYD",
    Mad = "MAD",
    Mdl = "MDL",
    Mga = "MGA",
    Mkd = "MKD",
    Mmk = "MMK",
    Mnt = "MNT",
    Mop = "MOP",
    Mru = "MRU",
    Mur = "MUR",
    Mvr = "MVR",
    Mwk = "MWK",
    Mxn = "MXN",
    Myr = "MYR",
    Mzn = "MZN",
    Nad = "NAD",
    Ngn = "NGN",
    Nio = "NIO",
    Nok = "NOK",
    Npr = "NPR",
    Nzd = "NZD",
    Omr = "OMR",
    Pab = "PAB",
    Pen = "PEN",
    Pgk = "PGK",
    Php = "PHP",
    Pkr = "PKR",
    Pln = "PLN",
    Pyg = "PYG",
    Qar = "QAR",
    Ron = "RON",
    Rsd = "RSD",
    Rub = "RUB",
    Rwf = "RWF",
    Sar = "SAR",
    Sbd = "SBD",
    Scr = "SCR",
    Sdg = "SDG",
    Sek = "SEK",
    Sgd = "SGD",
    Shp = "SHP",
    Sle = "SLE",
    Sll = "SLL",
    Sos = "SOS",
    Srd = "SRD",
    Ssp = "SSP",
    Stn = "STN",
    Syp = "SYP",
    Szl = "SZL",
    Thb = "THB",
    Tjs = "TJS",
    Tmt = "TMT",
    Tnd = "TND",
    Top = "TOP",
    Try = "TRY",
    Ttd = "TTD",
    Tvd = "TVD",
    Twd = "TWD",
    Tzs = "TZS",
    Uah = "UAH",
    Ugx = "UGX",
    Usd = "USD",
    Uyu = "UYU",
    Uzs = "UZS",
    Ves = "VES",
    Vnd = "VND",
    Vuv = "VUV",
    Wst = "WST",
    Xaf = "XAF",
    Xcd = "XCD",
    Xdr = "XDR",
    Xof = "XOF",
    Xpf = "XPF",
    Yer = "YER",
    Zar = "ZAR",
    Zmw = "ZMW",
    Zwl = "ZWL",
}

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingContactOutputFieldMappings = {};

/**
 * The remote data of the contact in the context of the 3rd Party
 */
export type UnifiedAccountingContactOutputRemoteData = {};

export type UnifiedAccountingContactOutput = {
    /**
     * The name of the contact
     */
    name?: string | null | undefined;
    /**
     * Indicates if the contact is a supplier
     */
    isSupplier?: boolean | null | undefined;
    /**
     * Indicates if the contact is a customer
     */
    isCustomer?: boolean | null | undefined;
    /**
     * The email address of the contact
     */
    emailAddress?: string | null | undefined;
    /**
     * The tax number of the contact
     */
    taxNumber?: string | null | undefined;
    /**
     * The status of the contact
     */
    status?: string | null | undefined;
    /**
     * The currency associated with the contact
     */
    currency?: UnifiedAccountingContactOutputCurrency | null | undefined;
    /**
     * The date when the contact was last updated in the remote system
     */
    remoteUpdatedAt?: string | null | undefined;
    /**
     * The UUID of the associated company info
     */
    companyInfoId?: string | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedAccountingContactOutputFieldMappings | null | undefined;
    /**
     * The UUID of the contact record
     */
    id?: string | null | undefined;
    /**
     * The remote ID of the contact in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the contact in the context of the 3rd Party
     */
    remoteData?: UnifiedAccountingContactOutputRemoteData | null | undefined;
    /**
     * The created date of the contact record
     */
    createdAt?: Date | null | undefined;
    /**
     * The last modified date of the contact record
     */
    modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAccountingContactOutputCurrency$inboundSchema: z.ZodNativeEnum<
    typeof UnifiedAccountingContactOutputCurrency
> = z.nativeEnum(UnifiedAccountingContactOutputCurrency);

/** @internal */
export const UnifiedAccountingContactOutputCurrency$outboundSchema: z.ZodNativeEnum<
    typeof UnifiedAccountingContactOutputCurrency
> = UnifiedAccountingContactOutputCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingContactOutputCurrency$ {
    /** @deprecated use `UnifiedAccountingContactOutputCurrency$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingContactOutputCurrency$inboundSchema;
    /** @deprecated use `UnifiedAccountingContactOutputCurrency$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingContactOutputCurrency$outboundSchema;
}

/** @internal */
export const UnifiedAccountingContactOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedAccountingContactOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingContactOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingContactOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedAccountingContactOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingContactOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingContactOutputFieldMappings$ {
    /** @deprecated use `UnifiedAccountingContactOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingContactOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedAccountingContactOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingContactOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedAccountingContactOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedAccountingContactOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingContactOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedAccountingContactOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingContactOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingContactOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedAccountingContactOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingContactOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingContactOutputRemoteData$ {
    /** @deprecated use `UnifiedAccountingContactOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingContactOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedAccountingContactOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingContactOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedAccountingContactOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedAccountingContactOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedAccountingContactOutput$inboundSchema: z.ZodType<
    UnifiedAccountingContactOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()).optional(),
        is_supplier: z.nullable(z.boolean()).optional(),
        is_customer: z.nullable(z.boolean()).optional(),
        email_address: z.nullable(z.string()).optional(),
        tax_number: z.nullable(z.string()).optional(),
        status: z.nullable(z.string()).optional(),
        currency: z.nullable(UnifiedAccountingContactOutputCurrency$inboundSchema).optional(),
        remote_updated_at: z.nullable(z.string()).optional(),
        company_info_id: z.nullable(z.string()).optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedAccountingContactOutputFieldMappings$inboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z
            .nullable(z.lazy(() => UnifiedAccountingContactOutputRemoteData$inboundSchema))
            .optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            is_supplier: "isSupplier",
            is_customer: "isCustomer",
            email_address: "emailAddress",
            tax_number: "taxNumber",
            remote_updated_at: "remoteUpdatedAt",
            company_info_id: "companyInfoId",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedAccountingContactOutput$Outbound = {
    name?: string | null | undefined;
    is_supplier?: boolean | null | undefined;
    is_customer?: boolean | null | undefined;
    email_address?: string | null | undefined;
    tax_number?: string | null | undefined;
    status?: string | null | undefined;
    currency?: string | null | undefined;
    remote_updated_at?: string | null | undefined;
    company_info_id?: string | null | undefined;
    field_mappings?: UnifiedAccountingContactOutputFieldMappings$Outbound | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: UnifiedAccountingContactOutputRemoteData$Outbound | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingContactOutput$outboundSchema: z.ZodType<
    UnifiedAccountingContactOutput$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingContactOutput
> = z
    .object({
        name: z.nullable(z.string()).optional(),
        isSupplier: z.nullable(z.boolean()).optional(),
        isCustomer: z.nullable(z.boolean()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        taxNumber: z.nullable(z.string()).optional(),
        status: z.nullable(z.string()).optional(),
        currency: z.nullable(UnifiedAccountingContactOutputCurrency$outboundSchema).optional(),
        remoteUpdatedAt: z.nullable(z.string()).optional(),
        companyInfoId: z.nullable(z.string()).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedAccountingContactOutputFieldMappings$outboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z
            .nullable(z.lazy(() => UnifiedAccountingContactOutputRemoteData$outboundSchema))
            .optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            isSupplier: "is_supplier",
            isCustomer: "is_customer",
            emailAddress: "email_address",
            taxNumber: "tax_number",
            remoteUpdatedAt: "remote_updated_at",
            companyInfoId: "company_info_id",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingContactOutput$ {
    /** @deprecated use `UnifiedAccountingContactOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingContactOutput$inboundSchema;
    /** @deprecated use `UnifiedAccountingContactOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingContactOutput$outboundSchema;
    /** @deprecated use `UnifiedAccountingContactOutput$Outbound` instead. */
    export type Outbound = UnifiedAccountingContactOutput$Outbound;
}
