/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type TaxItem = {
  /**
   * The name of the tax
   */
  name?: string | null | undefined;
  /**
   * The amount of the tax
   */
  amount?: number | null | undefined;
  /**
   * Indicates if this is an employer tax
   */
  employerTax?: boolean | null | undefined;
};

/** @internal */
export const TaxItem$inboundSchema: z.ZodType<TaxItem, z.ZodTypeDef, unknown> =
  z.object({
    name: z.nullable(z.string()).optional(),
    amount: z.nullable(z.number()).optional(),
    employer_tax: z.nullable(z.boolean()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "employer_tax": "employerTax",
    });
  });

/** @internal */
export type TaxItem$Outbound = {
  name?: string | null | undefined;
  amount?: number | null | undefined;
  employer_tax?: boolean | null | undefined;
};

/** @internal */
export const TaxItem$outboundSchema: z.ZodType<
  TaxItem$Outbound,
  z.ZodTypeDef,
  TaxItem
> = z.object({
  name: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number()).optional(),
  employerTax: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    employerTax: "employer_tax",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxItem$ {
  /** @deprecated use `TaxItem$inboundSchema` instead. */
  export const inboundSchema = TaxItem$inboundSchema;
  /** @deprecated use `TaxItem$outboundSchema` instead. */
  export const outboundSchema = TaxItem$outboundSchema;
  /** @deprecated use `TaxItem$Outbound` instead. */
  export type Outbound = TaxItem$Outbound;
}
