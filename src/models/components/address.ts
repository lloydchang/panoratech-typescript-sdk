/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type Address = {
  /**
   * The street
   */
  street1: string | null;
  /**
   * More information about the street
   */
  street2: string | null;
  /**
   * The city
   */
  city: string | null;
  /**
   * The state
   */
  state: string | null;
  /**
   * The postal code
   */
  postalCode: string | null;
  /**
   * The country
   */
  country: string | null;
  /**
   * The address type. Authorized values are either PERSONAL or WORK.
   */
  addressType: string | null;
  /**
   * The owner type of the address
   */
  ownerType: string | null;
};

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> =
  z.object({
    street_1: z.nullable(z.string()),
    street_2: z.nullable(z.string()),
    city: z.nullable(z.string()),
    state: z.nullable(z.string()),
    postal_code: z.nullable(z.string()),
    country: z.nullable(z.string()),
    address_type: z.nullable(z.string()),
    owner_type: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "street_1": "street1",
      "street_2": "street2",
      "postal_code": "postalCode",
      "address_type": "addressType",
      "owner_type": "ownerType",
    });
  });

/** @internal */
export type Address$Outbound = {
  street_1: string | null;
  street_2: string | null;
  city: string | null;
  state: string | null;
  postal_code: string | null;
  country: string | null;
  address_type: string | null;
  owner_type: string | null;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<
  Address$Outbound,
  z.ZodTypeDef,
  Address
> = z.object({
  street1: z.nullable(z.string()),
  street2: z.nullable(z.string()),
  city: z.nullable(z.string()),
  state: z.nullable(z.string()),
  postalCode: z.nullable(z.string()),
  country: z.nullable(z.string()),
  addressType: z.nullable(z.string()),
  ownerType: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    street1: "street_1",
    street2: "street_2",
    postalCode: "postal_code",
    addressType: "address_type",
    ownerType: "owner_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
  /** @deprecated use `Address$inboundSchema` instead. */
  export const inboundSchema = Address$inboundSchema;
  /** @deprecated use `Address$outboundSchema` instead. */
  export const outboundSchema = Address$outboundSchema;
  /** @deprecated use `Address$Outbound` instead. */
  export type Outbound = Address$Outbound;
}
