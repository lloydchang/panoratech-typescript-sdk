/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum CustomFieldCreateDtoObjectTypeOwner {
  Company = "company",
  Contact = "contact",
  Deal = "deal",
  Lead = "lead",
  Note = "note",
  Task = "task",
  Engagement = "engagement",
  Stage = "stage",
  User = "user",
}

/**
 * The data type of the custom field
 */
export enum CustomFieldCreateDtoDataType {
  String = "string",
  Number = "number",
}

export type CustomFieldCreateDto = {
  objectTypeOwner: CustomFieldCreateDtoObjectTypeOwner | null;
  /**
   * The name of the custom field
   */
  name: string | null;
  /**
   * The description of the custom field
   */
  description: string | null;
  /**
   * The data type of the custom field
   */
  dataType: CustomFieldCreateDtoDataType | null;
  /**
   * The source custom field ID
   */
  sourceCustomFieldId: string | null;
  /**
   * The name of the source software/provider
   */
  sourceProvider: string | null;
  /**
   * The linked user ID
   */
  linkedUserId: string | null;
};

/** @internal */
export const CustomFieldCreateDtoObjectTypeOwner$inboundSchema: z.ZodNativeEnum<
  typeof CustomFieldCreateDtoObjectTypeOwner
> = z.nativeEnum(CustomFieldCreateDtoObjectTypeOwner);

/** @internal */
export const CustomFieldCreateDtoObjectTypeOwner$outboundSchema:
  z.ZodNativeEnum<typeof CustomFieldCreateDtoObjectTypeOwner> =
    CustomFieldCreateDtoObjectTypeOwner$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldCreateDtoObjectTypeOwner$ {
  /** @deprecated use `CustomFieldCreateDtoObjectTypeOwner$inboundSchema` instead. */
  export const inboundSchema =
    CustomFieldCreateDtoObjectTypeOwner$inboundSchema;
  /** @deprecated use `CustomFieldCreateDtoObjectTypeOwner$outboundSchema` instead. */
  export const outboundSchema =
    CustomFieldCreateDtoObjectTypeOwner$outboundSchema;
}

/** @internal */
export const CustomFieldCreateDtoDataType$inboundSchema: z.ZodNativeEnum<
  typeof CustomFieldCreateDtoDataType
> = z.nativeEnum(CustomFieldCreateDtoDataType);

/** @internal */
export const CustomFieldCreateDtoDataType$outboundSchema: z.ZodNativeEnum<
  typeof CustomFieldCreateDtoDataType
> = CustomFieldCreateDtoDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldCreateDtoDataType$ {
  /** @deprecated use `CustomFieldCreateDtoDataType$inboundSchema` instead. */
  export const inboundSchema = CustomFieldCreateDtoDataType$inboundSchema;
  /** @deprecated use `CustomFieldCreateDtoDataType$outboundSchema` instead. */
  export const outboundSchema = CustomFieldCreateDtoDataType$outboundSchema;
}

/** @internal */
export const CustomFieldCreateDto$inboundSchema: z.ZodType<
  CustomFieldCreateDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  object_type_owner: z.nullable(
    CustomFieldCreateDtoObjectTypeOwner$inboundSchema,
  ),
  name: z.nullable(z.string()),
  description: z.nullable(z.string()),
  data_type: z.nullable(CustomFieldCreateDtoDataType$inboundSchema),
  source_custom_field_id: z.nullable(z.string()),
  source_provider: z.nullable(z.string()),
  linked_user_id: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "object_type_owner": "objectTypeOwner",
    "data_type": "dataType",
    "source_custom_field_id": "sourceCustomFieldId",
    "source_provider": "sourceProvider",
    "linked_user_id": "linkedUserId",
  });
});

/** @internal */
export type CustomFieldCreateDto$Outbound = {
  object_type_owner: string | null;
  name: string | null;
  description: string | null;
  data_type: string | null;
  source_custom_field_id: string | null;
  source_provider: string | null;
  linked_user_id: string | null;
};

/** @internal */
export const CustomFieldCreateDto$outboundSchema: z.ZodType<
  CustomFieldCreateDto$Outbound,
  z.ZodTypeDef,
  CustomFieldCreateDto
> = z.object({
  objectTypeOwner: z.nullable(
    CustomFieldCreateDtoObjectTypeOwner$outboundSchema,
  ),
  name: z.nullable(z.string()),
  description: z.nullable(z.string()),
  dataType: z.nullable(CustomFieldCreateDtoDataType$outboundSchema),
  sourceCustomFieldId: z.nullable(z.string()),
  sourceProvider: z.nullable(z.string()),
  linkedUserId: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    objectTypeOwner: "object_type_owner",
    dataType: "data_type",
    sourceCustomFieldId: "source_custom_field_id",
    sourceProvider: "source_provider",
    linkedUserId: "linked_user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldCreateDto$ {
  /** @deprecated use `CustomFieldCreateDto$inboundSchema` instead. */
  export const inboundSchema = CustomFieldCreateDto$inboundSchema;
  /** @deprecated use `CustomFieldCreateDto$outboundSchema` instead. */
  export const outboundSchema = CustomFieldCreateDto$outboundSchema;
  /** @deprecated use `CustomFieldCreateDto$Outbound` instead. */
  export type Outbound = CustomFieldCreateDto$Outbound;
}

export function customFieldCreateDtoToJSON(
  customFieldCreateDto: CustomFieldCreateDto,
): string {
  return JSON.stringify(
    CustomFieldCreateDto$outboundSchema.parse(customFieldCreateDto),
  );
}

export function customFieldCreateDtoFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldCreateDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldCreateDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldCreateDto' from JSON`,
  );
}
