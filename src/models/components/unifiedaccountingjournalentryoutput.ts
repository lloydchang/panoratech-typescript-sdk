/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LineItem,
  LineItem$inboundSchema,
  LineItem$Outbound,
  LineItem$outboundSchema,
} from "./lineitem.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingJournalentryOutputFieldMappings = {};

/**
 * The remote data of the journal entry in the context of the 3rd Party
 */
export type UnifiedAccountingJournalentryOutputRemoteData = {};

export type UnifiedAccountingJournalentryOutput = {
  /**
   * The date of the transaction
   */
  transactionDate?: Date | null | undefined;
  /**
   * The payments associated with the journal entry
   */
  payments?: Array<string> | null | undefined;
  /**
   * The applied payments for the journal entry
   */
  appliedPayments?: Array<string> | null | undefined;
  /**
   * A memo or note for the journal entry
   */
  memo?: string | null | undefined;
  /**
   * The currency of the journal entry
   */
  currency?: string | null | undefined;
  /**
   * The exchange rate applied to the journal entry
   */
  exchangeRate?: string | null | undefined;
  /**
   * The UUID of the associated company info
   */
  idAccCompanyInfo?: string | undefined;
  /**
   * The journal number
   */
  journalNumber?: string | null | undefined;
  /**
   * The UUIDs of the tracking categories associated with the journal entry
   */
  trackingCategories?: Array<string> | null | undefined;
  /**
   * The UUID of the associated accounting period
   */
  idAccAccountingPeriod?: string | null | undefined;
  /**
   * The posting status of the journal entry
   */
  postingStatus?: string | null | undefined;
  /**
   * The line items associated with this journal entry
   */
  lineItems?: Array<LineItem> | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?:
    | UnifiedAccountingJournalentryOutputFieldMappings
    | null
    | undefined;
  /**
   * The UUID of the journal entry record
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the journal entry in the context of the 3rd Party
   */
  remoteId?: string | undefined;
  /**
   * The date when the journal entry was created in the remote system
   */
  remoteCreatedAt?: Date | null | undefined;
  /**
   * The date when the journal entry was last modified in the remote system
   */
  remoteModiifiedAt?: Date | null | undefined;
  /**
   * The remote data of the journal entry in the context of the 3rd Party
   */
  remoteData?: UnifiedAccountingJournalentryOutputRemoteData | null | undefined;
  /**
   * The created date of the journal entry record
   */
  createdAt?: Date | null | undefined;
  /**
   * The last modified date of the journal entry record
   */
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAccountingJournalentryOutputFieldMappings$inboundSchema:
  z.ZodType<
    UnifiedAccountingJournalentryOutputFieldMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingJournalentryOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingJournalentryOutputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedAccountingJournalentryOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingJournalentryOutputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingJournalentryOutputFieldMappings$ {
  /** @deprecated use `UnifiedAccountingJournalentryOutputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingJournalentryOutputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedAccountingJournalentryOutputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingJournalentryOutputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedAccountingJournalentryOutputFieldMappings$Outbound` instead. */
  export type Outbound =
    UnifiedAccountingJournalentryOutputFieldMappings$Outbound;
}

export function unifiedAccountingJournalentryOutputFieldMappingsToJSON(
  unifiedAccountingJournalentryOutputFieldMappings:
    UnifiedAccountingJournalentryOutputFieldMappings,
): string {
  return JSON.stringify(
    UnifiedAccountingJournalentryOutputFieldMappings$outboundSchema.parse(
      unifiedAccountingJournalentryOutputFieldMappings,
    ),
  );
}

export function unifiedAccountingJournalentryOutputFieldMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedAccountingJournalentryOutputFieldMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingJournalentryOutputFieldMappings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedAccountingJournalentryOutputFieldMappings' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingJournalentryOutputRemoteData$inboundSchema:
  z.ZodType<
    UnifiedAccountingJournalentryOutputRemoteData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingJournalentryOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingJournalentryOutputRemoteData$outboundSchema:
  z.ZodType<
    UnifiedAccountingJournalentryOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingJournalentryOutputRemoteData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingJournalentryOutputRemoteData$ {
  /** @deprecated use `UnifiedAccountingJournalentryOutputRemoteData$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingJournalentryOutputRemoteData$inboundSchema;
  /** @deprecated use `UnifiedAccountingJournalentryOutputRemoteData$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingJournalentryOutputRemoteData$outboundSchema;
  /** @deprecated use `UnifiedAccountingJournalentryOutputRemoteData$Outbound` instead. */
  export type Outbound = UnifiedAccountingJournalentryOutputRemoteData$Outbound;
}

export function unifiedAccountingJournalentryOutputRemoteDataToJSON(
  unifiedAccountingJournalentryOutputRemoteData:
    UnifiedAccountingJournalentryOutputRemoteData,
): string {
  return JSON.stringify(
    UnifiedAccountingJournalentryOutputRemoteData$outboundSchema.parse(
      unifiedAccountingJournalentryOutputRemoteData,
    ),
  );
}

export function unifiedAccountingJournalentryOutputRemoteDataFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedAccountingJournalentryOutputRemoteData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingJournalentryOutputRemoteData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedAccountingJournalentryOutputRemoteData' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingJournalentryOutput$inboundSchema: z.ZodType<
  UnifiedAccountingJournalentryOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  payments: z.nullable(z.array(z.string())).optional(),
  applied_payments: z.nullable(z.array(z.string())).optional(),
  memo: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchange_rate: z.nullable(z.string()).optional(),
  id_acc_company_info: z.string().optional(),
  journal_number: z.nullable(z.string()).optional(),
  tracking_categories: z.nullable(z.array(z.string())).optional(),
  id_acc_accounting_period: z.nullable(z.string()).optional(),
  posting_status: z.nullable(z.string()).optional(),
  line_items: z.array(LineItem$inboundSchema).optional(),
  field_mappings: z.nullable(
    z.lazy(() =>
      UnifiedAccountingJournalentryOutputFieldMappings$inboundSchema
    ),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.string().optional(),
  remote_created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_modiified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_data: z.nullable(
    z.lazy(() => UnifiedAccountingJournalentryOutputRemoteData$inboundSchema),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_date": "transactionDate",
    "applied_payments": "appliedPayments",
    "exchange_rate": "exchangeRate",
    "id_acc_company_info": "idAccCompanyInfo",
    "journal_number": "journalNumber",
    "tracking_categories": "trackingCategories",
    "id_acc_accounting_period": "idAccAccountingPeriod",
    "posting_status": "postingStatus",
    "line_items": "lineItems",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_created_at": "remoteCreatedAt",
    "remote_modiified_at": "remoteModiifiedAt",
    "remote_data": "remoteData",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedAccountingJournalentryOutput$Outbound = {
  transaction_date?: string | null | undefined;
  payments?: Array<string> | null | undefined;
  applied_payments?: Array<string> | null | undefined;
  memo?: string | null | undefined;
  currency?: string | null | undefined;
  exchange_rate?: string | null | undefined;
  id_acc_company_info?: string | undefined;
  journal_number?: string | null | undefined;
  tracking_categories?: Array<string> | null | undefined;
  id_acc_accounting_period?: string | null | undefined;
  posting_status?: string | null | undefined;
  line_items?: Array<LineItem$Outbound> | undefined;
  field_mappings?:
    | UnifiedAccountingJournalentryOutputFieldMappings$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  remote_id?: string | undefined;
  remote_created_at?: string | null | undefined;
  remote_modiified_at?: string | null | undefined;
  remote_data?:
    | UnifiedAccountingJournalentryOutputRemoteData$Outbound
    | null
    | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingJournalentryOutput$outboundSchema: z.ZodType<
  UnifiedAccountingJournalentryOutput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingJournalentryOutput
> = z.object({
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  payments: z.nullable(z.array(z.string())).optional(),
  appliedPayments: z.nullable(z.array(z.string())).optional(),
  memo: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchangeRate: z.nullable(z.string()).optional(),
  idAccCompanyInfo: z.string().optional(),
  journalNumber: z.nullable(z.string()).optional(),
  trackingCategories: z.nullable(z.array(z.string())).optional(),
  idAccAccountingPeriod: z.nullable(z.string()).optional(),
  postingStatus: z.nullable(z.string()).optional(),
  lineItems: z.array(LineItem$outboundSchema).optional(),
  fieldMappings: z.nullable(
    z.lazy(() =>
      UnifiedAccountingJournalentryOutputFieldMappings$outboundSchema
    ),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.string().optional(),
  remoteCreatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  remoteModiifiedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  remoteData: z.nullable(
    z.lazy(() => UnifiedAccountingJournalentryOutputRemoteData$outboundSchema),
  ).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionDate: "transaction_date",
    appliedPayments: "applied_payments",
    exchangeRate: "exchange_rate",
    idAccCompanyInfo: "id_acc_company_info",
    journalNumber: "journal_number",
    trackingCategories: "tracking_categories",
    idAccAccountingPeriod: "id_acc_accounting_period",
    postingStatus: "posting_status",
    lineItems: "line_items",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteCreatedAt: "remote_created_at",
    remoteModiifiedAt: "remote_modiified_at",
    remoteData: "remote_data",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingJournalentryOutput$ {
  /** @deprecated use `UnifiedAccountingJournalentryOutput$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingJournalentryOutput$inboundSchema;
  /** @deprecated use `UnifiedAccountingJournalentryOutput$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingJournalentryOutput$outboundSchema;
  /** @deprecated use `UnifiedAccountingJournalentryOutput$Outbound` instead. */
  export type Outbound = UnifiedAccountingJournalentryOutput$Outbound;
}

export function unifiedAccountingJournalentryOutputToJSON(
  unifiedAccountingJournalentryOutput: UnifiedAccountingJournalentryOutput,
): string {
  return JSON.stringify(
    UnifiedAccountingJournalentryOutput$outboundSchema.parse(
      unifiedAccountingJournalentryOutput,
    ),
  );
}

export function unifiedAccountingJournalentryOutputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedAccountingJournalentryOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingJournalentryOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedAccountingJournalentryOutput' from JSON`,
  );
}
