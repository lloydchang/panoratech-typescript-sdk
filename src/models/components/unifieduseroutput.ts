/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedUserOutputFieldMappings = {};

export type UnifiedUserOutputRemoteData = {};

export type UnifiedUserOutputCreatedAt = {};

export type UnifiedUserOutputModifiedAt = {};

export type UnifiedUserOutput = {
    /**
     * The name of the user
     */
    name: string;
    /**
     * The email of the user
     */
    email: string;
    /**
     * Whether the user is the one who linked this account.
     */
    isMe: boolean;
    fieldMappings: UnifiedUserOutputFieldMappings;
    /**
     * The UUID of the user
     */
    id?: string | undefined;
    /**
     * The id of the user in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedUserOutputRemoteData;
    createdAt: UnifiedUserOutputCreatedAt;
    modifiedAt: UnifiedUserOutputModifiedAt;
};

/** @internal */
export namespace UnifiedUserOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<UnifiedUserOutputFieldMappings, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedUserOutputFieldMappings> =
        z.object({});
}

/** @internal */
export namespace UnifiedUserOutputRemoteData$ {
    export const inboundSchema: z.ZodType<UnifiedUserOutputRemoteData, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedUserOutputRemoteData> =
        z.object({});
}

/** @internal */
export namespace UnifiedUserOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<UnifiedUserOutputCreatedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedUserOutputCreatedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedUserOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<UnifiedUserOutputModifiedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedUserOutputModifiedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedUserOutput$ {
    export const inboundSchema: z.ZodType<UnifiedUserOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            email: z.string(),
            is_me: z.boolean(),
            field_mappings: z.lazy(() => UnifiedUserOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedUserOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedUserOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedUserOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                is_me: "isMe",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name: string;
        email: string;
        is_me: boolean;
        field_mappings: UnifiedUserOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedUserOutputRemoteData$.Outbound;
        created_at: UnifiedUserOutputCreatedAt$.Outbound;
        modified_at: UnifiedUserOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedUserOutput> = z
        .object({
            name: z.string(),
            email: z.string(),
            isMe: z.boolean(),
            fieldMappings: z.lazy(() => UnifiedUserOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedUserOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedUserOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedUserOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                isMe: "is_me",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
