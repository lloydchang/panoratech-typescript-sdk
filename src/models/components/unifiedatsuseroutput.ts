/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The access role of the user
 */
export enum AccessRole {
    SuperAdmin = "SUPER_ADMIN",
    Admin = "ADMIN",
    TeamMember = "TEAM_MEMBER",
    LimitedTeamMember = "LIMITED_TEAM_MEMBER",
    Interviewer = "INTERVIEWER",
}

export type UnifiedAtsUserOutput = {
    /**
     * The first name of the user
     */
    firstName?: string | null | undefined;
    /**
     * The last name of the user
     */
    lastName?: string | null | undefined;
    /**
     * The email of the user
     */
    email?: string | null | undefined;
    /**
     * Whether the user is disabled
     */
    disabled?: boolean | null | undefined;
    /**
     * The access role of the user
     */
    accessRole?: AccessRole | null | undefined;
    /**
     * The remote creation date of the user
     */
    remoteCreatedAt?: Date | null | undefined;
    /**
     * The remote modification date of the user
     */
    remoteModifiedAt?: Date | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: { [k: string]: any } | null | undefined;
    /**
     * The UUID of the user
     */
    id?: string | null | undefined;
    /**
     * The remote ID of the user in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the user in the context of the 3rd Party
     */
    remoteData?: { [k: string]: any } | null | undefined;
    /**
     * The created date of the object
     */
    createdAt?: Date | null | undefined;
    /**
     * The modified date of the object
     */
    modifiedAt?: Date | null | undefined;
};

/** @internal */
export const AccessRole$inboundSchema: z.ZodNativeEnum<typeof AccessRole> =
    z.nativeEnum(AccessRole);

/** @internal */
export const AccessRole$outboundSchema: z.ZodNativeEnum<typeof AccessRole> =
    AccessRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessRole$ {
    /** @deprecated use `AccessRole$inboundSchema` instead. */
    export const inboundSchema = AccessRole$inboundSchema;
    /** @deprecated use `AccessRole$outboundSchema` instead. */
    export const outboundSchema = AccessRole$outboundSchema;
}

/** @internal */
export const UnifiedAtsUserOutput$inboundSchema: z.ZodType<
    UnifiedAtsUserOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        first_name: z.nullable(z.string()).optional(),
        last_name: z.nullable(z.string()).optional(),
        email: z.nullable(z.string()).optional(),
        disabled: z.nullable(z.boolean()).optional(),
        access_role: z.nullable(AccessRole$inboundSchema).optional(),
        remote_created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        remote_modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        field_mappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z.nullable(z.record(z.any())).optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            first_name: "firstName",
            last_name: "lastName",
            access_role: "accessRole",
            remote_created_at: "remoteCreatedAt",
            remote_modified_at: "remoteModifiedAt",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedAtsUserOutput$Outbound = {
    first_name?: string | null | undefined;
    last_name?: string | null | undefined;
    email?: string | null | undefined;
    disabled?: boolean | null | undefined;
    access_role?: string | null | undefined;
    remote_created_at?: string | null | undefined;
    remote_modified_at?: string | null | undefined;
    field_mappings?: { [k: string]: any } | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: { [k: string]: any } | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAtsUserOutput$outboundSchema: z.ZodType<
    UnifiedAtsUserOutput$Outbound,
    z.ZodTypeDef,
    UnifiedAtsUserOutput
> = z
    .object({
        firstName: z.nullable(z.string()).optional(),
        lastName: z.nullable(z.string()).optional(),
        email: z.nullable(z.string()).optional(),
        disabled: z.nullable(z.boolean()).optional(),
        accessRole: z.nullable(AccessRole$outboundSchema).optional(),
        remoteCreatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        remoteModifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        fieldMappings: z.nullable(z.record(z.any())).optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z.nullable(z.record(z.any())).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            firstName: "first_name",
            lastName: "last_name",
            accessRole: "access_role",
            remoteCreatedAt: "remote_created_at",
            remoteModifiedAt: "remote_modified_at",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAtsUserOutput$ {
    /** @deprecated use `UnifiedAtsUserOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedAtsUserOutput$inboundSchema;
    /** @deprecated use `UnifiedAtsUserOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedAtsUserOutput$outboundSchema;
    /** @deprecated use `UnifiedAtsUserOutput$Outbound` instead. */
    export type Outbound = UnifiedAtsUserOutput$Outbound;
}
