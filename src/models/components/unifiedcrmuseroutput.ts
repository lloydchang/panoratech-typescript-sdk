/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedCrmUserOutputFieldMappings = {};

export type UnifiedCrmUserOutputRemoteData = {};

export type UnifiedCrmUserOutputCreatedAt = {};

export type UnifiedCrmUserOutputModifiedAt = {};

export type UnifiedCrmUserOutput = {
    /**
     * The name of the user
     */
    name: string;
    /**
     * The email of the user
     */
    email: string;
    fieldMappings: UnifiedCrmUserOutputFieldMappings;
    /**
     * The UUID of the user
     */
    id?: string | undefined;
    /**
     * The id of the user in the context of the Crm 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedCrmUserOutputRemoteData;
    createdAt: UnifiedCrmUserOutputCreatedAt;
    modifiedAt: UnifiedCrmUserOutputModifiedAt;
};

/** @internal */
export namespace UnifiedCrmUserOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedCrmUserOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedCrmUserOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedCrmUserOutputRemoteData$ {
    export const inboundSchema: z.ZodType<UnifiedCrmUserOutputRemoteData, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmUserOutputRemoteData> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmUserOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<UnifiedCrmUserOutputCreatedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmUserOutputCreatedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmUserOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<UnifiedCrmUserOutputModifiedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmUserOutputModifiedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmUserOutput$ {
    export const inboundSchema: z.ZodType<UnifiedCrmUserOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            email: z.string(),
            field_mappings: z.lazy(() => UnifiedCrmUserOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedCrmUserOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedCrmUserOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedCrmUserOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name: string;
        email: string;
        field_mappings: UnifiedCrmUserOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedCrmUserOutputRemoteData$.Outbound;
        created_at: UnifiedCrmUserOutputCreatedAt$.Outbound;
        modified_at: UnifiedCrmUserOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmUserOutput> = z
        .object({
            name: z.string(),
            email: z.string(),
            fieldMappings: z.lazy(() => UnifiedCrmUserOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedCrmUserOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedCrmUserOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedCrmUserOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
