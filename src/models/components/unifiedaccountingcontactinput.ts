/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingContactInputFieldMappings = {};

export type UnifiedAccountingContactInput = {
    /**
     * The name of the contact
     */
    name?: string | null | undefined;
    /**
     * Indicates if the contact is a supplier
     */
    isSupplier?: boolean | null | undefined;
    /**
     * Indicates if the contact is a customer
     */
    isCustomer?: boolean | null | undefined;
    /**
     * The email address of the contact
     */
    emailAddress?: string | null | undefined;
    /**
     * The tax number of the contact
     */
    taxNumber?: string | null | undefined;
    /**
     * The status of the contact
     */
    status?: string | null | undefined;
    /**
     * The currency associated with the contact
     */
    currency?: string | null | undefined;
    /**
     * The date when the contact was last updated in the remote system
     */
    remoteUpdatedAt?: string | null | undefined;
    /**
     * The UUID of the associated company info
     */
    companyInfoId?: string | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedAccountingContactInputFieldMappings | null | undefined;
};

/** @internal */
export const UnifiedAccountingContactInputFieldMappings$inboundSchema: z.ZodType<
    UnifiedAccountingContactInputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingContactInputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingContactInputFieldMappings$outboundSchema: z.ZodType<
    UnifiedAccountingContactInputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingContactInputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingContactInputFieldMappings$ {
    /** @deprecated use `UnifiedAccountingContactInputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingContactInputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedAccountingContactInputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingContactInputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedAccountingContactInputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedAccountingContactInputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingContactInput$inboundSchema: z.ZodType<
    UnifiedAccountingContactInput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()).optional(),
        is_supplier: z.nullable(z.boolean()).optional(),
        is_customer: z.nullable(z.boolean()).optional(),
        email_address: z.nullable(z.string()).optional(),
        tax_number: z.nullable(z.string()).optional(),
        status: z.nullable(z.string()).optional(),
        currency: z.nullable(z.string()).optional(),
        remote_updated_at: z.nullable(z.string()).optional(),
        company_info_id: z.nullable(z.string()).optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedAccountingContactInputFieldMappings$inboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            is_supplier: "isSupplier",
            is_customer: "isCustomer",
            email_address: "emailAddress",
            tax_number: "taxNumber",
            remote_updated_at: "remoteUpdatedAt",
            company_info_id: "companyInfoId",
            field_mappings: "fieldMappings",
        });
    });

/** @internal */
export type UnifiedAccountingContactInput$Outbound = {
    name?: string | null | undefined;
    is_supplier?: boolean | null | undefined;
    is_customer?: boolean | null | undefined;
    email_address?: string | null | undefined;
    tax_number?: string | null | undefined;
    status?: string | null | undefined;
    currency?: string | null | undefined;
    remote_updated_at?: string | null | undefined;
    company_info_id?: string | null | undefined;
    field_mappings?: UnifiedAccountingContactInputFieldMappings$Outbound | null | undefined;
};

/** @internal */
export const UnifiedAccountingContactInput$outboundSchema: z.ZodType<
    UnifiedAccountingContactInput$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingContactInput
> = z
    .object({
        name: z.nullable(z.string()).optional(),
        isSupplier: z.nullable(z.boolean()).optional(),
        isCustomer: z.nullable(z.boolean()).optional(),
        emailAddress: z.nullable(z.string()).optional(),
        taxNumber: z.nullable(z.string()).optional(),
        status: z.nullable(z.string()).optional(),
        currency: z.nullable(z.string()).optional(),
        remoteUpdatedAt: z.nullable(z.string()).optional(),
        companyInfoId: z.nullable(z.string()).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedAccountingContactInputFieldMappings$outboundSchema))
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            isSupplier: "is_supplier",
            isCustomer: "is_customer",
            emailAddress: "email_address",
            taxNumber: "tax_number",
            remoteUpdatedAt: "remote_updated_at",
            companyInfoId: "company_info_id",
            fieldMappings: "field_mappings",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingContactInput$ {
    /** @deprecated use `UnifiedAccountingContactInput$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingContactInput$inboundSchema;
    /** @deprecated use `UnifiedAccountingContactInput$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingContactInput$outboundSchema;
    /** @deprecated use `UnifiedAccountingContactInput$Outbound` instead. */
    export type Outbound = UnifiedAccountingContactInput$Outbound;
}
