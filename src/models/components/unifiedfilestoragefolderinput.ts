/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UnifiedFilestorageFolderInput = {
  /**
   * The name of the folder
   */
  name: string | null;
  /**
   * The size of the folder
   */
  size: string | null;
  /**
   * The url of the folder
   */
  folderUrl: string | null;
  /**
   * The description of the folder
   */
  description: string;
  /**
   * The UUID of the drive tied to the folder
   */
  driveId: string | null;
  /**
   * The UUID of the parent folder
   */
  parentFolderId: string | null;
  /**
   * The UUID of the shared link tied to the folder
   */
  sharedLink: string | null;
  /**
   * The UUID of the permission tied to the folder
   */
  permission: string | null;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedFilestorageFolderInput$inboundSchema: z.ZodType<
  UnifiedFilestorageFolderInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()),
  size: z.nullable(z.string()),
  folder_url: z.nullable(z.string()),
  description: z.string(),
  drive_id: z.nullable(z.string()),
  parent_folder_id: z.nullable(z.string()),
  shared_link: z.nullable(z.string()),
  permission: z.nullable(z.string()),
  field_mappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "folder_url": "folderUrl",
    "drive_id": "driveId",
    "parent_folder_id": "parentFolderId",
    "shared_link": "sharedLink",
    "field_mappings": "fieldMappings",
  });
});

/** @internal */
export type UnifiedFilestorageFolderInput$Outbound = {
  name: string | null;
  size: string | null;
  folder_url: string | null;
  description: string;
  drive_id: string | null;
  parent_folder_id: string | null;
  shared_link: string | null;
  permission: string | null;
  field_mappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedFilestorageFolderInput$outboundSchema: z.ZodType<
  UnifiedFilestorageFolderInput$Outbound,
  z.ZodTypeDef,
  UnifiedFilestorageFolderInput
> = z.object({
  name: z.nullable(z.string()),
  size: z.nullable(z.string()),
  folderUrl: z.nullable(z.string()),
  description: z.string(),
  driveId: z.nullable(z.string()),
  parentFolderId: z.nullable(z.string()),
  sharedLink: z.nullable(z.string()),
  permission: z.nullable(z.string()),
  fieldMappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    folderUrl: "folder_url",
    driveId: "drive_id",
    parentFolderId: "parent_folder_id",
    sharedLink: "shared_link",
    fieldMappings: "field_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedFilestorageFolderInput$ {
  /** @deprecated use `UnifiedFilestorageFolderInput$inboundSchema` instead. */
  export const inboundSchema = UnifiedFilestorageFolderInput$inboundSchema;
  /** @deprecated use `UnifiedFilestorageFolderInput$outboundSchema` instead. */
  export const outboundSchema = UnifiedFilestorageFolderInput$outboundSchema;
  /** @deprecated use `UnifiedFilestorageFolderInput$Outbound` instead. */
  export type Outbound = UnifiedFilestorageFolderInput$Outbound;
}
