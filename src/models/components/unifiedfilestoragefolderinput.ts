/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedFilestorageFolderInputFieldMappings = {};

export type UnifiedFilestorageFolderInput = {
    /**
     * The name of the folder
     */
    name: string;
    /**
     * The size of the folder
     */
    size: string;
    /**
     * The url of the folder
     */
    folderUrl: string;
    /**
     * The description of the folder
     */
    description: string;
    /**
     * The UUID of the drive tied to the folder
     */
    driveId: string;
    /**
     * The UUID of the parent folder
     */
    parentFolderId: string;
    /**
     * The UUID of the shared link tied to the folder
     */
    sharedLink: string;
    /**
     * The UUID of the permission tied to the folder
     */
    permission: string;
    fieldMappings: UnifiedFilestorageFolderInputFieldMappings;
};

/** @internal */
export namespace UnifiedFilestorageFolderInputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageFolderInputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageFolderInputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageFolderInput$ {
    export const inboundSchema: z.ZodType<UnifiedFilestorageFolderInput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            size: z.string(),
            folder_url: z.string(),
            description: z.string(),
            drive_id: z.string(),
            parent_folder_id: z.string(),
            shared_link: z.string(),
            permission: z.string(),
            field_mappings: z.lazy(() => UnifiedFilestorageFolderInputFieldMappings$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                folder_url: "folderUrl",
                drive_id: "driveId",
                parent_folder_id: "parentFolderId",
                shared_link: "sharedLink",
                field_mappings: "fieldMappings",
            });
        });

    export type Outbound = {
        name: string;
        size: string;
        folder_url: string;
        description: string;
        drive_id: string;
        parent_folder_id: string;
        shared_link: string;
        permission: string;
        field_mappings: UnifiedFilestorageFolderInputFieldMappings$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedFilestorageFolderInput> =
        z
            .object({
                name: z.string(),
                size: z.string(),
                folderUrl: z.string(),
                description: z.string(),
                driveId: z.string(),
                parentFolderId: z.string(),
                sharedLink: z.string(),
                permission: z.string(),
                fieldMappings: z.lazy(
                    () => UnifiedFilestorageFolderInputFieldMappings$.outboundSchema
                ),
            })
            .transform((v) => {
                return remap$(v, {
                    folderUrl: "folder_url",
                    driveId: "drive_id",
                    parentFolderId: "parent_folder_id",
                    sharedLink: "shared_link",
                    fieldMappings: "field_mappings",
                });
            });
}
