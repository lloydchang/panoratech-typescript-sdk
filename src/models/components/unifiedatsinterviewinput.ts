/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UnifiedAtsInterviewInput = {
  /**
   * The status of the interview
   */
  status?: string | null | undefined;
  /**
   * The UUID of the application
   */
  applicationId?: string | null | undefined;
  /**
   * The UUID of the job interview stage
   */
  jobInterviewStageId?: string | null | undefined;
  /**
   * The UUID of the organizer
   */
  organizedBy?: string | null | undefined;
  /**
   * The UUIDs of the interviewers
   */
  interviewers?: Array<string> | null | undefined;
  /**
   * The location of the interview
   */
  location?: string | null | undefined;
  /**
   * The start date and time of the interview
   */
  startAt?: Date | null | undefined;
  /**
   * The end date and time of the interview
   */
  endAt?: Date | null | undefined;
  /**
   * The remote creation date of the interview
   */
  remoteCreatedAt?: Date | null | undefined;
  /**
   * The remote modification date of the interview
   */
  remoteUpdatedAt?: Date | null | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedAtsInterviewInput$inboundSchema: z.ZodType<
  UnifiedAtsInterviewInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.nullable(z.string()).optional(),
  application_id: z.nullable(z.string()).optional(),
  job_interview_stage_id: z.nullable(z.string()).optional(),
  organized_by: z.nullable(z.string()).optional(),
  interviewers: z.nullable(z.array(z.string())).optional(),
  location: z.nullable(z.string()).optional(),
  start_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  field_mappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "job_interview_stage_id": "jobInterviewStageId",
    "organized_by": "organizedBy",
    "start_at": "startAt",
    "end_at": "endAt",
    "remote_created_at": "remoteCreatedAt",
    "remote_updated_at": "remoteUpdatedAt",
    "field_mappings": "fieldMappings",
  });
});

/** @internal */
export type UnifiedAtsInterviewInput$Outbound = {
  status?: string | null | undefined;
  application_id?: string | null | undefined;
  job_interview_stage_id?: string | null | undefined;
  organized_by?: string | null | undefined;
  interviewers?: Array<string> | null | undefined;
  location?: string | null | undefined;
  start_at?: string | null | undefined;
  end_at?: string | null | undefined;
  remote_created_at?: string | null | undefined;
  remote_updated_at?: string | null | undefined;
  field_mappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedAtsInterviewInput$outboundSchema: z.ZodType<
  UnifiedAtsInterviewInput$Outbound,
  z.ZodTypeDef,
  UnifiedAtsInterviewInput
> = z.object({
  status: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  jobInterviewStageId: z.nullable(z.string()).optional(),
  organizedBy: z.nullable(z.string()).optional(),
  interviewers: z.nullable(z.array(z.string())).optional(),
  location: z.nullable(z.string()).optional(),
  startAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  remoteCreatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  remoteUpdatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  fieldMappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    jobInterviewStageId: "job_interview_stage_id",
    organizedBy: "organized_by",
    startAt: "start_at",
    endAt: "end_at",
    remoteCreatedAt: "remote_created_at",
    remoteUpdatedAt: "remote_updated_at",
    fieldMappings: "field_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAtsInterviewInput$ {
  /** @deprecated use `UnifiedAtsInterviewInput$inboundSchema` instead. */
  export const inboundSchema = UnifiedAtsInterviewInput$inboundSchema;
  /** @deprecated use `UnifiedAtsInterviewInput$outboundSchema` instead. */
  export const outboundSchema = UnifiedAtsInterviewInput$outboundSchema;
  /** @deprecated use `UnifiedAtsInterviewInput$Outbound` instead. */
  export type Outbound = UnifiedAtsInterviewInput$Outbound;
}
