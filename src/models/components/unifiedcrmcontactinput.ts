/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  Email,
  Email$inboundSchema,
  Email$Outbound,
  Email$outboundSchema,
} from "./email.js";
import {
  Phone,
  Phone$inboundSchema,
  Phone$Outbound,
  Phone$outboundSchema,
} from "./phone.js";

export type UnifiedCrmContactInput = {
  /**
   * The first name of the contact
   */
  firstName: string | null;
  /**
   * The last name of the contact
   */
  lastName: string | null;
  /**
   * The email addresses of the contact
   */
  emailAddresses?: Array<Email> | null | undefined;
  /**
   * The phone numbers of the contact
   */
  phoneNumbers?: Array<Phone> | null | undefined;
  /**
   * The addresses of the contact
   */
  addresses?: Array<Address> | null | undefined;
  /**
   * The UUID of the user who owns the contact
   */
  userId?: string | null | undefined;
  /**
   * The custom field mappings of the contact between the remote 3rd party & Panora
   */
  fieldMappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedCrmContactInput$inboundSchema: z.ZodType<
  UnifiedCrmContactInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.nullable(z.string()),
  last_name: z.nullable(z.string()),
  email_addresses: z.nullable(z.array(Email$inboundSchema)).optional(),
  phone_numbers: z.nullable(z.array(Phone$inboundSchema)).optional(),
  addresses: z.nullable(z.array(Address$inboundSchema)).optional(),
  user_id: z.nullable(z.string()).optional(),
  field_mappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "email_addresses": "emailAddresses",
    "phone_numbers": "phoneNumbers",
    "user_id": "userId",
    "field_mappings": "fieldMappings",
  });
});

/** @internal */
export type UnifiedCrmContactInput$Outbound = {
  first_name: string | null;
  last_name: string | null;
  email_addresses?: Array<Email$Outbound> | null | undefined;
  phone_numbers?: Array<Phone$Outbound> | null | undefined;
  addresses?: Array<Address$Outbound> | null | undefined;
  user_id?: string | null | undefined;
  field_mappings?: { [k: string]: any } | null | undefined;
};

/** @internal */
export const UnifiedCrmContactInput$outboundSchema: z.ZodType<
  UnifiedCrmContactInput$Outbound,
  z.ZodTypeDef,
  UnifiedCrmContactInput
> = z.object({
  firstName: z.nullable(z.string()),
  lastName: z.nullable(z.string()),
  emailAddresses: z.nullable(z.array(Email$outboundSchema)).optional(),
  phoneNumbers: z.nullable(z.array(Phone$outboundSchema)).optional(),
  addresses: z.nullable(z.array(Address$outboundSchema)).optional(),
  userId: z.nullable(z.string()).optional(),
  fieldMappings: z.nullable(z.record(z.any())).optional(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    emailAddresses: "email_addresses",
    phoneNumbers: "phone_numbers",
    userId: "user_id",
    fieldMappings: "field_mappings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedCrmContactInput$ {
  /** @deprecated use `UnifiedCrmContactInput$inboundSchema` instead. */
  export const inboundSchema = UnifiedCrmContactInput$inboundSchema;
  /** @deprecated use `UnifiedCrmContactInput$outboundSchema` instead. */
  export const outboundSchema = UnifiedCrmContactInput$outboundSchema;
  /** @deprecated use `UnifiedCrmContactInput$Outbound` instead. */
  export type Outbound = UnifiedCrmContactInput$Outbound;
}

export function unifiedCrmContactInputToJSON(
  unifiedCrmContactInput: UnifiedCrmContactInput,
): string {
  return JSON.stringify(
    UnifiedCrmContactInput$outboundSchema.parse(unifiedCrmContactInput),
  );
}

export function unifiedCrmContactInputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedCrmContactInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedCrmContactInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedCrmContactInput' from JSON`,
  );
}
