/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTicketingTeamOutputFieldMappings = {};

export type UnifiedTicketingTeamOutputRemoteData = {};

export type UnifiedTicketingTeamOutputCreatedAt = {};

export type UnifiedTicketingTeamOutputModifiedAt = {};

export type UnifiedTicketingTeamOutput = {
    /**
     * The name of the team
     */
    name: string;
    /**
     * The description of the team
     */
    description?: string | undefined;
    fieldMappings: UnifiedTicketingTeamOutputFieldMappings;
    /**
     * The UUID of the team
     */
    id?: string | undefined;
    /**
     * The id of the team in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedTicketingTeamOutputRemoteData;
    createdAt: UnifiedTicketingTeamOutputCreatedAt;
    modifiedAt: UnifiedTicketingTeamOutputModifiedAt;
};

/** @internal */
export namespace UnifiedTicketingTeamOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingTeamOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingTeamOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingTeamOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingTeamOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingTeamOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingTeamOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingTeamOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingTeamOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingTeamOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingTeamOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingTeamOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingTeamOutput$ {
    export const inboundSchema: z.ZodType<UnifiedTicketingTeamOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            description: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedTicketingTeamOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedTicketingTeamOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedTicketingTeamOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedTicketingTeamOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name: string;
        description?: string | undefined;
        field_mappings: UnifiedTicketingTeamOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedTicketingTeamOutputRemoteData$.Outbound;
        created_at: UnifiedTicketingTeamOutputCreatedAt$.Outbound;
        modified_at: UnifiedTicketingTeamOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedTicketingTeamOutput> = z
        .object({
            name: z.string(),
            description: z.string().optional(),
            fieldMappings: z.lazy(() => UnifiedTicketingTeamOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedTicketingTeamOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedTicketingTeamOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedTicketingTeamOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
