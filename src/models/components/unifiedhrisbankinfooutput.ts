/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type FieldMappings = {};

/**
 * The remote data of the bank info in the context of the 3rd Party
 */
export type RemoteData = {};

export type UnifiedHrisBankinfoOutput = {
  /**
   * The type of the bank account
   */
  accountType?: string | null | undefined;
  /**
   * The name of the bank
   */
  bankName?: string | null | undefined;
  /**
   * The account number
   */
  accountNumber?: string | null | undefined;
  /**
   * The routing number of the bank
   */
  routingNumber?: string | null | undefined;
  /**
   * The UUID of the associated employee
   */
  employeeId?: string | null | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?: FieldMappings | null | undefined;
  /**
   * The UUID of the bank info record
   */
  id: string | null;
  /**
   * The remote ID of the bank info in the context of the 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The remote data of the bank info in the context of the 3rd Party
   */
  remoteData?: RemoteData | null | undefined;
  /**
   * The date when the bank info was created in the 3rd party system
   */
  remoteCreatedAt?: Date | null | undefined;
  /**
   * The created date of the bank info record
   */
  createdAt: Date | null;
  /**
   * The last modified date of the bank info record
   */
  modifiedAt: Date | null;
  /**
   * Indicates if the bank info was deleted in the remote system
   */
  remoteWasDeleted: boolean | null;
};

/** @internal */
export const FieldMappings$inboundSchema: z.ZodType<
  FieldMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FieldMappings$Outbound = {};

/** @internal */
export const FieldMappings$outboundSchema: z.ZodType<
  FieldMappings$Outbound,
  z.ZodTypeDef,
  FieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMappings$ {
  /** @deprecated use `FieldMappings$inboundSchema` instead. */
  export const inboundSchema = FieldMappings$inboundSchema;
  /** @deprecated use `FieldMappings$outboundSchema` instead. */
  export const outboundSchema = FieldMappings$outboundSchema;
  /** @deprecated use `FieldMappings$Outbound` instead. */
  export type Outbound = FieldMappings$Outbound;
}

/** @internal */
export const RemoteData$inboundSchema: z.ZodType<
  RemoteData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RemoteData$Outbound = {};

/** @internal */
export const RemoteData$outboundSchema: z.ZodType<
  RemoteData$Outbound,
  z.ZodTypeDef,
  RemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteData$ {
  /** @deprecated use `RemoteData$inboundSchema` instead. */
  export const inboundSchema = RemoteData$inboundSchema;
  /** @deprecated use `RemoteData$outboundSchema` instead. */
  export const outboundSchema = RemoteData$outboundSchema;
  /** @deprecated use `RemoteData$Outbound` instead. */
  export type Outbound = RemoteData$Outbound;
}

/** @internal */
export const UnifiedHrisBankinfoOutput$inboundSchema: z.ZodType<
  UnifiedHrisBankinfoOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_type: z.nullable(z.string()).optional(),
  bank_name: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  routing_number: z.nullable(z.string()).optional(),
  employee_id: z.nullable(z.string()).optional(),
  field_mappings: z.nullable(z.lazy(() => FieldMappings$inboundSchema))
    .optional(),
  id: z.nullable(z.string()),
  remote_id: z.nullable(z.string()).optional(),
  remote_data: z.nullable(z.lazy(() => RemoteData$inboundSchema)).optional(),
  remote_created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  remote_was_deleted: z.nullable(z.boolean()),
}).transform((v) => {
  return remap$(v, {
    "account_type": "accountType",
    "bank_name": "bankName",
    "account_number": "accountNumber",
    "routing_number": "routingNumber",
    "employee_id": "employeeId",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_data": "remoteData",
    "remote_created_at": "remoteCreatedAt",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "remote_was_deleted": "remoteWasDeleted",
  });
});

/** @internal */
export type UnifiedHrisBankinfoOutput$Outbound = {
  account_type?: string | null | undefined;
  bank_name?: string | null | undefined;
  account_number?: string | null | undefined;
  routing_number?: string | null | undefined;
  employee_id?: string | null | undefined;
  field_mappings?: FieldMappings$Outbound | null | undefined;
  id: string | null;
  remote_id?: string | null | undefined;
  remote_data?: RemoteData$Outbound | null | undefined;
  remote_created_at?: string | null | undefined;
  created_at: string | null;
  modified_at: string | null;
  remote_was_deleted: boolean | null;
};

/** @internal */
export const UnifiedHrisBankinfoOutput$outboundSchema: z.ZodType<
  UnifiedHrisBankinfoOutput$Outbound,
  z.ZodTypeDef,
  UnifiedHrisBankinfoOutput
> = z.object({
  accountType: z.nullable(z.string()).optional(),
  bankName: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  routingNumber: z.nullable(z.string()).optional(),
  employeeId: z.nullable(z.string()).optional(),
  fieldMappings: z.nullable(z.lazy(() => FieldMappings$outboundSchema))
    .optional(),
  id: z.nullable(z.string()),
  remoteId: z.nullable(z.string()).optional(),
  remoteData: z.nullable(z.lazy(() => RemoteData$outboundSchema)).optional(),
  remoteCreatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  remoteWasDeleted: z.nullable(z.boolean()),
}).transform((v) => {
  return remap$(v, {
    accountType: "account_type",
    bankName: "bank_name",
    accountNumber: "account_number",
    routingNumber: "routing_number",
    employeeId: "employee_id",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteData: "remote_data",
    remoteCreatedAt: "remote_created_at",
    createdAt: "created_at",
    modifiedAt: "modified_at",
    remoteWasDeleted: "remote_was_deleted",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisBankinfoOutput$ {
  /** @deprecated use `UnifiedHrisBankinfoOutput$inboundSchema` instead. */
  export const inboundSchema = UnifiedHrisBankinfoOutput$inboundSchema;
  /** @deprecated use `UnifiedHrisBankinfoOutput$outboundSchema` instead. */
  export const outboundSchema = UnifiedHrisBankinfoOutput$outboundSchema;
  /** @deprecated use `UnifiedHrisBankinfoOutput$Outbound` instead. */
  export type Outbound = UnifiedHrisBankinfoOutput$Outbound;
}
