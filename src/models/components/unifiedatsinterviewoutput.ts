/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UnifiedAtsInterviewOutput = {
  /**
   * The status of the interview
   */
  status?: string | null | undefined;
  /**
   * The UUID of the application
   */
  applicationId?: string | null | undefined;
  /**
   * The UUID of the job interview stage
   */
  jobInterviewStageId?: string | null | undefined;
  /**
   * The UUID of the organizer
   */
  organizedBy?: string | null | undefined;
  /**
   * The UUIDs of the interviewers
   */
  interviewers?: Array<string> | null | undefined;
  /**
   * The location of the interview
   */
  location?: string | null | undefined;
  /**
   * The start date and time of the interview
   */
  startAt?: Date | null | undefined;
  /**
   * The end date and time of the interview
   */
  endAt?: Date | null | undefined;
  /**
   * The remote creation date of the interview
   */
  remoteCreatedAt?: Date | null | undefined;
  /**
   * The remote modification date of the interview
   */
  remoteUpdatedAt?: Date | null | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?: { [k: string]: any } | null | undefined;
  /**
   * The UUID of the interview
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the interview in the context of the 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The remote data of the interview in the context of the 3rd Party
   */
  remoteData?: { [k: string]: any } | null | undefined;
  /**
   * The created date of the object
   */
  createdAt?: Date | null | undefined;
  /**
   * The modified date of the object
   */
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAtsInterviewOutput$inboundSchema: z.ZodType<
  UnifiedAtsInterviewOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.nullable(z.string()).optional(),
  application_id: z.nullable(z.string()).optional(),
  job_interview_stage_id: z.nullable(z.string()).optional(),
  organized_by: z.nullable(z.string()).optional(),
  interviewers: z.nullable(z.array(z.string())).optional(),
  location: z.nullable(z.string()).optional(),
  start_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  field_mappings: z.nullable(z.record(z.any())).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_data: z.nullable(z.record(z.any())).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "application_id": "applicationId",
    "job_interview_stage_id": "jobInterviewStageId",
    "organized_by": "organizedBy",
    "start_at": "startAt",
    "end_at": "endAt",
    "remote_created_at": "remoteCreatedAt",
    "remote_updated_at": "remoteUpdatedAt",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_data": "remoteData",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedAtsInterviewOutput$Outbound = {
  status?: string | null | undefined;
  application_id?: string | null | undefined;
  job_interview_stage_id?: string | null | undefined;
  organized_by?: string | null | undefined;
  interviewers?: Array<string> | null | undefined;
  location?: string | null | undefined;
  start_at?: string | null | undefined;
  end_at?: string | null | undefined;
  remote_created_at?: string | null | undefined;
  remote_updated_at?: string | null | undefined;
  field_mappings?: { [k: string]: any } | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_data?: { [k: string]: any } | null | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAtsInterviewOutput$outboundSchema: z.ZodType<
  UnifiedAtsInterviewOutput$Outbound,
  z.ZodTypeDef,
  UnifiedAtsInterviewOutput
> = z.object({
  status: z.nullable(z.string()).optional(),
  applicationId: z.nullable(z.string()).optional(),
  jobInterviewStageId: z.nullable(z.string()).optional(),
  organizedBy: z.nullable(z.string()).optional(),
  interviewers: z.nullable(z.array(z.string())).optional(),
  location: z.nullable(z.string()).optional(),
  startAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  endAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  remoteCreatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  remoteUpdatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  fieldMappings: z.nullable(z.record(z.any())).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteData: z.nullable(z.record(z.any())).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    applicationId: "application_id",
    jobInterviewStageId: "job_interview_stage_id",
    organizedBy: "organized_by",
    startAt: "start_at",
    endAt: "end_at",
    remoteCreatedAt: "remote_created_at",
    remoteUpdatedAt: "remote_updated_at",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteData: "remote_data",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAtsInterviewOutput$ {
  /** @deprecated use `UnifiedAtsInterviewOutput$inboundSchema` instead. */
  export const inboundSchema = UnifiedAtsInterviewOutput$inboundSchema;
  /** @deprecated use `UnifiedAtsInterviewOutput$outboundSchema` instead. */
  export const outboundSchema = UnifiedAtsInterviewOutput$outboundSchema;
  /** @deprecated use `UnifiedAtsInterviewOutput$Outbound` instead. */
  export type Outbound = UnifiedAtsInterviewOutput$Outbound;
}
