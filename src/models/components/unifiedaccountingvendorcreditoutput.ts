/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LineItem,
  LineItem$inboundSchema,
  LineItem$Outbound,
  LineItem$outboundSchema,
} from "./lineitem.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingVendorcreditOutputFieldMappings = {};

/**
 * The remote data of the vendor credit in the context of the 3rd Party
 */
export type UnifiedAccountingVendorcreditOutputRemoteData = {};

export type UnifiedAccountingVendorcreditOutput = {
  /**
   * The number of the vendor credit
   */
  number?: string | null | undefined;
  /**
   * The date of the transaction
   */
  transactionDate?: Date | null | undefined;
  /**
   * The UUID of the vendor associated with the credit
   */
  vendor?: string | null | undefined;
  /**
   * The total amount of the vendor credit
   */
  totalAmount?: string | null | undefined;
  /**
   * The currency of the vendor credit
   */
  currency?: string | null | undefined;
  /**
   * The exchange rate applied to the vendor credit
   */
  exchangeRate?: string | null | undefined;
  /**
   * The UUID of the associated company
   */
  companyId?: string | null | undefined;
  /**
   * The UUID of the tracking categories associated with the vendor credit
   */
  trackingCategories?: Array<string> | null | undefined;
  /**
   * The UUID of the associated accounting period
   */
  accountingPeriodId?: string | null | undefined;
  /**
   * The line items associated with this vendor credit
   */
  lineItems?: Array<LineItem> | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?:
    | UnifiedAccountingVendorcreditOutputFieldMappings
    | null
    | undefined;
  /**
   * The UUID of the vendor credit record
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the vendor credit
   */
  remoteId?: string | null | undefined;
  /**
   * The created date of the vendor credit
   */
  createdAt?: Date | undefined;
  /**
   * The last modified date of the vendor credit
   */
  modifiedAt?: Date | undefined;
  /**
   * The date when the vendor credit was last updated in the remote system
   */
  remoteUpdatedAt?: Date | null | undefined;
  /**
   * The remote data of the vendor credit in the context of the 3rd Party
   */
  remoteData?: UnifiedAccountingVendorcreditOutputRemoteData | null | undefined;
};

/** @internal */
export const UnifiedAccountingVendorcreditOutputFieldMappings$inboundSchema:
  z.ZodType<
    UnifiedAccountingVendorcreditOutputFieldMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingVendorcreditOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingVendorcreditOutputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedAccountingVendorcreditOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingVendorcreditOutputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingVendorcreditOutputFieldMappings$ {
  /** @deprecated use `UnifiedAccountingVendorcreditOutputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingVendorcreditOutputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedAccountingVendorcreditOutputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingVendorcreditOutputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedAccountingVendorcreditOutputFieldMappings$Outbound` instead. */
  export type Outbound =
    UnifiedAccountingVendorcreditOutputFieldMappings$Outbound;
}

export function unifiedAccountingVendorcreditOutputFieldMappingsToJSON(
  unifiedAccountingVendorcreditOutputFieldMappings:
    UnifiedAccountingVendorcreditOutputFieldMappings,
): string {
  return JSON.stringify(
    UnifiedAccountingVendorcreditOutputFieldMappings$outboundSchema.parse(
      unifiedAccountingVendorcreditOutputFieldMappings,
    ),
  );
}

export function unifiedAccountingVendorcreditOutputFieldMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedAccountingVendorcreditOutputFieldMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingVendorcreditOutputFieldMappings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedAccountingVendorcreditOutputFieldMappings' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingVendorcreditOutputRemoteData$inboundSchema:
  z.ZodType<
    UnifiedAccountingVendorcreditOutputRemoteData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedAccountingVendorcreditOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingVendorcreditOutputRemoteData$outboundSchema:
  z.ZodType<
    UnifiedAccountingVendorcreditOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingVendorcreditOutputRemoteData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingVendorcreditOutputRemoteData$ {
  /** @deprecated use `UnifiedAccountingVendorcreditOutputRemoteData$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingVendorcreditOutputRemoteData$inboundSchema;
  /** @deprecated use `UnifiedAccountingVendorcreditOutputRemoteData$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingVendorcreditOutputRemoteData$outboundSchema;
  /** @deprecated use `UnifiedAccountingVendorcreditOutputRemoteData$Outbound` instead. */
  export type Outbound = UnifiedAccountingVendorcreditOutputRemoteData$Outbound;
}

export function unifiedAccountingVendorcreditOutputRemoteDataToJSON(
  unifiedAccountingVendorcreditOutputRemoteData:
    UnifiedAccountingVendorcreditOutputRemoteData,
): string {
  return JSON.stringify(
    UnifiedAccountingVendorcreditOutputRemoteData$outboundSchema.parse(
      unifiedAccountingVendorcreditOutputRemoteData,
    ),
  );
}

export function unifiedAccountingVendorcreditOutputRemoteDataFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedAccountingVendorcreditOutputRemoteData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingVendorcreditOutputRemoteData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedAccountingVendorcreditOutputRemoteData' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingVendorcreditOutput$inboundSchema: z.ZodType<
  UnifiedAccountingVendorcreditOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  number: z.nullable(z.string()).optional(),
  transaction_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  vendor: z.nullable(z.string()).optional(),
  total_amount: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchange_rate: z.nullable(z.string()).optional(),
  company_id: z.nullable(z.string()).optional(),
  tracking_categories: z.nullable(z.array(z.string())).optional(),
  accounting_period_id: z.nullable(z.string()).optional(),
  line_items: z.array(LineItem$inboundSchema).optional(),
  field_mappings: z.nullable(
    z.lazy(() =>
      UnifiedAccountingVendorcreditOutputFieldMappings$inboundSchema
    ),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  modified_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  remote_updated_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  remote_data: z.nullable(
    z.lazy(() => UnifiedAccountingVendorcreditOutputRemoteData$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "transaction_date": "transactionDate",
    "total_amount": "totalAmount",
    "exchange_rate": "exchangeRate",
    "company_id": "companyId",
    "tracking_categories": "trackingCategories",
    "accounting_period_id": "accountingPeriodId",
    "line_items": "lineItems",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "remote_updated_at": "remoteUpdatedAt",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type UnifiedAccountingVendorcreditOutput$Outbound = {
  number?: string | null | undefined;
  transaction_date?: string | null | undefined;
  vendor?: string | null | undefined;
  total_amount?: string | null | undefined;
  currency?: string | null | undefined;
  exchange_rate?: string | null | undefined;
  company_id?: string | null | undefined;
  tracking_categories?: Array<string> | null | undefined;
  accounting_period_id?: string | null | undefined;
  line_items?: Array<LineItem$Outbound> | undefined;
  field_mappings?:
    | UnifiedAccountingVendorcreditOutputFieldMappings$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  created_at?: string | undefined;
  modified_at?: string | undefined;
  remote_updated_at?: string | null | undefined;
  remote_data?:
    | UnifiedAccountingVendorcreditOutputRemoteData$Outbound
    | null
    | undefined;
};

/** @internal */
export const UnifiedAccountingVendorcreditOutput$outboundSchema: z.ZodType<
  UnifiedAccountingVendorcreditOutput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingVendorcreditOutput
> = z.object({
  number: z.nullable(z.string()).optional(),
  transactionDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  vendor: z.nullable(z.string()).optional(),
  totalAmount: z.nullable(z.string()).optional(),
  currency: z.nullable(z.string()).optional(),
  exchangeRate: z.nullable(z.string()).optional(),
  companyId: z.nullable(z.string()).optional(),
  trackingCategories: z.nullable(z.array(z.string())).optional(),
  accountingPeriodId: z.nullable(z.string()).optional(),
  lineItems: z.array(LineItem$outboundSchema).optional(),
  fieldMappings: z.nullable(
    z.lazy(() =>
      UnifiedAccountingVendorcreditOutputFieldMappings$outboundSchema
    ),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  modifiedAt: z.date().transform(v => v.toISOString()).optional(),
  remoteUpdatedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  remoteData: z.nullable(
    z.lazy(() => UnifiedAccountingVendorcreditOutputRemoteData$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    transactionDate: "transaction_date",
    totalAmount: "total_amount",
    exchangeRate: "exchange_rate",
    companyId: "company_id",
    trackingCategories: "tracking_categories",
    accountingPeriodId: "accounting_period_id",
    lineItems: "line_items",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    createdAt: "created_at",
    modifiedAt: "modified_at",
    remoteUpdatedAt: "remote_updated_at",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingVendorcreditOutput$ {
  /** @deprecated use `UnifiedAccountingVendorcreditOutput$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedAccountingVendorcreditOutput$inboundSchema;
  /** @deprecated use `UnifiedAccountingVendorcreditOutput$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedAccountingVendorcreditOutput$outboundSchema;
  /** @deprecated use `UnifiedAccountingVendorcreditOutput$Outbound` instead. */
  export type Outbound = UnifiedAccountingVendorcreditOutput$Outbound;
}

export function unifiedAccountingVendorcreditOutputToJSON(
  unifiedAccountingVendorcreditOutput: UnifiedAccountingVendorcreditOutput,
): string {
  return JSON.stringify(
    UnifiedAccountingVendorcreditOutput$outboundSchema.parse(
      unifiedAccountingVendorcreditOutput,
    ),
  );
}

export function unifiedAccountingVendorcreditOutputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedAccountingVendorcreditOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedAccountingVendorcreditOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedAccountingVendorcreditOutput' from JSON`,
  );
}
