/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedFilestorageFileOutputFieldMappings = {};

export type UnifiedFilestorageFileOutputRemoteData = {};

export type UnifiedFilestorageFileOutputCreatedAt = {};

export type UnifiedFilestorageFileOutputModifiedAt = {};

export type UnifiedFilestorageFileOutput = {
    /**
     * The name of the file
     */
    name: string;
    /**
     * The url of the file
     */
    fileUrl: string;
    /**
     * The mime type of the file
     */
    mimeType: string;
    /**
     * The size of the file
     */
    size: string;
    /**
     * The UUID of the folder tied to the file
     */
    folderId: string;
    /**
     * The UUID of the permission tied to the file
     */
    permission: string;
    /**
     * The UUID of the shared link tied to the file
     */
    sharedLink: string;
    fieldMappings: UnifiedFilestorageFileOutputFieldMappings;
    /**
     * The UUID of the file
     */
    id?: string | undefined;
    /**
     * The id of the file in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedFilestorageFileOutputRemoteData;
    createdAt: UnifiedFilestorageFileOutputCreatedAt;
    modifiedAt: UnifiedFilestorageFileOutputModifiedAt;
};

/** @internal */
export namespace UnifiedFilestorageFileOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageFileOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageFileOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageFileOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageFileOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageFileOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageFileOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageFileOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageFileOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageFileOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedFilestorageFileOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedFilestorageFileOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedFilestorageFileOutput$ {
    export const inboundSchema: z.ZodType<UnifiedFilestorageFileOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            file_url: z.string(),
            mime_type: z.string(),
            size: z.string(),
            folder_id: z.string(),
            permission: z.string(),
            shared_link: z.string(),
            field_mappings: z.lazy(() => UnifiedFilestorageFileOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedFilestorageFileOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedFilestorageFileOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedFilestorageFileOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                file_url: "fileUrl",
                mime_type: "mimeType",
                folder_id: "folderId",
                shared_link: "sharedLink",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name: string;
        file_url: string;
        mime_type: string;
        size: string;
        folder_id: string;
        permission: string;
        shared_link: string;
        field_mappings: UnifiedFilestorageFileOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedFilestorageFileOutputRemoteData$.Outbound;
        created_at: UnifiedFilestorageFileOutputCreatedAt$.Outbound;
        modified_at: UnifiedFilestorageFileOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedFilestorageFileOutput> = z
        .object({
            name: z.string(),
            fileUrl: z.string(),
            mimeType: z.string(),
            size: z.string(),
            folderId: z.string(),
            permission: z.string(),
            sharedLink: z.string(),
            fieldMappings: z.lazy(() => UnifiedFilestorageFileOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedFilestorageFileOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedFilestorageFileOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedFilestorageFileOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                fileUrl: "file_url",
                mimeType: "mime_type",
                folderId: "folder_id",
                sharedLink: "shared_link",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
