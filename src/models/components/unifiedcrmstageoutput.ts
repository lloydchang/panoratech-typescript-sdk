/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedCrmStageOutputFieldMappings = {};

export type UnifiedCrmStageOutputRemoteData = {};

export type UnifiedCrmStageOutputCreatedAt = {};

export type UnifiedCrmStageOutputModifiedAt = {};

export type UnifiedCrmStageOutput = {
    /**
     * The name of the stage
     */
    stageName: string;
    fieldMappings: UnifiedCrmStageOutputFieldMappings;
    /**
     * The UUID of the stage
     */
    id?: string | undefined;
    /**
     * The id of the stage in the context of the Crm 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedCrmStageOutputRemoteData;
    createdAt: UnifiedCrmStageOutputCreatedAt;
    modifiedAt: UnifiedCrmStageOutputModifiedAt;
};

/** @internal */
export namespace UnifiedCrmStageOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedCrmStageOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedCrmStageOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedCrmStageOutputRemoteData$ {
    export const inboundSchema: z.ZodType<UnifiedCrmStageOutputRemoteData, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedCrmStageOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedCrmStageOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<UnifiedCrmStageOutputCreatedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmStageOutputCreatedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmStageOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<UnifiedCrmStageOutputModifiedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedCrmStageOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedCrmStageOutput$ {
    export const inboundSchema: z.ZodType<UnifiedCrmStageOutput, z.ZodTypeDef, unknown> = z
        .object({
            stage_name: z.string(),
            field_mappings: z.lazy(() => UnifiedCrmStageOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedCrmStageOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedCrmStageOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedCrmStageOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                stage_name: "stageName",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        stage_name: string;
        field_mappings: UnifiedCrmStageOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedCrmStageOutputRemoteData$.Outbound;
        created_at: UnifiedCrmStageOutputCreatedAt$.Outbound;
        modified_at: UnifiedCrmStageOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmStageOutput> = z
        .object({
            stageName: z.string(),
            fieldMappings: z.lazy(() => UnifiedCrmStageOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedCrmStageOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedCrmStageOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedCrmStageOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                stageName: "stage_name",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
