/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTicketingAttachmentOutputFieldMappings = {};

export type UnifiedTicketingAttachmentOutputRemoteData = {};

export type UnifiedTicketingAttachmentOutputCreatedAt = {};

export type UnifiedTicketingAttachmentOutputModifiedAt = {};

export type UnifiedTicketingAttachmentOutput = {
    /**
     * The file name of the attachment
     */
    fileName: string;
    /**
     * The file url of the attachment
     */
    fileUrl: string;
    /**
     * The uploader's UUID of the attachment
     */
    uploader: string;
    /**
     * The UUID of the ticket the attachment is tied to
     */
    ticketId?: string | undefined;
    /**
     * The UUID of the comment the attachment is tied to
     */
    commentId?: string | undefined;
    fieldMappings: UnifiedTicketingAttachmentOutputFieldMappings;
    /**
     * The UUID of the attachment
     */
    id?: string | undefined;
    /**
     * The id of the attachment in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedTicketingAttachmentOutputRemoteData;
    createdAt: UnifiedTicketingAttachmentOutputCreatedAt;
    modifiedAt: UnifiedTicketingAttachmentOutputModifiedAt;
};

/** @internal */
export namespace UnifiedTicketingAttachmentOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAttachmentOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAttachmentOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAttachmentOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAttachmentOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAttachmentOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAttachmentOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAttachmentOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAttachmentOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAttachmentOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAttachmentOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAttachmentOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAttachmentOutput$ {
    export const inboundSchema: z.ZodType<UnifiedTicketingAttachmentOutput, z.ZodTypeDef, unknown> =
        z
            .object({
                file_name: z.string(),
                file_url: z.string(),
                uploader: z.string(),
                ticket_id: z.string().optional(),
                comment_id: z.string().optional(),
                field_mappings: z.lazy(
                    () => UnifiedTicketingAttachmentOutputFieldMappings$.inboundSchema
                ),
                id: z.string().optional(),
                remote_id: z.string().optional(),
                remote_data: z.lazy(
                    () => UnifiedTicketingAttachmentOutputRemoteData$.inboundSchema
                ),
                created_at: z.lazy(() => UnifiedTicketingAttachmentOutputCreatedAt$.inboundSchema),
                modified_at: z.lazy(
                    () => UnifiedTicketingAttachmentOutputModifiedAt$.inboundSchema
                ),
            })
            .transform((v) => {
                return remap$(v, {
                    file_name: "fileName",
                    file_url: "fileUrl",
                    ticket_id: "ticketId",
                    comment_id: "commentId",
                    field_mappings: "fieldMappings",
                    remote_id: "remoteId",
                    remote_data: "remoteData",
                    created_at: "createdAt",
                    modified_at: "modifiedAt",
                });
            });

    export type Outbound = {
        file_name: string;
        file_url: string;
        uploader: string;
        ticket_id?: string | undefined;
        comment_id?: string | undefined;
        field_mappings: UnifiedTicketingAttachmentOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedTicketingAttachmentOutputRemoteData$.Outbound;
        created_at: UnifiedTicketingAttachmentOutputCreatedAt$.Outbound;
        modified_at: UnifiedTicketingAttachmentOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAttachmentOutput
    > = z
        .object({
            fileName: z.string(),
            fileUrl: z.string(),
            uploader: z.string(),
            ticketId: z.string().optional(),
            commentId: z.string().optional(),
            fieldMappings: z.lazy(
                () => UnifiedTicketingAttachmentOutputFieldMappings$.outboundSchema
            ),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedTicketingAttachmentOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedTicketingAttachmentOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedTicketingAttachmentOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                fileName: "file_name",
                fileUrl: "file_url",
                ticketId: "ticket_id",
                commentId: "comment_id",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
