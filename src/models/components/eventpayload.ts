/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type EventPayload = {
  /**
   * The id of the event.
   */
  idEvent: string | null;
  /**
   * The type of the event.
   */
  type: string | null;
};

/** @internal */
export const EventPayload$inboundSchema: z.ZodType<
  EventPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  id_event: z.nullable(z.string()),
  type: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "id_event": "idEvent",
  });
});

/** @internal */
export type EventPayload$Outbound = {
  id_event: string | null;
  type: string | null;
};

/** @internal */
export const EventPayload$outboundSchema: z.ZodType<
  EventPayload$Outbound,
  z.ZodTypeDef,
  EventPayload
> = z.object({
  idEvent: z.nullable(z.string()),
  type: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    idEvent: "id_event",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventPayload$ {
  /** @deprecated use `EventPayload$inboundSchema` instead. */
  export const inboundSchema = EventPayload$inboundSchema;
  /** @deprecated use `EventPayload$outboundSchema` instead. */
  export const outboundSchema = EventPayload$outboundSchema;
  /** @deprecated use `EventPayload$Outbound` instead. */
  export type Outbound = EventPayload$Outbound;
}
