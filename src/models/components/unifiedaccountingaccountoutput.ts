/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type FieldMappings = {};

/**
 * The remote data of the account in the context of the 3rd Party
 */
export type RemoteData = {};

export type UnifiedAccountingAccountOutput = {
  /**
   * The name of the account
   */
  name?: string | null | undefined;
  /**
   * A description of the account
   */
  description?: string | null | undefined;
  /**
   * The classification of the account
   */
  classification?: string | null | undefined;
  /**
   * The type of the account
   */
  type?: string | null | undefined;
  /**
   * The status of the account
   */
  status?: string | null | undefined;
  /**
   * The current balance of the account
   */
  currentBalance?: number | null | undefined;
  /**
   * The currency of the account
   */
  currency?: string | null | undefined;
  /**
   * The account number
   */
  accountNumber?: string | null | undefined;
  /**
   * The UUID of the parent account
   */
  parentAccount?: string | null | undefined;
  /**
   * The UUID of the associated company info
   */
  companyInfoId?: string | null | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?: FieldMappings | null | undefined;
  /**
   * The UUID of the account record
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the account in the context of the 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The remote data of the account in the context of the 3rd Party
   */
  remoteData?: RemoteData | null | undefined;
  /**
   * The created date of the account record
   */
  createdAt?: Date | null | undefined;
  /**
   * The last modified date of the account record
   */
  modifiedAt?: Date | null | undefined;
};

/** @internal */
export const FieldMappings$inboundSchema: z.ZodType<
  FieldMappings,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FieldMappings$Outbound = {};

/** @internal */
export const FieldMappings$outboundSchema: z.ZodType<
  FieldMappings$Outbound,
  z.ZodTypeDef,
  FieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FieldMappings$ {
  /** @deprecated use `FieldMappings$inboundSchema` instead. */
  export const inboundSchema = FieldMappings$inboundSchema;
  /** @deprecated use `FieldMappings$outboundSchema` instead. */
  export const outboundSchema = FieldMappings$outboundSchema;
  /** @deprecated use `FieldMappings$Outbound` instead. */
  export type Outbound = FieldMappings$Outbound;
}

export function fieldMappingsToJSON(fieldMappings: FieldMappings): string {
  return JSON.stringify(FieldMappings$outboundSchema.parse(fieldMappings));
}

export function fieldMappingsFromJSON(
  jsonString: string,
): SafeParseResult<FieldMappings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FieldMappings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FieldMappings' from JSON`,
  );
}

/** @internal */
export const RemoteData$inboundSchema: z.ZodType<
  RemoteData,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RemoteData$Outbound = {};

/** @internal */
export const RemoteData$outboundSchema: z.ZodType<
  RemoteData$Outbound,
  z.ZodTypeDef,
  RemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoteData$ {
  /** @deprecated use `RemoteData$inboundSchema` instead. */
  export const inboundSchema = RemoteData$inboundSchema;
  /** @deprecated use `RemoteData$outboundSchema` instead. */
  export const outboundSchema = RemoteData$outboundSchema;
  /** @deprecated use `RemoteData$Outbound` instead. */
  export type Outbound = RemoteData$Outbound;
}

export function remoteDataToJSON(remoteData: RemoteData): string {
  return JSON.stringify(RemoteData$outboundSchema.parse(remoteData));
}

export function remoteDataFromJSON(
  jsonString: string,
): SafeParseResult<RemoteData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoteData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoteData' from JSON`,
  );
}

/** @internal */
export const UnifiedAccountingAccountOutput$inboundSchema: z.ZodType<
  UnifiedAccountingAccountOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  classification: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  current_balance: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  account_number: z.nullable(z.string()).optional(),
  parent_account: z.nullable(z.string()).optional(),
  company_info_id: z.nullable(z.string()).optional(),
  field_mappings: z.nullable(z.lazy(() => FieldMappings$inboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_data: z.nullable(z.lazy(() => RemoteData$inboundSchema)).optional(),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "current_balance": "currentBalance",
    "account_number": "accountNumber",
    "parent_account": "parentAccount",
    "company_info_id": "companyInfoId",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_data": "remoteData",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedAccountingAccountOutput$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  classification?: string | null | undefined;
  type?: string | null | undefined;
  status?: string | null | undefined;
  current_balance?: number | null | undefined;
  currency?: string | null | undefined;
  account_number?: string | null | undefined;
  parent_account?: string | null | undefined;
  company_info_id?: string | null | undefined;
  field_mappings?: FieldMappings$Outbound | null | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_data?: RemoteData$Outbound | null | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingAccountOutput$outboundSchema: z.ZodType<
  UnifiedAccountingAccountOutput$Outbound,
  z.ZodTypeDef,
  UnifiedAccountingAccountOutput
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  classification: z.nullable(z.string()).optional(),
  type: z.nullable(z.string()).optional(),
  status: z.nullable(z.string()).optional(),
  currentBalance: z.nullable(z.number()).optional(),
  currency: z.nullable(z.string()).optional(),
  accountNumber: z.nullable(z.string()).optional(),
  parentAccount: z.nullable(z.string()).optional(),
  companyInfoId: z.nullable(z.string()).optional(),
  fieldMappings: z.nullable(z.lazy(() => FieldMappings$outboundSchema))
    .optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteData: z.nullable(z.lazy(() => RemoteData$outboundSchema)).optional(),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    currentBalance: "current_balance",
    accountNumber: "account_number",
    parentAccount: "parent_account",
    companyInfoId: "company_info_id",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteData: "remote_data",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingAccountOutput$ {
  /** @deprecated use `UnifiedAccountingAccountOutput$inboundSchema` instead. */
  export const inboundSchema = UnifiedAccountingAccountOutput$inboundSchema;
  /** @deprecated use `UnifiedAccountingAccountOutput$outboundSchema` instead. */
  export const outboundSchema = UnifiedAccountingAccountOutput$outboundSchema;
  /** @deprecated use `UnifiedAccountingAccountOutput$Outbound` instead. */
  export type Outbound = UnifiedAccountingAccountOutput$Outbound;
}

export function unifiedAccountingAccountOutputToJSON(
  unifiedAccountingAccountOutput: UnifiedAccountingAccountOutput,
): string {
  return JSON.stringify(
    UnifiedAccountingAccountOutput$outboundSchema.parse(
      unifiedAccountingAccountOutput,
    ),
  );
}

export function unifiedAccountingAccountOutputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedAccountingAccountOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedAccountingAccountOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedAccountingAccountOutput' from JSON`,
  );
}
