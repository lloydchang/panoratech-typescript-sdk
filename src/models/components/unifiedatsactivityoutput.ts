/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedAtsActivityOutputFieldMappings = {};

export type UnifiedAtsActivityOutputRemoteData = {};

export type UnifiedAtsActivityOutputCreatedAt = {};

export type UnifiedAtsActivityOutputModifiedAt = {};

export type UnifiedAtsActivityOutput = {
    /**
     * The type of activity
     */
    activityType?: string | undefined;
    /**
     * The subject of the activity
     */
    subject?: string | undefined;
    /**
     * The body of the activity
     */
    body?: string | undefined;
    /**
     * The visibility of the activity
     */
    visibility?: string | undefined;
    /**
     * The UUID of the candidate
     */
    candidateId?: string | undefined;
    /**
     * The remote creation date of the activity
     */
    remoteCreatedAt?: Date | undefined;
    fieldMappings: UnifiedAtsActivityOutputFieldMappings;
    /**
     * The UUID of the activity
     */
    id?: string | undefined;
    /**
     * The remote ID of the activity in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedAtsActivityOutputRemoteData;
    createdAt: UnifiedAtsActivityOutputCreatedAt;
    modifiedAt: UnifiedAtsActivityOutputModifiedAt;
};

/** @internal */
export namespace UnifiedAtsActivityOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsActivityOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsActivityOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsActivityOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsActivityOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsActivityOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsActivityOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsActivityOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsActivityOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsActivityOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsActivityOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsActivityOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsActivityOutput$ {
    export const inboundSchema: z.ZodType<UnifiedAtsActivityOutput, z.ZodTypeDef, unknown> = z
        .object({
            activity_type: z.string().optional(),
            subject: z.string().optional(),
            body: z.string().optional(),
            visibility: z.string().optional(),
            candidate_id: z.string().optional(),
            remote_created_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            field_mappings: z.lazy(() => UnifiedAtsActivityOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedAtsActivityOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedAtsActivityOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedAtsActivityOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                activity_type: "activityType",
                candidate_id: "candidateId",
                remote_created_at: "remoteCreatedAt",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        activity_type?: string | undefined;
        subject?: string | undefined;
        body?: string | undefined;
        visibility?: string | undefined;
        candidate_id?: string | undefined;
        remote_created_at?: string | undefined;
        field_mappings: UnifiedAtsActivityOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedAtsActivityOutputRemoteData$.Outbound;
        created_at: UnifiedAtsActivityOutputCreatedAt$.Outbound;
        modified_at: UnifiedAtsActivityOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedAtsActivityOutput> = z
        .object({
            activityType: z.string().optional(),
            subject: z.string().optional(),
            body: z.string().optional(),
            visibility: z.string().optional(),
            candidateId: z.string().optional(),
            remoteCreatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            fieldMappings: z.lazy(() => UnifiedAtsActivityOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedAtsActivityOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedAtsActivityOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedAtsActivityOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                activityType: "activity_type",
                candidateId: "candidate_id",
                remoteCreatedAt: "remote_created_at",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
