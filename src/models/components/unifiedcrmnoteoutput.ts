/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedCrmNoteOutputFieldMappings = {};

export type UnifiedCrmNoteOutputRemoteData = {};

export type UnifiedCrmNoteOutputCreatedAt = {};

export type UnifiedCrmNoteOutputModifiedAt = {};

export type UnifiedCrmNoteOutput = {
    /**
     * The content of the note
     */
    content: string;
    /**
     * The UUID of the user tied the note
     */
    userId?: string | undefined;
    /**
     * The UUID of the company tied to the note
     */
    companyId?: string | undefined;
    /**
     * The UUID fo the contact tied to the note
     */
    contactId?: string | undefined;
    /**
     * The UUID of the deal tied to the note
     */
    dealId?: string | undefined;
    fieldMappings: UnifiedCrmNoteOutputFieldMappings;
    /**
     * The UUID of the note
     */
    id?: string | undefined;
    /**
     * The id of the note in the context of the Crm 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedCrmNoteOutputRemoteData;
    createdAt: UnifiedCrmNoteOutputCreatedAt;
    modifiedAt: UnifiedCrmNoteOutputModifiedAt;
};

/** @internal */
export namespace UnifiedCrmNoteOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedCrmNoteOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedCrmNoteOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedCrmNoteOutputRemoteData$ {
    export const inboundSchema: z.ZodType<UnifiedCrmNoteOutputRemoteData, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmNoteOutputRemoteData> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmNoteOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<UnifiedCrmNoteOutputCreatedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmNoteOutputCreatedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmNoteOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<UnifiedCrmNoteOutputModifiedAt, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmNoteOutputModifiedAt> =
        z.object({});
}

/** @internal */
export namespace UnifiedCrmNoteOutput$ {
    export const inboundSchema: z.ZodType<UnifiedCrmNoteOutput, z.ZodTypeDef, unknown> = z
        .object({
            content: z.string(),
            user_id: z.string().optional(),
            company_id: z.string().optional(),
            contact_id: z.string().optional(),
            deal_id: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedCrmNoteOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedCrmNoteOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedCrmNoteOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedCrmNoteOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                user_id: "userId",
                company_id: "companyId",
                contact_id: "contactId",
                deal_id: "dealId",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        content: string;
        user_id?: string | undefined;
        company_id?: string | undefined;
        contact_id?: string | undefined;
        deal_id?: string | undefined;
        field_mappings: UnifiedCrmNoteOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedCrmNoteOutputRemoteData$.Outbound;
        created_at: UnifiedCrmNoteOutputCreatedAt$.Outbound;
        modified_at: UnifiedCrmNoteOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedCrmNoteOutput> = z
        .object({
            content: z.string(),
            userId: z.string().optional(),
            companyId: z.string().optional(),
            contactId: z.string().optional(),
            dealId: z.string().optional(),
            fieldMappings: z.lazy(() => UnifiedCrmNoteOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedCrmNoteOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedCrmNoteOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedCrmNoteOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                userId: "user_id",
                companyId: "company_id",
                contactId: "contact_id",
                dealId: "deal_id",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
