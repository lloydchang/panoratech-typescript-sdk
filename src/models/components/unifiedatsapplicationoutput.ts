/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedAtsApplicationOutputFieldMappings = {};

export type UnifiedAtsApplicationOutputRemoteData = {};

export type UnifiedAtsApplicationOutputCreatedAt = {};

export type UnifiedAtsApplicationOutputModifiedAt = {};

export type UnifiedAtsApplicationOutput = {
    /**
     * The application date
     */
    appliedAt?: Date | undefined;
    /**
     * The rejection date
     */
    rejectedAt?: Date | undefined;
    /**
     * The offers UUIDs for the application
     */
    offers?: Array<string> | undefined;
    /**
     * The source of the application
     */
    source?: string | undefined;
    /**
     * The UUID of the person credited for the application
     */
    creditedTo?: string | undefined;
    /**
     * The UUID of the current stage of the application
     */
    currentStage?: string | undefined;
    /**
     * The rejection reason for the application
     */
    rejectReason?: string | undefined;
    /**
     * The UUID of the candidate
     */
    candidateId?: string | undefined;
    /**
     * The UUID of the job
     */
    jobId?: string | undefined;
    fieldMappings: UnifiedAtsApplicationOutputFieldMappings;
    /**
     * The UUID of the application
     */
    id?: string | undefined;
    /**
     * The remote ID of the application in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedAtsApplicationOutputRemoteData;
    createdAt: UnifiedAtsApplicationOutputCreatedAt;
    modifiedAt: UnifiedAtsApplicationOutputModifiedAt;
};

/** @internal */
export namespace UnifiedAtsApplicationOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsApplicationOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsApplicationOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsApplicationOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsApplicationOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsApplicationOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsApplicationOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsApplicationOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsApplicationOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsApplicationOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedAtsApplicationOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedAtsApplicationOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedAtsApplicationOutput$ {
    export const inboundSchema: z.ZodType<UnifiedAtsApplicationOutput, z.ZodTypeDef, unknown> = z
        .object({
            applied_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            rejected_at: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            offers: z.array(z.string()).optional(),
            source: z.string().optional(),
            credited_to: z.string().optional(),
            current_stage: z.string().optional(),
            reject_reason: z.string().optional(),
            candidate_id: z.string().optional(),
            job_id: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedAtsApplicationOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedAtsApplicationOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedAtsApplicationOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedAtsApplicationOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                applied_at: "appliedAt",
                rejected_at: "rejectedAt",
                credited_to: "creditedTo",
                current_stage: "currentStage",
                reject_reason: "rejectReason",
                candidate_id: "candidateId",
                job_id: "jobId",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        applied_at?: string | undefined;
        rejected_at?: string | undefined;
        offers?: Array<string> | undefined;
        source?: string | undefined;
        credited_to?: string | undefined;
        current_stage?: string | undefined;
        reject_reason?: string | undefined;
        candidate_id?: string | undefined;
        job_id?: string | undefined;
        field_mappings: UnifiedAtsApplicationOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedAtsApplicationOutputRemoteData$.Outbound;
        created_at: UnifiedAtsApplicationOutputCreatedAt$.Outbound;
        modified_at: UnifiedAtsApplicationOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedAtsApplicationOutput> = z
        .object({
            appliedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            rejectedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            offers: z.array(z.string()).optional(),
            source: z.string().optional(),
            creditedTo: z.string().optional(),
            currentStage: z.string().optional(),
            rejectReason: z.string().optional(),
            candidateId: z.string().optional(),
            jobId: z.string().optional(),
            fieldMappings: z.lazy(() => UnifiedAtsApplicationOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedAtsApplicationOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedAtsApplicationOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedAtsApplicationOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                appliedAt: "applied_at",
                rejectedAt: "rejected_at",
                creditedTo: "credited_to",
                currentStage: "current_stage",
                rejectReason: "reject_reason",
                candidateId: "candidate_id",
                jobId: "job_id",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
