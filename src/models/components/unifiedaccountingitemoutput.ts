/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedAccountingItemOutputFieldMappings = {};

/**
 * The remote data of the item in the context of the 3rd Party
 */
export type UnifiedAccountingItemOutputRemoteData = {};

export type UnifiedAccountingItemOutput = {
    /**
     * The name of the accounting item
     */
    name?: string | null | undefined;
    /**
     * The status of the accounting item
     */
    status?: string | null | undefined;
    /**
     * The unit price of the item in cents
     */
    unitPrice?: number | null | undefined;
    /**
     * The purchase price of the item in cents
     */
    purchasePrice?: number | null | undefined;
    /**
     * The UUID of the associated sales account
     */
    salesAccount?: string | null | undefined;
    /**
     * The UUID of the associated purchase account
     */
    purchaseAccount?: string | null | undefined;
    /**
     * The UUID of the associated company info
     */
    companyInfoId?: string | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedAccountingItemOutputFieldMappings | null | undefined;
    /**
     * The UUID of the accounting item record
     */
    id?: string | null | undefined;
    /**
     * The remote ID of the item in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The date when the item was last updated in the remote system
     */
    remoteUpdatedAt?: Date | null | undefined;
    /**
     * The remote data of the item in the context of the 3rd Party
     */
    remoteData?: UnifiedAccountingItemOutputRemoteData | null | undefined;
    /**
     * The created date of the accounting item record
     */
    createdAt?: Date | null | undefined;
    /**
     * The last modified date of the accounting item record
     */
    modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedAccountingItemOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedAccountingItemOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingItemOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedAccountingItemOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedAccountingItemOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingItemOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingItemOutputFieldMappings$ {
    /** @deprecated use `UnifiedAccountingItemOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingItemOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedAccountingItemOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingItemOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedAccountingItemOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedAccountingItemOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedAccountingItemOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedAccountingItemOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedAccountingItemOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedAccountingItemOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedAccountingItemOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingItemOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingItemOutputRemoteData$ {
    /** @deprecated use `UnifiedAccountingItemOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingItemOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedAccountingItemOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingItemOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedAccountingItemOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedAccountingItemOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedAccountingItemOutput$inboundSchema: z.ZodType<
    UnifiedAccountingItemOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()).optional(),
        status: z.nullable(z.string()).optional(),
        unit_price: z.nullable(z.number()).optional(),
        purchase_price: z.nullable(z.number()).optional(),
        sales_account: z.nullable(z.string()).optional(),
        purchase_account: z.nullable(z.string()).optional(),
        company_info_id: z.nullable(z.string()).optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedAccountingItemOutputFieldMappings$inboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_updated_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        remote_data: z
            .nullable(z.lazy(() => UnifiedAccountingItemOutputRemoteData$inboundSchema))
            .optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            unit_price: "unitPrice",
            purchase_price: "purchasePrice",
            sales_account: "salesAccount",
            purchase_account: "purchaseAccount",
            company_info_id: "companyInfoId",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_updated_at: "remoteUpdatedAt",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedAccountingItemOutput$Outbound = {
    name?: string | null | undefined;
    status?: string | null | undefined;
    unit_price?: number | null | undefined;
    purchase_price?: number | null | undefined;
    sales_account?: string | null | undefined;
    purchase_account?: string | null | undefined;
    company_info_id?: string | null | undefined;
    field_mappings?: UnifiedAccountingItemOutputFieldMappings$Outbound | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_updated_at?: string | null | undefined;
    remote_data?: UnifiedAccountingItemOutputRemoteData$Outbound | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedAccountingItemOutput$outboundSchema: z.ZodType<
    UnifiedAccountingItemOutput$Outbound,
    z.ZodTypeDef,
    UnifiedAccountingItemOutput
> = z
    .object({
        name: z.nullable(z.string()).optional(),
        status: z.nullable(z.string()).optional(),
        unitPrice: z.nullable(z.number()).optional(),
        purchasePrice: z.nullable(z.number()).optional(),
        salesAccount: z.nullable(z.string()).optional(),
        purchaseAccount: z.nullable(z.string()).optional(),
        companyInfoId: z.nullable(z.string()).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedAccountingItemOutputFieldMappings$outboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteUpdatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        remoteData: z
            .nullable(z.lazy(() => UnifiedAccountingItemOutputRemoteData$outboundSchema))
            .optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            unitPrice: "unit_price",
            purchasePrice: "purchase_price",
            salesAccount: "sales_account",
            purchaseAccount: "purchase_account",
            companyInfoId: "company_info_id",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteUpdatedAt: "remote_updated_at",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedAccountingItemOutput$ {
    /** @deprecated use `UnifiedAccountingItemOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedAccountingItemOutput$inboundSchema;
    /** @deprecated use `UnifiedAccountingItemOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedAccountingItemOutput$outboundSchema;
    /** @deprecated use `UnifiedAccountingItemOutput$Outbound` instead. */
    export type Outbound = UnifiedAccountingItemOutput$Outbound;
}
