/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTicketingCollectionOutputRemoteData = {};

export type UnifiedTicketingCollectionOutputCreatedAt = {};

export type UnifiedTicketingCollectionOutputModifiedAt = {};

export type UnifiedTicketingCollectionOutput = {
    /**
     * The name of the collection
     */
    name: string;
    /**
     * The description of the collection
     */
    description?: string | undefined;
    /**
     * The type of the collection. Authorized values are either PROJECT or LIST
     */
    collectionType?: string | undefined;
    /**
     * The UUID of the collection
     */
    id?: string | undefined;
    /**
     * The id of the collection in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedTicketingCollectionOutputRemoteData;
    createdAt: UnifiedTicketingCollectionOutputCreatedAt;
    modifiedAt: UnifiedTicketingCollectionOutputModifiedAt;
};

/** @internal */
export namespace UnifiedTicketingCollectionOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingCollectionOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingCollectionOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingCollectionOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingCollectionOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingCollectionOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingCollectionOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingCollectionOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingCollectionOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingCollectionOutput$ {
    export const inboundSchema: z.ZodType<UnifiedTicketingCollectionOutput, z.ZodTypeDef, unknown> =
        z
            .object({
                name: z.string(),
                description: z.string().optional(),
                collection_type: z.string().optional(),
                id: z.string().optional(),
                remote_id: z.string().optional(),
                remote_data: z.lazy(
                    () => UnifiedTicketingCollectionOutputRemoteData$.inboundSchema
                ),
                created_at: z.lazy(() => UnifiedTicketingCollectionOutputCreatedAt$.inboundSchema),
                modified_at: z.lazy(
                    () => UnifiedTicketingCollectionOutputModifiedAt$.inboundSchema
                ),
            })
            .transform((v) => {
                return remap$(v, {
                    collection_type: "collectionType",
                    remote_id: "remoteId",
                    remote_data: "remoteData",
                    created_at: "createdAt",
                    modified_at: "modifiedAt",
                });
            });

    export type Outbound = {
        name: string;
        description?: string | undefined;
        collection_type?: string | undefined;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedTicketingCollectionOutputRemoteData$.Outbound;
        created_at: UnifiedTicketingCollectionOutputCreatedAt$.Outbound;
        modified_at: UnifiedTicketingCollectionOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingCollectionOutput
    > = z
        .object({
            name: z.string(),
            description: z.string().optional(),
            collectionType: z.string().optional(),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedTicketingCollectionOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedTicketingCollectionOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedTicketingCollectionOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                collectionType: "collection_type",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
