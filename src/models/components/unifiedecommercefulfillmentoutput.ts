/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The items in the fulfilment
 */
export type Items = {};

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedEcommerceFulfillmentOutputFieldMappings = {};

/**
 * The remote data of the customer in the context of the 3rd Party
 */
export type UnifiedEcommerceFulfillmentOutputRemoteData = {};

export type UnifiedEcommerceFulfillmentOutput = {
  /**
   * The carrier of the fulfilment
   */
  carrier?: string | null | undefined;
  /**
   * The tracking URLs of the fulfilment
   */
  trackingUrls?: Array<string> | null | undefined;
  /**
   * The tracking numbers of the fulfilment
   */
  trackingNumbers?: Array<string> | null | undefined;
  /**
   * The items in the fulfilment
   */
  items?: Items | null | undefined;
  /**
   * The UUID of the order associated with the fulfilment
   */
  orderId?: string | null | undefined;
  /**
   * The custom field mappings of the object between the remote 3rd party & Panora
   */
  fieldMappings?:
    | UnifiedEcommerceFulfillmentOutputFieldMappings
    | null
    | undefined;
  /**
   * The UUID of the fulfilment
   */
  id?: string | null | undefined;
  /**
   * The remote ID of the fulfilment in the context of the 3rd Party
   */
  remoteId?: string | null | undefined;
  /**
   * The remote data of the customer in the context of the 3rd Party
   */
  remoteData?: UnifiedEcommerceFulfillmentOutputRemoteData | null | undefined;
  /**
   * The created date of the object
   */
  createdAt?: string | null | undefined;
  /**
   * The modified date of the object
   */
  modifiedAt?: string | null | undefined;
};

/** @internal */
export const Items$inboundSchema: z.ZodType<Items, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Items$Outbound = {};

/** @internal */
export const Items$outboundSchema: z.ZodType<
  Items$Outbound,
  z.ZodTypeDef,
  Items
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Items$ {
  /** @deprecated use `Items$inboundSchema` instead. */
  export const inboundSchema = Items$inboundSchema;
  /** @deprecated use `Items$outboundSchema` instead. */
  export const outboundSchema = Items$outboundSchema;
  /** @deprecated use `Items$Outbound` instead. */
  export type Outbound = Items$Outbound;
}

export function itemsToJSON(items: Items): string {
  return JSON.stringify(Items$outboundSchema.parse(items));
}

export function itemsFromJSON(
  jsonString: string,
): SafeParseResult<Items, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Items$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Items' from JSON`,
  );
}

/** @internal */
export const UnifiedEcommerceFulfillmentOutputFieldMappings$inboundSchema:
  z.ZodType<
    UnifiedEcommerceFulfillmentOutputFieldMappings,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedEcommerceFulfillmentOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedEcommerceFulfillmentOutputFieldMappings$outboundSchema:
  z.ZodType<
    UnifiedEcommerceFulfillmentOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedEcommerceFulfillmentOutputFieldMappings
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedEcommerceFulfillmentOutputFieldMappings$ {
  /** @deprecated use `UnifiedEcommerceFulfillmentOutputFieldMappings$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedEcommerceFulfillmentOutputFieldMappings$inboundSchema;
  /** @deprecated use `UnifiedEcommerceFulfillmentOutputFieldMappings$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedEcommerceFulfillmentOutputFieldMappings$outboundSchema;
  /** @deprecated use `UnifiedEcommerceFulfillmentOutputFieldMappings$Outbound` instead. */
  export type Outbound =
    UnifiedEcommerceFulfillmentOutputFieldMappings$Outbound;
}

export function unifiedEcommerceFulfillmentOutputFieldMappingsToJSON(
  unifiedEcommerceFulfillmentOutputFieldMappings:
    UnifiedEcommerceFulfillmentOutputFieldMappings,
): string {
  return JSON.stringify(
    UnifiedEcommerceFulfillmentOutputFieldMappings$outboundSchema.parse(
      unifiedEcommerceFulfillmentOutputFieldMappings,
    ),
  );
}

export function unifiedEcommerceFulfillmentOutputFieldMappingsFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedEcommerceFulfillmentOutputFieldMappings,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedEcommerceFulfillmentOutputFieldMappings$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedEcommerceFulfillmentOutputFieldMappings' from JSON`,
  );
}

/** @internal */
export const UnifiedEcommerceFulfillmentOutputRemoteData$inboundSchema:
  z.ZodType<
    UnifiedEcommerceFulfillmentOutputRemoteData,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type UnifiedEcommerceFulfillmentOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedEcommerceFulfillmentOutputRemoteData$outboundSchema:
  z.ZodType<
    UnifiedEcommerceFulfillmentOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedEcommerceFulfillmentOutputRemoteData
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedEcommerceFulfillmentOutputRemoteData$ {
  /** @deprecated use `UnifiedEcommerceFulfillmentOutputRemoteData$inboundSchema` instead. */
  export const inboundSchema =
    UnifiedEcommerceFulfillmentOutputRemoteData$inboundSchema;
  /** @deprecated use `UnifiedEcommerceFulfillmentOutputRemoteData$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedEcommerceFulfillmentOutputRemoteData$outboundSchema;
  /** @deprecated use `UnifiedEcommerceFulfillmentOutputRemoteData$Outbound` instead. */
  export type Outbound = UnifiedEcommerceFulfillmentOutputRemoteData$Outbound;
}

export function unifiedEcommerceFulfillmentOutputRemoteDataToJSON(
  unifiedEcommerceFulfillmentOutputRemoteData:
    UnifiedEcommerceFulfillmentOutputRemoteData,
): string {
  return JSON.stringify(
    UnifiedEcommerceFulfillmentOutputRemoteData$outboundSchema.parse(
      unifiedEcommerceFulfillmentOutputRemoteData,
    ),
  );
}

export function unifiedEcommerceFulfillmentOutputRemoteDataFromJSON(
  jsonString: string,
): SafeParseResult<
  UnifiedEcommerceFulfillmentOutputRemoteData,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UnifiedEcommerceFulfillmentOutputRemoteData$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UnifiedEcommerceFulfillmentOutputRemoteData' from JSON`,
  );
}

/** @internal */
export const UnifiedEcommerceFulfillmentOutput$inboundSchema: z.ZodType<
  UnifiedEcommerceFulfillmentOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  carrier: z.nullable(z.string()).optional(),
  tracking_urls: z.nullable(z.array(z.string())).optional(),
  tracking_numbers: z.nullable(z.array(z.string())).optional(),
  items: z.nullable(z.lazy(() => Items$inboundSchema)).optional(),
  order_id: z.nullable(z.string()).optional(),
  field_mappings: z.nullable(
    z.lazy(() => UnifiedEcommerceFulfillmentOutputFieldMappings$inboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remote_id: z.nullable(z.string()).optional(),
  remote_data: z.nullable(
    z.lazy(() => UnifiedEcommerceFulfillmentOutputRemoteData$inboundSchema),
  ).optional(),
  created_at: z.nullable(z.string()).optional(),
  modified_at: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tracking_urls": "trackingUrls",
    "tracking_numbers": "trackingNumbers",
    "order_id": "orderId",
    "field_mappings": "fieldMappings",
    "remote_id": "remoteId",
    "remote_data": "remoteData",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type UnifiedEcommerceFulfillmentOutput$Outbound = {
  carrier?: string | null | undefined;
  tracking_urls?: Array<string> | null | undefined;
  tracking_numbers?: Array<string> | null | undefined;
  items?: Items$Outbound | null | undefined;
  order_id?: string | null | undefined;
  field_mappings?:
    | UnifiedEcommerceFulfillmentOutputFieldMappings$Outbound
    | null
    | undefined;
  id?: string | null | undefined;
  remote_id?: string | null | undefined;
  remote_data?:
    | UnifiedEcommerceFulfillmentOutputRemoteData$Outbound
    | null
    | undefined;
  created_at?: string | null | undefined;
  modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedEcommerceFulfillmentOutput$outboundSchema: z.ZodType<
  UnifiedEcommerceFulfillmentOutput$Outbound,
  z.ZodTypeDef,
  UnifiedEcommerceFulfillmentOutput
> = z.object({
  carrier: z.nullable(z.string()).optional(),
  trackingUrls: z.nullable(z.array(z.string())).optional(),
  trackingNumbers: z.nullable(z.array(z.string())).optional(),
  items: z.nullable(z.lazy(() => Items$outboundSchema)).optional(),
  orderId: z.nullable(z.string()).optional(),
  fieldMappings: z.nullable(
    z.lazy(() => UnifiedEcommerceFulfillmentOutputFieldMappings$outboundSchema),
  ).optional(),
  id: z.nullable(z.string()).optional(),
  remoteId: z.nullable(z.string()).optional(),
  remoteData: z.nullable(
    z.lazy(() => UnifiedEcommerceFulfillmentOutputRemoteData$outboundSchema),
  ).optional(),
  createdAt: z.nullable(z.string()).optional(),
  modifiedAt: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    trackingUrls: "tracking_urls",
    trackingNumbers: "tracking_numbers",
    orderId: "order_id",
    fieldMappings: "field_mappings",
    remoteId: "remote_id",
    remoteData: "remote_data",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedEcommerceFulfillmentOutput$ {
  /** @deprecated use `UnifiedEcommerceFulfillmentOutput$inboundSchema` instead. */
  export const inboundSchema = UnifiedEcommerceFulfillmentOutput$inboundSchema;
  /** @deprecated use `UnifiedEcommerceFulfillmentOutput$outboundSchema` instead. */
  export const outboundSchema =
    UnifiedEcommerceFulfillmentOutput$outboundSchema;
  /** @deprecated use `UnifiedEcommerceFulfillmentOutput$Outbound` instead. */
  export type Outbound = UnifiedEcommerceFulfillmentOutput$Outbound;
}

export function unifiedEcommerceFulfillmentOutputToJSON(
  unifiedEcommerceFulfillmentOutput: UnifiedEcommerceFulfillmentOutput,
): string {
  return JSON.stringify(
    UnifiedEcommerceFulfillmentOutput$outboundSchema.parse(
      unifiedEcommerceFulfillmentOutput,
    ),
  );
}

export function unifiedEcommerceFulfillmentOutputFromJSON(
  jsonString: string,
): SafeParseResult<UnifiedEcommerceFulfillmentOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnifiedEcommerceFulfillmentOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnifiedEcommerceFulfillmentOutput' from JSON`,
  );
}
