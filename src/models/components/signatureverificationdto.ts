/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The payload event of the webhook.
 */
export type Payload = {};

export type SignatureVerificationDto = {
    /**
     * The payload event of the webhook.
     */
    payload: Payload;
    /**
     * The signature of the webhook.
     */
    signature: string;
    /**
     * The secret of the webhook.
     */
    secret: string;
};

/** @internal */
export namespace Payload$ {
    export const inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Payload> = z.object({});
}

/** @internal */
export namespace SignatureVerificationDto$ {
    export const inboundSchema: z.ZodType<SignatureVerificationDto, z.ZodTypeDef, unknown> =
        z.object({
            payload: z.lazy(() => Payload$.inboundSchema),
            signature: z.string(),
            secret: z.string(),
        });

    export type Outbound = {
        payload: Payload$.Outbound;
        signature: string;
        secret: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SignatureVerificationDto> =
        z.object({
            payload: z.lazy(() => Payload$.outboundSchema),
            signature: z.string(),
            secret: z.string(),
        });
}
