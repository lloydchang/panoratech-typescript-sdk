/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Attribute Data Type
 */
export enum CustomFieldResponseDataType {
  String = "string",
  Number = "number",
}

export type CustomFieldResponse = {
  /**
   * Attribute Id
   */
  idAttribute: string | null;
  /**
   * Attribute Status
   */
  status: string | null;
  /**
   * Attribute Ressource Owner Type
   */
  ressourceOwnerType: string | null;
  /**
   * Attribute Slug
   */
  slug: string | null;
  /**
   * Attribute Description
   */
  description: string | null;
  /**
   * Attribute Data Type
   */
  dataType: CustomFieldResponseDataType | null;
  /**
   * Attribute Remote Id
   */
  remoteId: string | null;
  /**
   * Attribute Source
   */
  source: string | null;
  /**
   * Attribute Entity Id
   */
  idEntity: string | null;
  /**
   * Attribute Project Id
   */
  idProject: string | null;
  /**
   * Attribute Scope
   */
  scope: string | null;
  /**
   * Attribute Consumer Id
   */
  idConsumer: string | null;
  /**
   * Attribute Created Date
   */
  createdAt: Date | null;
  /**
   * Attribute Modified Date
   */
  modifiedAt: Date | null;
};

/** @internal */
export const CustomFieldResponseDataType$inboundSchema: z.ZodNativeEnum<
  typeof CustomFieldResponseDataType
> = z.nativeEnum(CustomFieldResponseDataType);

/** @internal */
export const CustomFieldResponseDataType$outboundSchema: z.ZodNativeEnum<
  typeof CustomFieldResponseDataType
> = CustomFieldResponseDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldResponseDataType$ {
  /** @deprecated use `CustomFieldResponseDataType$inboundSchema` instead. */
  export const inboundSchema = CustomFieldResponseDataType$inboundSchema;
  /** @deprecated use `CustomFieldResponseDataType$outboundSchema` instead. */
  export const outboundSchema = CustomFieldResponseDataType$outboundSchema;
}

/** @internal */
export const CustomFieldResponse$inboundSchema: z.ZodType<
  CustomFieldResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id_attribute: z.nullable(z.string()),
  status: z.nullable(z.string()),
  ressource_owner_type: z.nullable(z.string()),
  slug: z.nullable(z.string()),
  description: z.nullable(z.string()),
  data_type: z.nullable(CustomFieldResponseDataType$inboundSchema),
  remote_id: z.nullable(z.string()),
  source: z.nullable(z.string()),
  id_entity: z.nullable(z.string()),
  id_project: z.nullable(z.string()),
  scope: z.nullable(z.string()),
  id_consumer: z.nullable(z.string()),
  created_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
}).transform((v) => {
  return remap$(v, {
    "id_attribute": "idAttribute",
    "ressource_owner_type": "ressourceOwnerType",
    "data_type": "dataType",
    "remote_id": "remoteId",
    "id_entity": "idEntity",
    "id_project": "idProject",
    "id_consumer": "idConsumer",
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
  });
});

/** @internal */
export type CustomFieldResponse$Outbound = {
  id_attribute: string | null;
  status: string | null;
  ressource_owner_type: string | null;
  slug: string | null;
  description: string | null;
  data_type: string | null;
  remote_id: string | null;
  source: string | null;
  id_entity: string | null;
  id_project: string | null;
  scope: string | null;
  id_consumer: string | null;
  created_at: string | null;
  modified_at: string | null;
};

/** @internal */
export const CustomFieldResponse$outboundSchema: z.ZodType<
  CustomFieldResponse$Outbound,
  z.ZodTypeDef,
  CustomFieldResponse
> = z.object({
  idAttribute: z.nullable(z.string()),
  status: z.nullable(z.string()),
  ressourceOwnerType: z.nullable(z.string()),
  slug: z.nullable(z.string()),
  description: z.nullable(z.string()),
  dataType: z.nullable(CustomFieldResponseDataType$outboundSchema),
  remoteId: z.nullable(z.string()),
  source: z.nullable(z.string()),
  idEntity: z.nullable(z.string()),
  idProject: z.nullable(z.string()),
  scope: z.nullable(z.string()),
  idConsumer: z.nullable(z.string()),
  createdAt: z.nullable(z.date().transform(v => v.toISOString())),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
}).transform((v) => {
  return remap$(v, {
    idAttribute: "id_attribute",
    ressourceOwnerType: "ressource_owner_type",
    dataType: "data_type",
    remoteId: "remote_id",
    idEntity: "id_entity",
    idProject: "id_project",
    idConsumer: "id_consumer",
    createdAt: "created_at",
    modifiedAt: "modified_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldResponse$ {
  /** @deprecated use `CustomFieldResponse$inboundSchema` instead. */
  export const inboundSchema = CustomFieldResponse$inboundSchema;
  /** @deprecated use `CustomFieldResponse$outboundSchema` instead. */
  export const outboundSchema = CustomFieldResponse$outboundSchema;
  /** @deprecated use `CustomFieldResponse$Outbound` instead. */
  export type Outbound = CustomFieldResponse$Outbound;
}

export function customFieldResponseToJSON(
  customFieldResponse: CustomFieldResponse,
): string {
  return JSON.stringify(
    CustomFieldResponse$outboundSchema.parse(customFieldResponse),
  );
}

export function customFieldResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldResponse' from JSON`,
  );
}
