/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTicketingUserOutput = {
    /**
     * The name of the user
     */
    name: string | null;
    /**
     * The email address of the user
     */
    emailAddress: string | null;
    /**
     * The teams whose the user is part of
     */
    teams?: Array<string> | null | undefined;
    /**
     * The account or organization the user is part of
     */
    accountId?: string | null | undefined;
    /**
     * The custom field mappings of the user between the remote 3rd party & Panora
     */
    fieldMappings: { [k: string]: any } | null;
    /**
     * The UUID of the user
     */
    id?: string | null | undefined;
    /**
     * The id of the user in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the user in the context of the 3rd Party
     */
    remoteData?: { [k: string]: any } | null | undefined;
    /**
     * The created date of the object
     */
    createdAt?: Date | null | undefined;
    /**
     * The modified date of the object
     */
    modifiedAt?: Date | null | undefined;
};

/** @internal */
export const UnifiedTicketingUserOutput$inboundSchema: z.ZodType<
    UnifiedTicketingUserOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.nullable(z.string()),
        email_address: z.nullable(z.string()),
        teams: z.nullable(z.array(z.string())).optional(),
        account_id: z.nullable(z.string()).optional(),
        field_mappings: z.nullable(z.record(z.any())),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z.nullable(z.record(z.any())).optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
    })
    .transform((v) => {
        return remap$(v, {
            email_address: "emailAddress",
            account_id: "accountId",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            created_at: "createdAt",
            modified_at: "modifiedAt",
        });
    });

/** @internal */
export type UnifiedTicketingUserOutput$Outbound = {
    name: string | null;
    email_address: string | null;
    teams?: Array<string> | null | undefined;
    account_id?: string | null | undefined;
    field_mappings: { [k: string]: any } | null;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: { [k: string]: any } | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
};

/** @internal */
export const UnifiedTicketingUserOutput$outboundSchema: z.ZodType<
    UnifiedTicketingUserOutput$Outbound,
    z.ZodTypeDef,
    UnifiedTicketingUserOutput
> = z
    .object({
        name: z.nullable(z.string()),
        emailAddress: z.nullable(z.string()),
        teams: z.nullable(z.array(z.string())).optional(),
        accountId: z.nullable(z.string()).optional(),
        fieldMappings: z.nullable(z.record(z.any())),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z.nullable(z.record(z.any())).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            emailAddress: "email_address",
            accountId: "account_id",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            createdAt: "created_at",
            modifiedAt: "modified_at",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedTicketingUserOutput$ {
    /** @deprecated use `UnifiedTicketingUserOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedTicketingUserOutput$inboundSchema;
    /** @deprecated use `UnifiedTicketingUserOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedTicketingUserOutput$outboundSchema;
    /** @deprecated use `UnifiedTicketingUserOutput$Outbound` instead. */
    export type Outbound = UnifiedTicketingUserOutput$Outbound;
}
