/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTicketingUserOutputFieldMappings = {};

export type UnifiedTicketingUserOutputRemoteData = {};

export type UnifiedTicketingUserOutputCreatedAt = {};

export type UnifiedTicketingUserOutputModifiedAt = {};

export type UnifiedTicketingUserOutput = {
    /**
     * The name of the user
     */
    name: string;
    /**
     * The email address of the user
     */
    emailAddress: string;
    /**
     * The teams whose the user is part of
     */
    teams?: Array<string> | undefined;
    /**
     * The account or organization the user is part of
     */
    accountId?: string | undefined;
    fieldMappings: UnifiedTicketingUserOutputFieldMappings;
    /**
     * The UUID of the user
     */
    id?: string | undefined;
    /**
     * The id of the user in the context of the 3rd Party
     */
    remoteId?: string | undefined;
    remoteData: UnifiedTicketingUserOutputRemoteData;
    createdAt: UnifiedTicketingUserOutputCreatedAt;
    modifiedAt: UnifiedTicketingUserOutputModifiedAt;
};

/** @internal */
export namespace UnifiedTicketingUserOutputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingUserOutputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingUserOutputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingUserOutputRemoteData$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingUserOutputRemoteData,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingUserOutputRemoteData
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingUserOutputCreatedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingUserOutputCreatedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingUserOutputCreatedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingUserOutputModifiedAt$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingUserOutputModifiedAt,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingUserOutputModifiedAt
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingUserOutput$ {
    export const inboundSchema: z.ZodType<UnifiedTicketingUserOutput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            email_address: z.string(),
            teams: z.array(z.string()).optional(),
            account_id: z.string().optional(),
            field_mappings: z.lazy(() => UnifiedTicketingUserOutputFieldMappings$.inboundSchema),
            id: z.string().optional(),
            remote_id: z.string().optional(),
            remote_data: z.lazy(() => UnifiedTicketingUserOutputRemoteData$.inboundSchema),
            created_at: z.lazy(() => UnifiedTicketingUserOutputCreatedAt$.inboundSchema),
            modified_at: z.lazy(() => UnifiedTicketingUserOutputModifiedAt$.inboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                email_address: "emailAddress",
                account_id: "accountId",
                field_mappings: "fieldMappings",
                remote_id: "remoteId",
                remote_data: "remoteData",
                created_at: "createdAt",
                modified_at: "modifiedAt",
            });
        });

    export type Outbound = {
        name: string;
        email_address: string;
        teams?: Array<string> | undefined;
        account_id?: string | undefined;
        field_mappings: UnifiedTicketingUserOutputFieldMappings$.Outbound;
        id?: string | undefined;
        remote_id?: string | undefined;
        remote_data: UnifiedTicketingUserOutputRemoteData$.Outbound;
        created_at: UnifiedTicketingUserOutputCreatedAt$.Outbound;
        modified_at: UnifiedTicketingUserOutputModifiedAt$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UnifiedTicketingUserOutput> = z
        .object({
            name: z.string(),
            emailAddress: z.string(),
            teams: z.array(z.string()).optional(),
            accountId: z.string().optional(),
            fieldMappings: z.lazy(() => UnifiedTicketingUserOutputFieldMappings$.outboundSchema),
            id: z.string().optional(),
            remoteId: z.string().optional(),
            remoteData: z.lazy(() => UnifiedTicketingUserOutputRemoteData$.outboundSchema),
            createdAt: z.lazy(() => UnifiedTicketingUserOutputCreatedAt$.outboundSchema),
            modifiedAt: z.lazy(() => UnifiedTicketingUserOutputModifiedAt$.outboundSchema),
        })
        .transform((v) => {
            return remap$(v, {
                emailAddress: "email_address",
                accountId: "account_id",
                fieldMappings: "field_mappings",
                remoteId: "remote_id",
                remoteData: "remote_data",
                createdAt: "created_at",
                modifiedAt: "modified_at",
            });
        });
}
