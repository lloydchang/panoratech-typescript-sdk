/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UnifiedTicketingAttachmentInputFieldMappings = {};

export type UnifiedTicketingAttachmentInput = {
    /**
     * The file name of the attachment
     */
    fileName: string;
    /**
     * The file url of the attachment
     */
    fileUrl: string;
    /**
     * The uploader's UUID of the attachment
     */
    uploader: string;
    /**
     * The UUID of the ticket the attachment is tied to
     */
    ticketId?: string | undefined;
    /**
     * The UUID of the comment the attachment is tied to
     */
    commentId?: string | undefined;
    fieldMappings: UnifiedTicketingAttachmentInputFieldMappings;
};

/** @internal */
export namespace UnifiedTicketingAttachmentInputFieldMappings$ {
    export const inboundSchema: z.ZodType<
        UnifiedTicketingAttachmentInputFieldMappings,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAttachmentInputFieldMappings
    > = z.object({});
}

/** @internal */
export namespace UnifiedTicketingAttachmentInput$ {
    export const inboundSchema: z.ZodType<UnifiedTicketingAttachmentInput, z.ZodTypeDef, unknown> =
        z
            .object({
                file_name: z.string(),
                file_url: z.string(),
                uploader: z.string(),
                ticket_id: z.string().optional(),
                comment_id: z.string().optional(),
                field_mappings: z.lazy(
                    () => UnifiedTicketingAttachmentInputFieldMappings$.inboundSchema
                ),
            })
            .transform((v) => {
                return remap$(v, {
                    file_name: "fileName",
                    file_url: "fileUrl",
                    ticket_id: "ticketId",
                    comment_id: "commentId",
                    field_mappings: "fieldMappings",
                });
            });

    export type Outbound = {
        file_name: string;
        file_url: string;
        uploader: string;
        ticket_id?: string | undefined;
        comment_id?: string | undefined;
        field_mappings: UnifiedTicketingAttachmentInputFieldMappings$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UnifiedTicketingAttachmentInput
    > = z
        .object({
            fileName: z.string(),
            fileUrl: z.string(),
            uploader: z.string(),
            ticketId: z.string().optional(),
            commentId: z.string().optional(),
            fieldMappings: z.lazy(
                () => UnifiedTicketingAttachmentInputFieldMappings$.outboundSchema
            ),
        })
        .transform((v) => {
            return remap$(v, {
                fileName: "file_name",
                fileUrl: "file_url",
                ticketId: "ticket_id",
                commentId: "comment_id",
                fieldMappings: "field_mappings",
            });
        });
}
