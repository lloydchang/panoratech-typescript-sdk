/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

/**
 * The pay period of the employment
 */
export enum PayPeriod {
    Hour = "HOUR",
    Day = "DAY",
    Week = "WEEK",
    EveryTwoWeeks = "EVERY_TWO_WEEKS",
    Semimonthly = "SEMIMONTHLY",
    Month = "MONTH",
    Quarter = "QUARTER",
    EverySixMonths = "EVERY_SIX_MONTHS",
    Year = "YEAR",
}

/**
 * The pay frequency of the employment
 */
export enum PayFrequency {
    Weekly = "WEEKLY",
    Biweekly = "BIWEEKLY",
    Monthly = "MONTHLY",
    Quarterly = "QUARTERLY",
    Semiannually = "SEMIANNUALLY",
    Annually = "ANNUALLY",
    ThirteenMonthly = "THIRTEEN-MONTHLY",
    ProRata = "PRO_RATA",
    Semimonthly = "SEMIMONTHLY",
}

/**
 * The currency of the pay
 */
export enum PayCurrency {
    Aed = "AED",
    Afn = "AFN",
    All = "ALL",
    Amd = "AMD",
    Ang = "ANG",
    Aoa = "AOA",
    Ars = "ARS",
    Aud = "AUD",
    Awg = "AWG",
    Azn = "AZN",
    Bam = "BAM",
    Bbd = "BBD",
    Bdt = "BDT",
    Bgn = "BGN",
    Bhd = "BHD",
    Bif = "BIF",
    Bmd = "BMD",
    Bnd = "BND",
    Bob = "BOB",
    Brl = "BRL",
    Bsd = "BSD",
    Btn = "BTN",
    Bwp = "BWP",
    Byn = "BYN",
    Bzd = "BZD",
    Cad = "CAD",
    Cdf = "CDF",
    Chf = "CHF",
    Clp = "CLP",
    Cny = "CNY",
    Cop = "COP",
    Crc = "CRC",
    Cup = "CUP",
    Cve = "CVE",
    Czk = "CZK",
    Djf = "DJF",
    Dkk = "DKK",
    Dop = "DOP",
    Dzd = "DZD",
    Egp = "EGP",
    Ern = "ERN",
    Etb = "ETB",
    Eur = "EUR",
    Fjd = "FJD",
    Fkp = "FKP",
    Fok = "FOK",
    Gbp = "GBP",
    Gel = "GEL",
    Ggp = "GGP",
    Ghs = "GHS",
    Gip = "GIP",
    Gmd = "GMD",
    Gnf = "GNF",
    Gtq = "GTQ",
    Gyd = "GYD",
    Hkd = "HKD",
    Hnl = "HNL",
    Hrk = "HRK",
    Htg = "HTG",
    Huf = "HUF",
    Idr = "IDR",
    Ils = "ILS",
    Imp = "IMP",
    Inr = "INR",
    Iqd = "IQD",
    Irr = "IRR",
    Isk = "ISK",
    Jep = "JEP",
    Jmd = "JMD",
    Jod = "JOD",
    Jpy = "JPY",
    Kes = "KES",
    Kgs = "KGS",
    Khr = "KHR",
    Kid = "KID",
    Kmf = "KMF",
    Krw = "KRW",
    Kwd = "KWD",
    Kyd = "KYD",
    Kzt = "KZT",
    Lak = "LAK",
    Lbp = "LBP",
    Lkr = "LKR",
    Lrd = "LRD",
    Lsl = "LSL",
    Lyd = "LYD",
    Mad = "MAD",
    Mdl = "MDL",
    Mga = "MGA",
    Mkd = "MKD",
    Mmk = "MMK",
    Mnt = "MNT",
    Mop = "MOP",
    Mru = "MRU",
    Mur = "MUR",
    Mvr = "MVR",
    Mwk = "MWK",
    Mxn = "MXN",
    Myr = "MYR",
    Mzn = "MZN",
    Nad = "NAD",
    Ngn = "NGN",
    Nio = "NIO",
    Nok = "NOK",
    Npr = "NPR",
    Nzd = "NZD",
    Omr = "OMR",
    Pab = "PAB",
    Pen = "PEN",
    Pgk = "PGK",
    Php = "PHP",
    Pkr = "PKR",
    Pln = "PLN",
    Pyg = "PYG",
    Qar = "QAR",
    Ron = "RON",
    Rsd = "RSD",
    Rub = "RUB",
    Rwf = "RWF",
    Sar = "SAR",
    Sbd = "SBD",
    Scr = "SCR",
    Sdg = "SDG",
    Sek = "SEK",
    Sgd = "SGD",
    Shp = "SHP",
    Sle = "SLE",
    Sll = "SLL",
    Sos = "SOS",
    Srd = "SRD",
    Ssp = "SSP",
    Stn = "STN",
    Syp = "SYP",
    Szl = "SZL",
    Thb = "THB",
    Tjs = "TJS",
    Tmt = "TMT",
    Tnd = "TND",
    Top = "TOP",
    Try = "TRY",
    Ttd = "TTD",
    Tvd = "TVD",
    Twd = "TWD",
    Tzs = "TZS",
    Uah = "UAH",
    Ugx = "UGX",
    Usd = "USD",
    Uyu = "UYU",
    Uzs = "UZS",
    Ves = "VES",
    Vnd = "VND",
    Vuv = "VUV",
    Wst = "WST",
    Xaf = "XAF",
    Xcd = "XCD",
    Xdr = "XDR",
    Xof = "XOF",
    Xpf = "XPF",
    Yer = "YER",
    Zar = "ZAR",
    Zmw = "ZMW",
    Zwl = "ZWL",
}

/**
 * The FLSA status of the employment
 */
export enum FlsaStatus {
    Exempt = "EXEMPT",
    SalariedNonexempt = "SALARIED_NONEXEMPT",
    Nonexempt = "NONEXEMPT",
    Owner = "OWNER",
}

/**
 * The type of employment
 */
export enum EmploymentType {
    FullTime = "FULL_TIME",
    PartTime = "PART_TIME",
    Intern = "INTERN",
    Contractor = "CONTRACTOR",
    Freelance = "FREELANCE",
}

/**
 * The custom field mappings of the object between the remote 3rd party & Panora
 */
export type UnifiedHrisEmploymentOutputFieldMappings = {};

/**
 * The remote data of the employment in the context of the 3rd Party
 */
export type UnifiedHrisEmploymentOutputRemoteData = {};

export type UnifiedHrisEmploymentOutput = {
    /**
     * The job title of the employment
     */
    jobTitle?: string | null | undefined;
    /**
     * The pay rate of the employment
     */
    payRate?: number | null | undefined;
    /**
     * The pay period of the employment
     */
    payPeriod?: PayPeriod | null | undefined;
    /**
     * The pay frequency of the employment
     */
    payFrequency?: PayFrequency | null | undefined;
    /**
     * The currency of the pay
     */
    payCurrency?: PayCurrency | null | undefined;
    /**
     * The FLSA status of the employment
     */
    flsaStatus?: FlsaStatus | null | undefined;
    /**
     * The effective date of the employment
     */
    effectiveDate?: Date | null | undefined;
    /**
     * The type of employment
     */
    employmentType?: EmploymentType | null | undefined;
    /**
     * The UUID of the associated pay group
     */
    payGroupId?: string | null | undefined;
    /**
     * The UUID of the associated employee
     */
    employeeId?: string | null | undefined;
    /**
     * The custom field mappings of the object between the remote 3rd party & Panora
     */
    fieldMappings?: UnifiedHrisEmploymentOutputFieldMappings | null | undefined;
    /**
     * The UUID of the employment record
     */
    id?: string | null | undefined;
    /**
     * The remote ID of the employment in the context of the 3rd Party
     */
    remoteId?: string | null | undefined;
    /**
     * The remote data of the employment in the context of the 3rd Party
     */
    remoteData?: UnifiedHrisEmploymentOutputRemoteData | null | undefined;
    /**
     * The date when the employment was created in the 3rd party system
     */
    remoteCreatedAt?: Date | null | undefined;
    /**
     * The created date of the employment record
     */
    createdAt?: Date | null | undefined;
    /**
     * The last modified date of the employment record
     */
    modifiedAt?: Date | null | undefined;
    /**
     * Indicates if the employment was deleted in the remote system
     */
    remoteWasDeleted?: boolean | null | undefined;
};

/** @internal */
export const PayPeriod$inboundSchema: z.ZodNativeEnum<typeof PayPeriod> = z.nativeEnum(PayPeriod);

/** @internal */
export const PayPeriod$outboundSchema: z.ZodNativeEnum<typeof PayPeriod> = PayPeriod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayPeriod$ {
    /** @deprecated use `PayPeriod$inboundSchema` instead. */
    export const inboundSchema = PayPeriod$inboundSchema;
    /** @deprecated use `PayPeriod$outboundSchema` instead. */
    export const outboundSchema = PayPeriod$outboundSchema;
}

/** @internal */
export const PayFrequency$inboundSchema: z.ZodNativeEnum<typeof PayFrequency> =
    z.nativeEnum(PayFrequency);

/** @internal */
export const PayFrequency$outboundSchema: z.ZodNativeEnum<typeof PayFrequency> =
    PayFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayFrequency$ {
    /** @deprecated use `PayFrequency$inboundSchema` instead. */
    export const inboundSchema = PayFrequency$inboundSchema;
    /** @deprecated use `PayFrequency$outboundSchema` instead. */
    export const outboundSchema = PayFrequency$outboundSchema;
}

/** @internal */
export const PayCurrency$inboundSchema: z.ZodNativeEnum<typeof PayCurrency> =
    z.nativeEnum(PayCurrency);

/** @internal */
export const PayCurrency$outboundSchema: z.ZodNativeEnum<typeof PayCurrency> =
    PayCurrency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayCurrency$ {
    /** @deprecated use `PayCurrency$inboundSchema` instead. */
    export const inboundSchema = PayCurrency$inboundSchema;
    /** @deprecated use `PayCurrency$outboundSchema` instead. */
    export const outboundSchema = PayCurrency$outboundSchema;
}

/** @internal */
export const FlsaStatus$inboundSchema: z.ZodNativeEnum<typeof FlsaStatus> =
    z.nativeEnum(FlsaStatus);

/** @internal */
export const FlsaStatus$outboundSchema: z.ZodNativeEnum<typeof FlsaStatus> =
    FlsaStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlsaStatus$ {
    /** @deprecated use `FlsaStatus$inboundSchema` instead. */
    export const inboundSchema = FlsaStatus$inboundSchema;
    /** @deprecated use `FlsaStatus$outboundSchema` instead. */
    export const outboundSchema = FlsaStatus$outboundSchema;
}

/** @internal */
export const EmploymentType$inboundSchema: z.ZodNativeEnum<typeof EmploymentType> =
    z.nativeEnum(EmploymentType);

/** @internal */
export const EmploymentType$outboundSchema: z.ZodNativeEnum<typeof EmploymentType> =
    EmploymentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentType$ {
    /** @deprecated use `EmploymentType$inboundSchema` instead. */
    export const inboundSchema = EmploymentType$inboundSchema;
    /** @deprecated use `EmploymentType$outboundSchema` instead. */
    export const outboundSchema = EmploymentType$outboundSchema;
}

/** @internal */
export const UnifiedHrisEmploymentOutputFieldMappings$inboundSchema: z.ZodType<
    UnifiedHrisEmploymentOutputFieldMappings,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedHrisEmploymentOutputFieldMappings$Outbound = {};

/** @internal */
export const UnifiedHrisEmploymentOutputFieldMappings$outboundSchema: z.ZodType<
    UnifiedHrisEmploymentOutputFieldMappings$Outbound,
    z.ZodTypeDef,
    UnifiedHrisEmploymentOutputFieldMappings
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisEmploymentOutputFieldMappings$ {
    /** @deprecated use `UnifiedHrisEmploymentOutputFieldMappings$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisEmploymentOutputFieldMappings$inboundSchema;
    /** @deprecated use `UnifiedHrisEmploymentOutputFieldMappings$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisEmploymentOutputFieldMappings$outboundSchema;
    /** @deprecated use `UnifiedHrisEmploymentOutputFieldMappings$Outbound` instead. */
    export type Outbound = UnifiedHrisEmploymentOutputFieldMappings$Outbound;
}

/** @internal */
export const UnifiedHrisEmploymentOutputRemoteData$inboundSchema: z.ZodType<
    UnifiedHrisEmploymentOutputRemoteData,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type UnifiedHrisEmploymentOutputRemoteData$Outbound = {};

/** @internal */
export const UnifiedHrisEmploymentOutputRemoteData$outboundSchema: z.ZodType<
    UnifiedHrisEmploymentOutputRemoteData$Outbound,
    z.ZodTypeDef,
    UnifiedHrisEmploymentOutputRemoteData
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisEmploymentOutputRemoteData$ {
    /** @deprecated use `UnifiedHrisEmploymentOutputRemoteData$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisEmploymentOutputRemoteData$inboundSchema;
    /** @deprecated use `UnifiedHrisEmploymentOutputRemoteData$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisEmploymentOutputRemoteData$outboundSchema;
    /** @deprecated use `UnifiedHrisEmploymentOutputRemoteData$Outbound` instead. */
    export type Outbound = UnifiedHrisEmploymentOutputRemoteData$Outbound;
}

/** @internal */
export const UnifiedHrisEmploymentOutput$inboundSchema: z.ZodType<
    UnifiedHrisEmploymentOutput,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        job_title: z.nullable(z.string()).optional(),
        pay_rate: z.nullable(z.number()).optional(),
        pay_period: z.nullable(PayPeriod$inboundSchema).optional(),
        pay_frequency: z.nullable(PayFrequency$inboundSchema).optional(),
        pay_currency: z.nullable(PayCurrency$inboundSchema).optional(),
        flsa_status: z.nullable(FlsaStatus$inboundSchema).optional(),
        effective_date: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        employment_type: z.nullable(EmploymentType$inboundSchema).optional(),
        pay_group_id: z.nullable(z.string()).optional(),
        employee_id: z.nullable(z.string()).optional(),
        field_mappings: z
            .nullable(z.lazy(() => UnifiedHrisEmploymentOutputFieldMappings$inboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remote_id: z.nullable(z.string()).optional(),
        remote_data: z
            .nullable(z.lazy(() => UnifiedHrisEmploymentOutputRemoteData$inboundSchema))
            .optional(),
        remote_created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        modified_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        remote_was_deleted: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            job_title: "jobTitle",
            pay_rate: "payRate",
            pay_period: "payPeriod",
            pay_frequency: "payFrequency",
            pay_currency: "payCurrency",
            flsa_status: "flsaStatus",
            effective_date: "effectiveDate",
            employment_type: "employmentType",
            pay_group_id: "payGroupId",
            employee_id: "employeeId",
            field_mappings: "fieldMappings",
            remote_id: "remoteId",
            remote_data: "remoteData",
            remote_created_at: "remoteCreatedAt",
            created_at: "createdAt",
            modified_at: "modifiedAt",
            remote_was_deleted: "remoteWasDeleted",
        });
    });

/** @internal */
export type UnifiedHrisEmploymentOutput$Outbound = {
    job_title?: string | null | undefined;
    pay_rate?: number | null | undefined;
    pay_period?: string | null | undefined;
    pay_frequency?: string | null | undefined;
    pay_currency?: string | null | undefined;
    flsa_status?: string | null | undefined;
    effective_date?: string | null | undefined;
    employment_type?: string | null | undefined;
    pay_group_id?: string | null | undefined;
    employee_id?: string | null | undefined;
    field_mappings?: UnifiedHrisEmploymentOutputFieldMappings$Outbound | null | undefined;
    id?: string | null | undefined;
    remote_id?: string | null | undefined;
    remote_data?: UnifiedHrisEmploymentOutputRemoteData$Outbound | null | undefined;
    remote_created_at?: string | null | undefined;
    created_at?: string | null | undefined;
    modified_at?: string | null | undefined;
    remote_was_deleted?: boolean | null | undefined;
};

/** @internal */
export const UnifiedHrisEmploymentOutput$outboundSchema: z.ZodType<
    UnifiedHrisEmploymentOutput$Outbound,
    z.ZodTypeDef,
    UnifiedHrisEmploymentOutput
> = z
    .object({
        jobTitle: z.nullable(z.string()).optional(),
        payRate: z.nullable(z.number()).optional(),
        payPeriod: z.nullable(PayPeriod$outboundSchema).optional(),
        payFrequency: z.nullable(PayFrequency$outboundSchema).optional(),
        payCurrency: z.nullable(PayCurrency$outboundSchema).optional(),
        flsaStatus: z.nullable(FlsaStatus$outboundSchema).optional(),
        effectiveDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        employmentType: z.nullable(EmploymentType$outboundSchema).optional(),
        payGroupId: z.nullable(z.string()).optional(),
        employeeId: z.nullable(z.string()).optional(),
        fieldMappings: z
            .nullable(z.lazy(() => UnifiedHrisEmploymentOutputFieldMappings$outboundSchema))
            .optional(),
        id: z.nullable(z.string()).optional(),
        remoteId: z.nullable(z.string()).optional(),
        remoteData: z
            .nullable(z.lazy(() => UnifiedHrisEmploymentOutputRemoteData$outboundSchema))
            .optional(),
        remoteCreatedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        modifiedAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        remoteWasDeleted: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            jobTitle: "job_title",
            payRate: "pay_rate",
            payPeriod: "pay_period",
            payFrequency: "pay_frequency",
            payCurrency: "pay_currency",
            flsaStatus: "flsa_status",
            effectiveDate: "effective_date",
            employmentType: "employment_type",
            payGroupId: "pay_group_id",
            employeeId: "employee_id",
            fieldMappings: "field_mappings",
            remoteId: "remote_id",
            remoteData: "remote_data",
            remoteCreatedAt: "remote_created_at",
            createdAt: "created_at",
            modifiedAt: "modified_at",
            remoteWasDeleted: "remote_was_deleted",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnifiedHrisEmploymentOutput$ {
    /** @deprecated use `UnifiedHrisEmploymentOutput$inboundSchema` instead. */
    export const inboundSchema = UnifiedHrisEmploymentOutput$inboundSchema;
    /** @deprecated use `UnifiedHrisEmploymentOutput$outboundSchema` instead. */
    export const outboundSchema = UnifiedHrisEmploymentOutput$outboundSchema;
    /** @deprecated use `UnifiedHrisEmploymentOutput$Outbound` instead. */
    export type Outbound = UnifiedHrisEmploymentOutput$Outbound;
}
