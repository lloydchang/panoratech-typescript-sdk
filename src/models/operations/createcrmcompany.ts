/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateCrmCompanyRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean | undefined;
    unifiedCrmCompanyInput: components.UnifiedCrmCompanyInput;
};

export type CreateCrmCompanyResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedCrmCompanyOutput?: components.UnifiedCrmCompanyOutput | undefined;
};

/** @internal */
export namespace CreateCrmCompanyRequest$ {
    export const inboundSchema: z.ZodType<CreateCrmCompanyRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedCrmCompanyInput: components.UnifiedCrmCompanyInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedCrmCompanyInput: "unifiedCrmCompanyInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedCrmCompanyInput: components.UnifiedCrmCompanyInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateCrmCompanyRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedCrmCompanyInput: components.UnifiedCrmCompanyInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedCrmCompanyInput: "UnifiedCrmCompanyInput",
            });
        });
}

/** @internal */
export namespace CreateCrmCompanyResponse$ {
    export const inboundSchema: z.ZodType<CreateCrmCompanyResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            UnifiedCrmCompanyOutput: components.UnifiedCrmCompanyOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedCrmCompanyOutput: "unifiedCrmCompanyOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedCrmCompanyOutput?: components.UnifiedCrmCompanyOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateCrmCompanyResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedCrmCompanyOutput: components.UnifiedCrmCompanyOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedCrmCompanyOutput: "UnifiedCrmCompanyOutput",
            });
        });
}
