/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListFilestorageUsersRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original software.
     */
    remoteData?: boolean | undefined;
    /**
     * Set to get the number of records.
     */
    limit?: number | undefined;
    /**
     * Set to get the number of records after this cursor.
     */
    cursor?: string | undefined;
};

export type ListFilestorageUsersResponseBody = {
    prevCursor: string;
    nextCursor: string;
    data: Array<components.UnifiedUserOutput>;
};

export type ListFilestorageUsersResponse = {
    httpMeta: components.HTTPMetadata;
    object?: ListFilestorageUsersResponseBody | undefined;
};

/** @internal */
export const ListFilestorageUsersRequest$inboundSchema: z.ZodType<
    ListFilestorageUsersRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        limit: z.number().default(50),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type ListFilestorageUsersRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    limit: number;
    cursor?: string | undefined;
};

/** @internal */
export const ListFilestorageUsersRequest$outboundSchema: z.ZodType<
    ListFilestorageUsersRequest$Outbound,
    z.ZodTypeDef,
    ListFilestorageUsersRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        limit: z.number().default(50),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFilestorageUsersRequest$ {
    /** @deprecated use `ListFilestorageUsersRequest$inboundSchema` instead. */
    export const inboundSchema = ListFilestorageUsersRequest$inboundSchema;
    /** @deprecated use `ListFilestorageUsersRequest$outboundSchema` instead. */
    export const outboundSchema = ListFilestorageUsersRequest$outboundSchema;
    /** @deprecated use `ListFilestorageUsersRequest$Outbound` instead. */
    export type Outbound = ListFilestorageUsersRequest$Outbound;
}

/** @internal */
export const ListFilestorageUsersResponseBody$inboundSchema: z.ZodType<
    ListFilestorageUsersResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        prev_cursor: z.string(),
        next_cursor: z.string(),
        data: z.array(components.UnifiedUserOutput$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            prev_cursor: "prevCursor",
            next_cursor: "nextCursor",
        });
    });

/** @internal */
export type ListFilestorageUsersResponseBody$Outbound = {
    prev_cursor: string;
    next_cursor: string;
    data: Array<components.UnifiedUserOutput$Outbound>;
};

/** @internal */
export const ListFilestorageUsersResponseBody$outboundSchema: z.ZodType<
    ListFilestorageUsersResponseBody$Outbound,
    z.ZodTypeDef,
    ListFilestorageUsersResponseBody
> = z
    .object({
        prevCursor: z.string(),
        nextCursor: z.string(),
        data: z.array(components.UnifiedUserOutput$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            prevCursor: "prev_cursor",
            nextCursor: "next_cursor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFilestorageUsersResponseBody$ {
    /** @deprecated use `ListFilestorageUsersResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListFilestorageUsersResponseBody$inboundSchema;
    /** @deprecated use `ListFilestorageUsersResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListFilestorageUsersResponseBody$outboundSchema;
    /** @deprecated use `ListFilestorageUsersResponseBody$Outbound` instead. */
    export type Outbound = ListFilestorageUsersResponseBody$Outbound;
}

/** @internal */
export const ListFilestorageUsersResponse$inboundSchema: z.ZodType<
    ListFilestorageUsersResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        object: z.lazy(() => ListFilestorageUsersResponseBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
        });
    });

/** @internal */
export type ListFilestorageUsersResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    object?: ListFilestorageUsersResponseBody$Outbound | undefined;
};

/** @internal */
export const ListFilestorageUsersResponse$outboundSchema: z.ZodType<
    ListFilestorageUsersResponse$Outbound,
    z.ZodTypeDef,
    ListFilestorageUsersResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        object: z.lazy(() => ListFilestorageUsersResponseBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFilestorageUsersResponse$ {
    /** @deprecated use `ListFilestorageUsersResponse$inboundSchema` instead. */
    export const inboundSchema = ListFilestorageUsersResponse$inboundSchema;
    /** @deprecated use `ListFilestorageUsersResponse$outboundSchema` instead. */
    export const outboundSchema = ListFilestorageUsersResponse$outboundSchema;
    /** @deprecated use `ListFilestorageUsersResponse$Outbound` instead. */
    export type Outbound = ListFilestorageUsersResponse$Outbound;
}
