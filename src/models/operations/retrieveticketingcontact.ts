/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveTicketingContactRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * id of the contact you want to retrieve.
   */
  id: string;
  /**
   * Set to true to include data from the original Ticketing software.
   */
  remoteData?: boolean | undefined;
};

export type RetrieveTicketingContactResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedTicketingContactOutput>;
};

/** @internal */
export const RetrieveTicketingContactRequest$inboundSchema: z.ZodType<
  RetrieveTicketingContactRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  id: z.string(),
  remote_data: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type RetrieveTicketingContactRequest$Outbound = {
  "x-connection-token": string;
  id: string;
  remote_data?: boolean | undefined;
};

/** @internal */
export const RetrieveTicketingContactRequest$outboundSchema: z.ZodType<
  RetrieveTicketingContactRequest$Outbound,
  z.ZodTypeDef,
  RetrieveTicketingContactRequest
> = z.object({
  xConnectionToken: z.string(),
  id: z.string(),
  remoteData: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveTicketingContactRequest$ {
  /** @deprecated use `RetrieveTicketingContactRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveTicketingContactRequest$inboundSchema;
  /** @deprecated use `RetrieveTicketingContactRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveTicketingContactRequest$outboundSchema;
  /** @deprecated use `RetrieveTicketingContactRequest$Outbound` instead. */
  export type Outbound = RetrieveTicketingContactRequest$Outbound;
}

export function retrieveTicketingContactRequestToJSON(
  retrieveTicketingContactRequest: RetrieveTicketingContactRequest,
): string {
  return JSON.stringify(
    RetrieveTicketingContactRequest$outboundSchema.parse(
      retrieveTicketingContactRequest,
    ),
  );
}

export function retrieveTicketingContactRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveTicketingContactRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveTicketingContactRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveTicketingContactRequest' from JSON`,
  );
}

/** @internal */
export const RetrieveTicketingContactResponseBody$inboundSchema: z.ZodType<
  RetrieveTicketingContactResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingContactOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type RetrieveTicketingContactResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedTicketingContactOutput$Outbound>;
};

/** @internal */
export const RetrieveTicketingContactResponseBody$outboundSchema: z.ZodType<
  RetrieveTicketingContactResponseBody$Outbound,
  z.ZodTypeDef,
  RetrieveTicketingContactResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedTicketingContactOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveTicketingContactResponseBody$ {
  /** @deprecated use `RetrieveTicketingContactResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveTicketingContactResponseBody$inboundSchema;
  /** @deprecated use `RetrieveTicketingContactResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveTicketingContactResponseBody$outboundSchema;
  /** @deprecated use `RetrieveTicketingContactResponseBody$Outbound` instead. */
  export type Outbound = RetrieveTicketingContactResponseBody$Outbound;
}

export function retrieveTicketingContactResponseBodyToJSON(
  retrieveTicketingContactResponseBody: RetrieveTicketingContactResponseBody,
): string {
  return JSON.stringify(
    RetrieveTicketingContactResponseBody$outboundSchema.parse(
      retrieveTicketingContactResponseBody,
    ),
  );
}

export function retrieveTicketingContactResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveTicketingContactResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetrieveTicketingContactResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveTicketingContactResponseBody' from JSON`,
  );
}
