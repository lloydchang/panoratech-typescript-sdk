/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteRequest = {
  /**
   * id of the webhook to delete.
   */
  id: string;
};

/** @internal */
export const DeleteRequest$inboundSchema: z.ZodType<
  DeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteRequest$outboundSchema: z.ZodType<
  DeleteRequest$Outbound,
  z.ZodTypeDef,
  DeleteRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRequest$ {
  /** @deprecated use `DeleteRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteRequest$inboundSchema;
  /** @deprecated use `DeleteRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteRequest$outboundSchema;
  /** @deprecated use `DeleteRequest$Outbound` instead. */
  export type Outbound = DeleteRequest$Outbound;
}

export function deleteRequestToJSON(deleteRequest: DeleteRequest): string {
  return JSON.stringify(DeleteRequest$outboundSchema.parse(deleteRequest));
}

export function deleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteRequest' from JSON`,
  );
}
