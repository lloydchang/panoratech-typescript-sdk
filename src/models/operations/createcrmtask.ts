/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCrmTaskRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original Crm software.
   */
  remoteData?: boolean | undefined;
  unifiedCrmTaskInput: components.UnifiedCrmTaskInput;
};

/** @internal */
export const CreateCrmTaskRequest$inboundSchema: z.ZodType<
  CreateCrmTaskRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  UnifiedCrmTaskInput: components.UnifiedCrmTaskInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
    "UnifiedCrmTaskInput": "unifiedCrmTaskInput",
  });
});

/** @internal */
export type CreateCrmTaskRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  UnifiedCrmTaskInput: components.UnifiedCrmTaskInput$Outbound;
};

/** @internal */
export const CreateCrmTaskRequest$outboundSchema: z.ZodType<
  CreateCrmTaskRequest$Outbound,
  z.ZodTypeDef,
  CreateCrmTaskRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  unifiedCrmTaskInput: components.UnifiedCrmTaskInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
    unifiedCrmTaskInput: "UnifiedCrmTaskInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCrmTaskRequest$ {
  /** @deprecated use `CreateCrmTaskRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCrmTaskRequest$inboundSchema;
  /** @deprecated use `CreateCrmTaskRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCrmTaskRequest$outboundSchema;
  /** @deprecated use `CreateCrmTaskRequest$Outbound` instead. */
  export type Outbound = CreateCrmTaskRequest$Outbound;
}

export function createCrmTaskRequestToJSON(
  createCrmTaskRequest: CreateCrmTaskRequest,
): string {
  return JSON.stringify(
    CreateCrmTaskRequest$outboundSchema.parse(createCrmTaskRequest),
  );
}

export function createCrmTaskRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCrmTaskRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCrmTaskRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCrmTaskRequest' from JSON`,
  );
}
