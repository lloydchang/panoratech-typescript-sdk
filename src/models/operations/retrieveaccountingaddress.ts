/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type RetrieveAccountingAddressRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * id of the address you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
};

export type RetrieveAccountingAddressResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedAccountingAddressOutput?: components.UnifiedAccountingAddressOutput | undefined;
};

/** @internal */
export const RetrieveAccountingAddressRequest$inboundSchema: z.ZodType<
    RetrieveAccountingAddressRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        id: z.string(),
        remote_data: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type RetrieveAccountingAddressRequest$Outbound = {
    "x-connection-token": string;
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const RetrieveAccountingAddressRequest$outboundSchema: z.ZodType<
    RetrieveAccountingAddressRequest$Outbound,
    z.ZodTypeDef,
    RetrieveAccountingAddressRequest
> = z
    .object({
        xConnectionToken: z.string(),
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveAccountingAddressRequest$ {
    /** @deprecated use `RetrieveAccountingAddressRequest$inboundSchema` instead. */
    export const inboundSchema = RetrieveAccountingAddressRequest$inboundSchema;
    /** @deprecated use `RetrieveAccountingAddressRequest$outboundSchema` instead. */
    export const outboundSchema = RetrieveAccountingAddressRequest$outboundSchema;
    /** @deprecated use `RetrieveAccountingAddressRequest$Outbound` instead. */
    export type Outbound = RetrieveAccountingAddressRequest$Outbound;
}

/** @internal */
export const RetrieveAccountingAddressResponse$inboundSchema: z.ZodType<
    RetrieveAccountingAddressResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        UnifiedAccountingAddressOutput:
            components.UnifiedAccountingAddressOutput$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            UnifiedAccountingAddressOutput: "unifiedAccountingAddressOutput",
        });
    });

/** @internal */
export type RetrieveAccountingAddressResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    UnifiedAccountingAddressOutput?: components.UnifiedAccountingAddressOutput$Outbound | undefined;
};

/** @internal */
export const RetrieveAccountingAddressResponse$outboundSchema: z.ZodType<
    RetrieveAccountingAddressResponse$Outbound,
    z.ZodTypeDef,
    RetrieveAccountingAddressResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        unifiedAccountingAddressOutput:
            components.UnifiedAccountingAddressOutput$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            unifiedAccountingAddressOutput: "UnifiedAccountingAddressOutput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveAccountingAddressResponse$ {
    /** @deprecated use `RetrieveAccountingAddressResponse$inboundSchema` instead. */
    export const inboundSchema = RetrieveAccountingAddressResponse$inboundSchema;
    /** @deprecated use `RetrieveAccountingAddressResponse$outboundSchema` instead. */
    export const outboundSchema = RetrieveAccountingAddressResponse$outboundSchema;
    /** @deprecated use `RetrieveAccountingAddressResponse$Outbound` instead. */
    export type Outbound = RetrieveAccountingAddressResponse$Outbound;
}
