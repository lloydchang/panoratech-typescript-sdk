/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListAtsOfficeRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original software.
     */
    remoteData?: boolean | undefined;
    /**
     * Set to get the number of records.
     */
    limit?: number | undefined;
    /**
     * Set to get the number of records after this cursor.
     */
    cursor?: string | undefined;
};

export type ListAtsOfficeResponseBody = {
    prevCursor: string | null;
    nextCursor: string | null;
    data: Array<components.UnifiedAtsOfficeOutput>;
};

export type ListAtsOfficeResponse = {
    result: ListAtsOfficeResponseBody;
};

/** @internal */
export const ListAtsOfficeRequest$inboundSchema: z.ZodType<
    ListAtsOfficeRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        limit: z.number().default(30),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type ListAtsOfficeRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    limit: number;
    cursor?: string | undefined;
};

/** @internal */
export const ListAtsOfficeRequest$outboundSchema: z.ZodType<
    ListAtsOfficeRequest$Outbound,
    z.ZodTypeDef,
    ListAtsOfficeRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        limit: z.number().default(30),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAtsOfficeRequest$ {
    /** @deprecated use `ListAtsOfficeRequest$inboundSchema` instead. */
    export const inboundSchema = ListAtsOfficeRequest$inboundSchema;
    /** @deprecated use `ListAtsOfficeRequest$outboundSchema` instead. */
    export const outboundSchema = ListAtsOfficeRequest$outboundSchema;
    /** @deprecated use `ListAtsOfficeRequest$Outbound` instead. */
    export type Outbound = ListAtsOfficeRequest$Outbound;
}

/** @internal */
export const ListAtsOfficeResponseBody$inboundSchema: z.ZodType<
    ListAtsOfficeResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        prev_cursor: z.nullable(z.string()),
        next_cursor: z.nullable(z.string()),
        data: z.array(components.UnifiedAtsOfficeOutput$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            prev_cursor: "prevCursor",
            next_cursor: "nextCursor",
        });
    });

/** @internal */
export type ListAtsOfficeResponseBody$Outbound = {
    prev_cursor: string | null;
    next_cursor: string | null;
    data: Array<components.UnifiedAtsOfficeOutput$Outbound>;
};

/** @internal */
export const ListAtsOfficeResponseBody$outboundSchema: z.ZodType<
    ListAtsOfficeResponseBody$Outbound,
    z.ZodTypeDef,
    ListAtsOfficeResponseBody
> = z
    .object({
        prevCursor: z.nullable(z.string()),
        nextCursor: z.nullable(z.string()),
        data: z.array(components.UnifiedAtsOfficeOutput$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            prevCursor: "prev_cursor",
            nextCursor: "next_cursor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAtsOfficeResponseBody$ {
    /** @deprecated use `ListAtsOfficeResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListAtsOfficeResponseBody$inboundSchema;
    /** @deprecated use `ListAtsOfficeResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListAtsOfficeResponseBody$outboundSchema;
    /** @deprecated use `ListAtsOfficeResponseBody$Outbound` instead. */
    export type Outbound = ListAtsOfficeResponseBody$Outbound;
}

/** @internal */
export const ListAtsOfficeResponse$inboundSchema: z.ZodType<
    ListAtsOfficeResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: z.lazy(() => ListAtsOfficeResponseBody$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListAtsOfficeResponse$Outbound = {
    Result: ListAtsOfficeResponseBody$Outbound;
};

/** @internal */
export const ListAtsOfficeResponse$outboundSchema: z.ZodType<
    ListAtsOfficeResponse$Outbound,
    z.ZodTypeDef,
    ListAtsOfficeResponse
> = z
    .object({
        result: z.lazy(() => ListAtsOfficeResponseBody$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAtsOfficeResponse$ {
    /** @deprecated use `ListAtsOfficeResponse$inboundSchema` instead. */
    export const inboundSchema = ListAtsOfficeResponse$inboundSchema;
    /** @deprecated use `ListAtsOfficeResponse$outboundSchema` instead. */
    export const outboundSchema = ListAtsOfficeResponse$outboundSchema;
    /** @deprecated use `ListAtsOfficeResponse$Outbound` instead. */
    export type Outbound = ListAtsOfficeResponse$Outbound;
}
