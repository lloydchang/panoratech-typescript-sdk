/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateFilestorageFolderRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    remoteData: boolean;
    unifiedFilestorageFolderInput: components.UnifiedFilestorageFolderInput;
};

export type CreateFilestorageFolderResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedFilestorageFolderOutput?: components.UnifiedFilestorageFolderOutput | undefined;
};

/** @internal */
export namespace CreateFilestorageFolderRequest$ {
    export const inboundSchema: z.ZodType<CreateFilestorageFolderRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean(),
            UnifiedFilestorageFolderInput: components.UnifiedFilestorageFolderInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedFilestorageFolderInput: "unifiedFilestorageFolderInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data: boolean;
        UnifiedFilestorageFolderInput: components.UnifiedFilestorageFolderInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateFilestorageFolderRequest> =
        z
            .object({
                xConnectionToken: z.string(),
                remoteData: z.boolean(),
                unifiedFilestorageFolderInput:
                    components.UnifiedFilestorageFolderInput$.outboundSchema,
            })
            .transform((v) => {
                return remap$(v, {
                    xConnectionToken: "x-connection-token",
                    remoteData: "remote_data",
                    unifiedFilestorageFolderInput: "UnifiedFilestorageFolderInput",
                });
            });
}

/** @internal */
export namespace CreateFilestorageFolderResponse$ {
    export const inboundSchema: z.ZodType<CreateFilestorageFolderResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                UnifiedFilestorageFolderOutput:
                    components.UnifiedFilestorageFolderOutput$.inboundSchema.optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    HttpMeta: "httpMeta",
                    UnifiedFilestorageFolderOutput: "unifiedFilestorageFolderOutput",
                });
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedFilestorageFolderOutput?:
            | components.UnifiedFilestorageFolderOutput$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateFilestorageFolderResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedFilestorageFolderOutput:
                components.UnifiedFilestorageFolderOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedFilestorageFolderOutput: "UnifiedFilestorageFolderOutput",
            });
        });
}
