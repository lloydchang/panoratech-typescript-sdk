/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type RetrieveMarketingautomationTemplateRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * id of the template you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Marketingautomation software.
     */
    remoteData?: boolean | undefined;
};

export type RetrieveMarketingautomationTemplateResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedMarketingautomationTemplateOutput?:
        | components.UnifiedMarketingautomationTemplateOutput
        | undefined;
};

/** @internal */
export const RetrieveMarketingautomationTemplateRequest$inboundSchema: z.ZodType<
    RetrieveMarketingautomationTemplateRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        id: z.string(),
        remote_data: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type RetrieveMarketingautomationTemplateRequest$Outbound = {
    "x-connection-token": string;
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const RetrieveMarketingautomationTemplateRequest$outboundSchema: z.ZodType<
    RetrieveMarketingautomationTemplateRequest$Outbound,
    z.ZodTypeDef,
    RetrieveMarketingautomationTemplateRequest
> = z
    .object({
        xConnectionToken: z.string(),
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveMarketingautomationTemplateRequest$ {
    /** @deprecated use `RetrieveMarketingautomationTemplateRequest$inboundSchema` instead. */
    export const inboundSchema = RetrieveMarketingautomationTemplateRequest$inboundSchema;
    /** @deprecated use `RetrieveMarketingautomationTemplateRequest$outboundSchema` instead. */
    export const outboundSchema = RetrieveMarketingautomationTemplateRequest$outboundSchema;
    /** @deprecated use `RetrieveMarketingautomationTemplateRequest$Outbound` instead. */
    export type Outbound = RetrieveMarketingautomationTemplateRequest$Outbound;
}

/** @internal */
export const RetrieveMarketingautomationTemplateResponse$inboundSchema: z.ZodType<
    RetrieveMarketingautomationTemplateResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        UnifiedMarketingautomationTemplateOutput:
            components.UnifiedMarketingautomationTemplateOutput$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            UnifiedMarketingautomationTemplateOutput: "unifiedMarketingautomationTemplateOutput",
        });
    });

/** @internal */
export type RetrieveMarketingautomationTemplateResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    UnifiedMarketingautomationTemplateOutput?:
        | components.UnifiedMarketingautomationTemplateOutput$Outbound
        | undefined;
};

/** @internal */
export const RetrieveMarketingautomationTemplateResponse$outboundSchema: z.ZodType<
    RetrieveMarketingautomationTemplateResponse$Outbound,
    z.ZodTypeDef,
    RetrieveMarketingautomationTemplateResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        unifiedMarketingautomationTemplateOutput:
            components.UnifiedMarketingautomationTemplateOutput$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            unifiedMarketingautomationTemplateOutput: "UnifiedMarketingautomationTemplateOutput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveMarketingautomationTemplateResponse$ {
    /** @deprecated use `RetrieveMarketingautomationTemplateResponse$inboundSchema` instead. */
    export const inboundSchema = RetrieveMarketingautomationTemplateResponse$inboundSchema;
    /** @deprecated use `RetrieveMarketingautomationTemplateResponse$outboundSchema` instead. */
    export const outboundSchema = RetrieveMarketingautomationTemplateResponse$outboundSchema;
    /** @deprecated use `RetrieveMarketingautomationTemplateResponse$Outbound` instead. */
    export type Outbound = RetrieveMarketingautomationTemplateResponse$Outbound;
}
