/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RequestRequest = {
  xConnectionToken: string;
  passThroughRequestDto: components.PassThroughRequestDto;
};

export type RequestResponseBody = {};

/** @internal */
export const RequestRequest$inboundSchema: z.ZodType<
  RequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  PassThroughRequestDto: components.PassThroughRequestDto$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "PassThroughRequestDto": "passThroughRequestDto",
  });
});

/** @internal */
export type RequestRequest$Outbound = {
  "x-connection-token": string;
  PassThroughRequestDto: components.PassThroughRequestDto$Outbound;
};

/** @internal */
export const RequestRequest$outboundSchema: z.ZodType<
  RequestRequest$Outbound,
  z.ZodTypeDef,
  RequestRequest
> = z.object({
  xConnectionToken: z.string(),
  passThroughRequestDto: components.PassThroughRequestDto$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    passThroughRequestDto: "PassThroughRequestDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestRequest$ {
  /** @deprecated use `RequestRequest$inboundSchema` instead. */
  export const inboundSchema = RequestRequest$inboundSchema;
  /** @deprecated use `RequestRequest$outboundSchema` instead. */
  export const outboundSchema = RequestRequest$outboundSchema;
  /** @deprecated use `RequestRequest$Outbound` instead. */
  export type Outbound = RequestRequest$Outbound;
}

export function requestRequestToJSON(requestRequest: RequestRequest): string {
  return JSON.stringify(RequestRequest$outboundSchema.parse(requestRequest));
}

export function requestRequestFromJSON(
  jsonString: string,
): SafeParseResult<RequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestRequest' from JSON`,
  );
}

/** @internal */
export const RequestResponseBody$inboundSchema: z.ZodType<
  RequestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RequestResponseBody$Outbound = {};

/** @internal */
export const RequestResponseBody$outboundSchema: z.ZodType<
  RequestResponseBody$Outbound,
  z.ZodTypeDef,
  RequestResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestResponseBody$ {
  /** @deprecated use `RequestResponseBody$inboundSchema` instead. */
  export const inboundSchema = RequestResponseBody$inboundSchema;
  /** @deprecated use `RequestResponseBody$outboundSchema` instead. */
  export const outboundSchema = RequestResponseBody$outboundSchema;
  /** @deprecated use `RequestResponseBody$Outbound` instead. */
  export type Outbound = RequestResponseBody$Outbound;
}

export function requestResponseBodyToJSON(
  requestResponseBody: RequestResponseBody,
): string {
  return JSON.stringify(
    RequestResponseBody$outboundSchema.parse(requestResponseBody),
  );
}

export function requestResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RequestResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestResponseBody' from JSON`,
  );
}
