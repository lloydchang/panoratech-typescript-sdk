/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type RetrieveCrmStageRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * id of the stage you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean | undefined;
};

export type RetrieveCrmStageResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedCrmStageOutput?: components.UnifiedCrmStageOutput | undefined;
};

/** @internal */
export const RetrieveCrmStageRequest$inboundSchema: z.ZodType<
    RetrieveCrmStageRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        id: z.string(),
        remote_data: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type RetrieveCrmStageRequest$Outbound = {
    "x-connection-token": string;
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const RetrieveCrmStageRequest$outboundSchema: z.ZodType<
    RetrieveCrmStageRequest$Outbound,
    z.ZodTypeDef,
    RetrieveCrmStageRequest
> = z
    .object({
        xConnectionToken: z.string(),
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveCrmStageRequest$ {
    /** @deprecated use `RetrieveCrmStageRequest$inboundSchema` instead. */
    export const inboundSchema = RetrieveCrmStageRequest$inboundSchema;
    /** @deprecated use `RetrieveCrmStageRequest$outboundSchema` instead. */
    export const outboundSchema = RetrieveCrmStageRequest$outboundSchema;
    /** @deprecated use `RetrieveCrmStageRequest$Outbound` instead. */
    export type Outbound = RetrieveCrmStageRequest$Outbound;
}

/** @internal */
export const RetrieveCrmStageResponse$inboundSchema: z.ZodType<
    RetrieveCrmStageResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        UnifiedCrmStageOutput: components.UnifiedCrmStageOutput$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            UnifiedCrmStageOutput: "unifiedCrmStageOutput",
        });
    });

/** @internal */
export type RetrieveCrmStageResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    UnifiedCrmStageOutput?: components.UnifiedCrmStageOutput$Outbound | undefined;
};

/** @internal */
export const RetrieveCrmStageResponse$outboundSchema: z.ZodType<
    RetrieveCrmStageResponse$Outbound,
    z.ZodTypeDef,
    RetrieveCrmStageResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        unifiedCrmStageOutput: components.UnifiedCrmStageOutput$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            unifiedCrmStageOutput: "UnifiedCrmStageOutput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveCrmStageResponse$ {
    /** @deprecated use `RetrieveCrmStageResponse$inboundSchema` instead. */
    export const inboundSchema = RetrieveCrmStageResponse$inboundSchema;
    /** @deprecated use `RetrieveCrmStageResponse$outboundSchema` instead. */
    export const outboundSchema = RetrieveCrmStageResponse$outboundSchema;
    /** @deprecated use `RetrieveCrmStageResponse$Outbound` instead. */
    export type Outbound = RetrieveCrmStageResponse$Outbound;
}
