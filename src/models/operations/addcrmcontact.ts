/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type AddCrmContactRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original CRM software.
     */
    remoteData?: boolean | undefined;
    unifiedCrmContactInput: components.UnifiedCrmContactInput;
};

export type AddCrmContactResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedCrmContactOutput?: components.UnifiedCrmContactOutput | undefined;
};

/** @internal */
export namespace AddCrmContactRequest$ {
    export const inboundSchema: z.ZodType<AddCrmContactRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedCrmContactInput: components.UnifiedCrmContactInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedCrmContactInput: "unifiedCrmContactInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedCrmContactInput: components.UnifiedCrmContactInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddCrmContactRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedCrmContactInput: components.UnifiedCrmContactInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedCrmContactInput: "UnifiedCrmContactInput",
            });
        });
}

/** @internal */
export namespace AddCrmContactResponse$ {
    export const inboundSchema: z.ZodType<AddCrmContactResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            UnifiedCrmContactOutput: components.UnifiedCrmContactOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedCrmContactOutput: "unifiedCrmContactOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedCrmContactOutput?: components.UnifiedCrmContactOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddCrmContactResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedCrmContactOutput: components.UnifiedCrmContactOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedCrmContactOutput: "UnifiedCrmContactOutput",
            });
        });
}
