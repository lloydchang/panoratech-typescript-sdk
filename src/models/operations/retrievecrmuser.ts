/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type RetrieveCrmUserRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * id of the user you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean | undefined;
};

export type RetrieveCrmUserResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedCrmUserOutput?: components.UnifiedCrmUserOutput | undefined;
};

/** @internal */
export const RetrieveCrmUserRequest$inboundSchema: z.ZodType<
    RetrieveCrmUserRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        id: z.string(),
        remote_data: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type RetrieveCrmUserRequest$Outbound = {
    "x-connection-token": string;
    id: string;
    remote_data?: boolean | undefined;
};

/** @internal */
export const RetrieveCrmUserRequest$outboundSchema: z.ZodType<
    RetrieveCrmUserRequest$Outbound,
    z.ZodTypeDef,
    RetrieveCrmUserRequest
> = z
    .object({
        xConnectionToken: z.string(),
        id: z.string(),
        remoteData: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveCrmUserRequest$ {
    /** @deprecated use `RetrieveCrmUserRequest$inboundSchema` instead. */
    export const inboundSchema = RetrieveCrmUserRequest$inboundSchema;
    /** @deprecated use `RetrieveCrmUserRequest$outboundSchema` instead. */
    export const outboundSchema = RetrieveCrmUserRequest$outboundSchema;
    /** @deprecated use `RetrieveCrmUserRequest$Outbound` instead. */
    export type Outbound = RetrieveCrmUserRequest$Outbound;
}

/** @internal */
export const RetrieveCrmUserResponse$inboundSchema: z.ZodType<
    RetrieveCrmUserResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        UnifiedCrmUserOutput: components.UnifiedCrmUserOutput$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            UnifiedCrmUserOutput: "unifiedCrmUserOutput",
        });
    });

/** @internal */
export type RetrieveCrmUserResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    UnifiedCrmUserOutput?: components.UnifiedCrmUserOutput$Outbound | undefined;
};

/** @internal */
export const RetrieveCrmUserResponse$outboundSchema: z.ZodType<
    RetrieveCrmUserResponse$Outbound,
    z.ZodTypeDef,
    RetrieveCrmUserResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        unifiedCrmUserOutput: components.UnifiedCrmUserOutput$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            unifiedCrmUserOutput: "UnifiedCrmUserOutput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveCrmUserResponse$ {
    /** @deprecated use `RetrieveCrmUserResponse$inboundSchema` instead. */
    export const inboundSchema = RetrieveCrmUserResponse$inboundSchema;
    /** @deprecated use `RetrieveCrmUserResponse$outboundSchema` instead. */
    export const outboundSchema = RetrieveCrmUserResponse$outboundSchema;
    /** @deprecated use `RetrieveCrmUserResponse$Outbound` instead. */
    export type Outbound = RetrieveCrmUserResponse$Outbound;
}
