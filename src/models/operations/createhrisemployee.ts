/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateHrisEmployeeRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Hris software.
     */
    remoteData?: boolean | undefined;
    unifiedHrisEmployeeInput: components.UnifiedHrisEmployeeInput;
};

export type CreateHrisEmployeeResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedHrisEmployeeOutput?: components.UnifiedHrisEmployeeOutput | undefined;
};

/** @internal */
export namespace CreateHrisEmployeeRequest$ {
    export const inboundSchema: z.ZodType<CreateHrisEmployeeRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedHrisEmployeeInput: components.UnifiedHrisEmployeeInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedHrisEmployeeInput: "unifiedHrisEmployeeInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedHrisEmployeeInput: components.UnifiedHrisEmployeeInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateHrisEmployeeRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedHrisEmployeeInput: components.UnifiedHrisEmployeeInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedHrisEmployeeInput: "UnifiedHrisEmployeeInput",
            });
        });
}

/** @internal */
export namespace CreateHrisEmployeeResponse$ {
    export const inboundSchema: z.ZodType<CreateHrisEmployeeResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            UnifiedHrisEmployeeOutput:
                components.UnifiedHrisEmployeeOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedHrisEmployeeOutput: "unifiedHrisEmployeeOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedHrisEmployeeOutput?: components.UnifiedHrisEmployeeOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateHrisEmployeeResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedHrisEmployeeOutput:
                components.UnifiedHrisEmployeeOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedHrisEmployeeOutput: "UnifiedHrisEmployeeOutput",
            });
        });
}
