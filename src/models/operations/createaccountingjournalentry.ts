/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateAccountingJournalEntryRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Accounting software.
     */
    remoteData?: boolean | undefined;
    unifiedAccountingJournalentryInput: components.UnifiedAccountingJournalentryInput;
};

export type CreateAccountingJournalEntryResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedAccountingJournalentryOutput?:
        | components.UnifiedAccountingJournalentryOutput
        | undefined;
};

/** @internal */
export namespace CreateAccountingJournalEntryRequest$ {
    export const inboundSchema: z.ZodType<
        CreateAccountingJournalEntryRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedAccountingJournalentryInput:
                components.UnifiedAccountingJournalentryInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedAccountingJournalentryInput: "unifiedAccountingJournalentryInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedAccountingJournalentryInput: components.UnifiedAccountingJournalentryInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateAccountingJournalEntryRequest
    > = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedAccountingJournalentryInput:
                components.UnifiedAccountingJournalentryInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedAccountingJournalentryInput: "UnifiedAccountingJournalentryInput",
            });
        });
}

/** @internal */
export namespace CreateAccountingJournalEntryResponse$ {
    export const inboundSchema: z.ZodType<
        CreateAccountingJournalEntryResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            UnifiedAccountingJournalentryOutput:
                components.UnifiedAccountingJournalentryOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedAccountingJournalentryOutput: "unifiedAccountingJournalentryOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedAccountingJournalentryOutput?:
            | components.UnifiedAccountingJournalentryOutput$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateAccountingJournalEntryResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedAccountingJournalentryOutput:
                components.UnifiedAccountingJournalentryOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedAccountingJournalentryOutput: "UnifiedAccountingJournalentryOutput",
            });
        });
}
