/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateTicketingAttachmentRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Ticketing software.
     */
    remoteData?: boolean | undefined;
    unifiedTicketingAttachmentInput: components.UnifiedTicketingAttachmentInput;
};

export type CreateTicketingAttachmentResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedTicketingAttachmentOutput?: components.UnifiedTicketingAttachmentOutput | undefined;
};

/** @internal */
export namespace CreateTicketingAttachmentRequest$ {
    export const inboundSchema: z.ZodType<CreateTicketingAttachmentRequest, z.ZodTypeDef, unknown> =
        z
            .object({
                "x-connection-token": z.string(),
                remote_data: z.boolean().optional(),
                UnifiedTicketingAttachmentInput:
                    components.UnifiedTicketingAttachmentInput$.inboundSchema,
            })
            .transform((v) => {
                return remap$(v, {
                    "x-connection-token": "xConnectionToken",
                    remote_data: "remoteData",
                    UnifiedTicketingAttachmentInput: "unifiedTicketingAttachmentInput",
                });
            });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedTicketingAttachmentInput: components.UnifiedTicketingAttachmentInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateTicketingAttachmentRequest
    > = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedTicketingAttachmentInput:
                components.UnifiedTicketingAttachmentInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedTicketingAttachmentInput: "UnifiedTicketingAttachmentInput",
            });
        });
}

/** @internal */
export namespace CreateTicketingAttachmentResponse$ {
    export const inboundSchema: z.ZodType<
        CreateTicketingAttachmentResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            UnifiedTicketingAttachmentOutput:
                components.UnifiedTicketingAttachmentOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedTicketingAttachmentOutput: "unifiedTicketingAttachmentOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedTicketingAttachmentOutput?:
            | components.UnifiedTicketingAttachmentOutput$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateTicketingAttachmentResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedTicketingAttachmentOutput:
                components.UnifiedTicketingAttachmentOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedTicketingAttachmentOutput: "UnifiedTicketingAttachmentOutput",
            });
        });
}
