/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateCrmContactRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original CRM software.
     */
    remoteData?: boolean | undefined;
    unifiedCrmContactInput: components.UnifiedCrmContactInput;
};

export type CreateCrmContactResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedCrmContactOutput?: components.UnifiedCrmContactOutput | undefined;
};

/** @internal */
export const CreateCrmContactRequest$inboundSchema: z.ZodType<
    CreateCrmContactRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedCrmContactInput: components.UnifiedCrmContactInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedCrmContactInput: "unifiedCrmContactInput",
        });
    });

/** @internal */
export type CreateCrmContactRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedCrmContactInput: components.UnifiedCrmContactInput$Outbound;
};

/** @internal */
export const CreateCrmContactRequest$outboundSchema: z.ZodType<
    CreateCrmContactRequest$Outbound,
    z.ZodTypeDef,
    CreateCrmContactRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedCrmContactInput: components.UnifiedCrmContactInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedCrmContactInput: "UnifiedCrmContactInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCrmContactRequest$ {
    /** @deprecated use `CreateCrmContactRequest$inboundSchema` instead. */
    export const inboundSchema = CreateCrmContactRequest$inboundSchema;
    /** @deprecated use `CreateCrmContactRequest$outboundSchema` instead. */
    export const outboundSchema = CreateCrmContactRequest$outboundSchema;
    /** @deprecated use `CreateCrmContactRequest$Outbound` instead. */
    export type Outbound = CreateCrmContactRequest$Outbound;
}

/** @internal */
export const CreateCrmContactResponse$inboundSchema: z.ZodType<
    CreateCrmContactResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        UnifiedCrmContactOutput: components.UnifiedCrmContactOutput$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            UnifiedCrmContactOutput: "unifiedCrmContactOutput",
        });
    });

/** @internal */
export type CreateCrmContactResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    UnifiedCrmContactOutput?: components.UnifiedCrmContactOutput$Outbound | undefined;
};

/** @internal */
export const CreateCrmContactResponse$outboundSchema: z.ZodType<
    CreateCrmContactResponse$Outbound,
    z.ZodTypeDef,
    CreateCrmContactResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        unifiedCrmContactOutput: components.UnifiedCrmContactOutput$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            unifiedCrmContactOutput: "UnifiedCrmContactOutput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCrmContactResponse$ {
    /** @deprecated use `CreateCrmContactResponse$inboundSchema` instead. */
    export const inboundSchema = CreateCrmContactResponse$inboundSchema;
    /** @deprecated use `CreateCrmContactResponse$outboundSchema` instead. */
    export const outboundSchema = CreateCrmContactResponse$outboundSchema;
    /** @deprecated use `CreateCrmContactResponse$Outbound` instead. */
    export type Outbound = CreateCrmContactResponse$Outbound;
}
