/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateTicketingTicketRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original Ticketing software.
   */
  remoteData?: boolean | undefined;
  unifiedTicketingTicketInput: components.UnifiedTicketingTicketInput;
};

/** @internal */
export const CreateTicketingTicketRequest$inboundSchema: z.ZodType<
  CreateTicketingTicketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  UnifiedTicketingTicketInput:
    components.UnifiedTicketingTicketInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
    "UnifiedTicketingTicketInput": "unifiedTicketingTicketInput",
  });
});

/** @internal */
export type CreateTicketingTicketRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  UnifiedTicketingTicketInput: components.UnifiedTicketingTicketInput$Outbound;
};

/** @internal */
export const CreateTicketingTicketRequest$outboundSchema: z.ZodType<
  CreateTicketingTicketRequest$Outbound,
  z.ZodTypeDef,
  CreateTicketingTicketRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  unifiedTicketingTicketInput:
    components.UnifiedTicketingTicketInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
    unifiedTicketingTicketInput: "UnifiedTicketingTicketInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTicketingTicketRequest$ {
  /** @deprecated use `CreateTicketingTicketRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTicketingTicketRequest$inboundSchema;
  /** @deprecated use `CreateTicketingTicketRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTicketingTicketRequest$outboundSchema;
  /** @deprecated use `CreateTicketingTicketRequest$Outbound` instead. */
  export type Outbound = CreateTicketingTicketRequest$Outbound;
}

export function createTicketingTicketRequestToJSON(
  createTicketingTicketRequest: CreateTicketingTicketRequest,
): string {
  return JSON.stringify(
    CreateTicketingTicketRequest$outboundSchema.parse(
      createTicketingTicketRequest,
    ),
  );
}

export function createTicketingTicketRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTicketingTicketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTicketingTicketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTicketingTicketRequest' from JSON`,
  );
}
