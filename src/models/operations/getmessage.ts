/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type GetMessageRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * id of the message you want to retrieve.
     */
    id: string;
    /**
     * Set to true to include data from the original Marketingautomation software.
     */
    remoteData?: boolean | undefined;
};

export type GetMessageResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedMarketingautomationMessageOutput?:
        | components.UnifiedMarketingautomationMessageOutput
        | undefined;
};

/** @internal */
export namespace GetMessageRequest$ {
    export const inboundSchema: z.ZodType<GetMessageRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            id: z.string(),
            remote_data: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        id: string;
        remote_data?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMessageRequest> = z
        .object({
            xConnectionToken: z.string(),
            id: z.string(),
            remoteData: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
            });
        });
}

/** @internal */
export namespace GetMessageResponse$ {
    export const inboundSchema: z.ZodType<GetMessageResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            UnifiedMarketingautomationMessageOutput:
                components.UnifiedMarketingautomationMessageOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedMarketingautomationMessageOutput: "unifiedMarketingautomationMessageOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedMarketingautomationMessageOutput?:
            | components.UnifiedMarketingautomationMessageOutput$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMessageResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedMarketingautomationMessageOutput:
                components.UnifiedMarketingautomationMessageOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedMarketingautomationMessageOutput: "UnifiedMarketingautomationMessageOutput",
            });
        });
}
