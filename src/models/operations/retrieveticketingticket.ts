/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type RetrieveTicketingTicketRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * id of the `ticket` you want to retrive.
     */
    id: string;
    /**
     * Set to true to include data from the original Ticketing software.
     */
    remoteData?: boolean | undefined;
};

export type RetrieveTicketingTicketResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedTicketingTicketOutput?: components.UnifiedTicketingTicketOutput | undefined;
};

/** @internal */
export namespace RetrieveTicketingTicketRequest$ {
    export const inboundSchema: z.ZodType<RetrieveTicketingTicketRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            id: z.string(),
            remote_data: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        id: string;
        remote_data?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RetrieveTicketingTicketRequest> =
        z
            .object({
                xConnectionToken: z.string(),
                id: z.string(),
                remoteData: z.boolean().optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    xConnectionToken: "x-connection-token",
                    remoteData: "remote_data",
                });
            });
}

/** @internal */
export namespace RetrieveTicketingTicketResponse$ {
    export const inboundSchema: z.ZodType<RetrieveTicketingTicketResponse, z.ZodTypeDef, unknown> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                UnifiedTicketingTicketOutput:
                    components.UnifiedTicketingTicketOutput$.inboundSchema.optional(),
            })
            .transform((v) => {
                return remap$(v, {
                    HttpMeta: "httpMeta",
                    UnifiedTicketingTicketOutput: "unifiedTicketingTicketOutput",
                });
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedTicketingTicketOutput?:
            | components.UnifiedTicketingTicketOutput$.Outbound
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        RetrieveTicketingTicketResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedTicketingTicketOutput:
                components.UnifiedTicketingTicketOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedTicketingTicketOutput: "UnifiedTicketingTicketOutput",
            });
        });
}
