/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListCrmContactsRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original software.
     */
    remoteData?: boolean | undefined;
    /**
     * Set to get the number of records.
     */
    limit?: number | undefined;
    /**
     * Set to get the number of records after this cursor.
     */
    cursor?: string | undefined;
};

export type ListCrmContactsResponseBody = {
    prevCursor: string;
    nextCursor: string;
    data: Array<components.UnifiedCrmContactOutput>;
};

export type ListCrmContactsResponse = {
    httpMeta: components.HTTPMetadata;
    object?: ListCrmContactsResponseBody | undefined;
};

/** @internal */
export const ListCrmContactsRequest$inboundSchema: z.ZodType<
    ListCrmContactsRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        limit: z.number().default(50),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
        });
    });

/** @internal */
export type ListCrmContactsRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    limit: number;
    cursor?: string | undefined;
};

/** @internal */
export const ListCrmContactsRequest$outboundSchema: z.ZodType<
    ListCrmContactsRequest$Outbound,
    z.ZodTypeDef,
    ListCrmContactsRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        limit: z.number().default(50),
        cursor: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCrmContactsRequest$ {
    /** @deprecated use `ListCrmContactsRequest$inboundSchema` instead. */
    export const inboundSchema = ListCrmContactsRequest$inboundSchema;
    /** @deprecated use `ListCrmContactsRequest$outboundSchema` instead. */
    export const outboundSchema = ListCrmContactsRequest$outboundSchema;
    /** @deprecated use `ListCrmContactsRequest$Outbound` instead. */
    export type Outbound = ListCrmContactsRequest$Outbound;
}

/** @internal */
export const ListCrmContactsResponseBody$inboundSchema: z.ZodType<
    ListCrmContactsResponseBody,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        prev_cursor: z.string(),
        next_cursor: z.string(),
        data: z.array(components.UnifiedCrmContactOutput$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            prev_cursor: "prevCursor",
            next_cursor: "nextCursor",
        });
    });

/** @internal */
export type ListCrmContactsResponseBody$Outbound = {
    prev_cursor: string;
    next_cursor: string;
    data: Array<components.UnifiedCrmContactOutput$Outbound>;
};

/** @internal */
export const ListCrmContactsResponseBody$outboundSchema: z.ZodType<
    ListCrmContactsResponseBody$Outbound,
    z.ZodTypeDef,
    ListCrmContactsResponseBody
> = z
    .object({
        prevCursor: z.string(),
        nextCursor: z.string(),
        data: z.array(components.UnifiedCrmContactOutput$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            prevCursor: "prev_cursor",
            nextCursor: "next_cursor",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCrmContactsResponseBody$ {
    /** @deprecated use `ListCrmContactsResponseBody$inboundSchema` instead. */
    export const inboundSchema = ListCrmContactsResponseBody$inboundSchema;
    /** @deprecated use `ListCrmContactsResponseBody$outboundSchema` instead. */
    export const outboundSchema = ListCrmContactsResponseBody$outboundSchema;
    /** @deprecated use `ListCrmContactsResponseBody$Outbound` instead. */
    export type Outbound = ListCrmContactsResponseBody$Outbound;
}

/** @internal */
export const ListCrmContactsResponse$inboundSchema: z.ZodType<
    ListCrmContactsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        object: z.lazy(() => ListCrmContactsResponseBody$inboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
        });
    });

/** @internal */
export type ListCrmContactsResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    object?: ListCrmContactsResponseBody$Outbound | undefined;
};

/** @internal */
export const ListCrmContactsResponse$outboundSchema: z.ZodType<
    ListCrmContactsResponse$Outbound,
    z.ZodTypeDef,
    ListCrmContactsResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        object: z.lazy(() => ListCrmContactsResponseBody$outboundSchema).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCrmContactsResponse$ {
    /** @deprecated use `ListCrmContactsResponse$inboundSchema` instead. */
    export const inboundSchema = ListCrmContactsResponse$inboundSchema;
    /** @deprecated use `ListCrmContactsResponse$outboundSchema` instead. */
    export const outboundSchema = ListCrmContactsResponse$outboundSchema;
    /** @deprecated use `ListCrmContactsResponse$Outbound` instead. */
    export type Outbound = ListCrmContactsResponse$Outbound;
}
