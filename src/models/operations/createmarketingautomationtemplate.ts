/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateMarketingautomationTemplateRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original Marketingautomation software.
   */
  remoteData?: boolean | undefined;
  unifiedMarketingautomationTemplateInput:
    components.UnifiedMarketingautomationTemplateInput;
};

/** @internal */
export const CreateMarketingautomationTemplateRequest$inboundSchema: z.ZodType<
  CreateMarketingautomationTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  UnifiedMarketingautomationTemplateInput:
    components.UnifiedMarketingautomationTemplateInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
    "UnifiedMarketingautomationTemplateInput":
      "unifiedMarketingautomationTemplateInput",
  });
});

/** @internal */
export type CreateMarketingautomationTemplateRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  UnifiedMarketingautomationTemplateInput:
    components.UnifiedMarketingautomationTemplateInput$Outbound;
};

/** @internal */
export const CreateMarketingautomationTemplateRequest$outboundSchema: z.ZodType<
  CreateMarketingautomationTemplateRequest$Outbound,
  z.ZodTypeDef,
  CreateMarketingautomationTemplateRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  unifiedMarketingautomationTemplateInput:
    components.UnifiedMarketingautomationTemplateInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
    unifiedMarketingautomationTemplateInput:
      "UnifiedMarketingautomationTemplateInput",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMarketingautomationTemplateRequest$ {
  /** @deprecated use `CreateMarketingautomationTemplateRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateMarketingautomationTemplateRequest$inboundSchema;
  /** @deprecated use `CreateMarketingautomationTemplateRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateMarketingautomationTemplateRequest$outboundSchema;
  /** @deprecated use `CreateMarketingautomationTemplateRequest$Outbound` instead. */
  export type Outbound = CreateMarketingautomationTemplateRequest$Outbound;
}

export function createMarketingautomationTemplateRequestToJSON(
  createMarketingautomationTemplateRequest:
    CreateMarketingautomationTemplateRequest,
): string {
  return JSON.stringify(
    CreateMarketingautomationTemplateRequest$outboundSchema.parse(
      createMarketingautomationTemplateRequest,
    ),
  );
}

export function createMarketingautomationTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateMarketingautomationTemplateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateMarketingautomationTemplateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateMarketingautomationTemplateRequest' from JSON`,
  );
}
