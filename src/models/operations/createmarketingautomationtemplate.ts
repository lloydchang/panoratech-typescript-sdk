/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateMarketingautomationTemplateRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Marketingautomation software.
     */
    remoteData?: boolean | undefined;
    unifiedMarketingautomationTemplateInput: components.UnifiedMarketingautomationTemplateInput;
};

export type CreateMarketingautomationTemplateResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedMarketingautomationTemplateOutput?:
        | components.UnifiedMarketingautomationTemplateOutput
        | undefined;
};

/** @internal */
export const CreateMarketingautomationTemplateRequest$inboundSchema: z.ZodType<
    CreateMarketingautomationTemplateRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        "x-connection-token": z.string(),
        remote_data: z.boolean().optional(),
        UnifiedMarketingautomationTemplateInput:
            components.UnifiedMarketingautomationTemplateInput$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            "x-connection-token": "xConnectionToken",
            remote_data: "remoteData",
            UnifiedMarketingautomationTemplateInput: "unifiedMarketingautomationTemplateInput",
        });
    });

/** @internal */
export type CreateMarketingautomationTemplateRequest$Outbound = {
    "x-connection-token": string;
    remote_data?: boolean | undefined;
    UnifiedMarketingautomationTemplateInput: components.UnifiedMarketingautomationTemplateInput$Outbound;
};

/** @internal */
export const CreateMarketingautomationTemplateRequest$outboundSchema: z.ZodType<
    CreateMarketingautomationTemplateRequest$Outbound,
    z.ZodTypeDef,
    CreateMarketingautomationTemplateRequest
> = z
    .object({
        xConnectionToken: z.string(),
        remoteData: z.boolean().optional(),
        unifiedMarketingautomationTemplateInput:
            components.UnifiedMarketingautomationTemplateInput$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            xConnectionToken: "x-connection-token",
            remoteData: "remote_data",
            unifiedMarketingautomationTemplateInput: "UnifiedMarketingautomationTemplateInput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMarketingautomationTemplateRequest$ {
    /** @deprecated use `CreateMarketingautomationTemplateRequest$inboundSchema` instead. */
    export const inboundSchema = CreateMarketingautomationTemplateRequest$inboundSchema;
    /** @deprecated use `CreateMarketingautomationTemplateRequest$outboundSchema` instead. */
    export const outboundSchema = CreateMarketingautomationTemplateRequest$outboundSchema;
    /** @deprecated use `CreateMarketingautomationTemplateRequest$Outbound` instead. */
    export type Outbound = CreateMarketingautomationTemplateRequest$Outbound;
}

/** @internal */
export const CreateMarketingautomationTemplateResponse$inboundSchema: z.ZodType<
    CreateMarketingautomationTemplateResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        HttpMeta: components.HTTPMetadata$inboundSchema,
        UnifiedMarketingautomationTemplateOutput:
            components.UnifiedMarketingautomationTemplateOutput$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            HttpMeta: "httpMeta",
            UnifiedMarketingautomationTemplateOutput: "unifiedMarketingautomationTemplateOutput",
        });
    });

/** @internal */
export type CreateMarketingautomationTemplateResponse$Outbound = {
    HttpMeta: components.HTTPMetadata$Outbound;
    UnifiedMarketingautomationTemplateOutput?:
        | components.UnifiedMarketingautomationTemplateOutput$Outbound
        | undefined;
};

/** @internal */
export const CreateMarketingautomationTemplateResponse$outboundSchema: z.ZodType<
    CreateMarketingautomationTemplateResponse$Outbound,
    z.ZodTypeDef,
    CreateMarketingautomationTemplateResponse
> = z
    .object({
        httpMeta: components.HTTPMetadata$outboundSchema,
        unifiedMarketingautomationTemplateOutput:
            components.UnifiedMarketingautomationTemplateOutput$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            httpMeta: "HttpMeta",
            unifiedMarketingautomationTemplateOutput: "UnifiedMarketingautomationTemplateOutput",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMarketingautomationTemplateResponse$ {
    /** @deprecated use `CreateMarketingautomationTemplateResponse$inboundSchema` instead. */
    export const inboundSchema = CreateMarketingautomationTemplateResponse$inboundSchema;
    /** @deprecated use `CreateMarketingautomationTemplateResponse$outboundSchema` instead. */
    export const outboundSchema = CreateMarketingautomationTemplateResponse$outboundSchema;
    /** @deprecated use `CreateMarketingautomationTemplateResponse$Outbound` instead. */
    export type Outbound = CreateMarketingautomationTemplateResponse$Outbound;
}
