/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type CreateCrmEngagementRequest = {
    /**
     * The connection token
     */
    xConnectionToken: string;
    /**
     * Set to true to include data from the original Crm software.
     */
    remoteData?: boolean | undefined;
    unifiedCrmEngagementInput: components.UnifiedCrmEngagementInput;
};

export type CreateCrmEngagementResponse = {
    httpMeta: components.HTTPMetadata;
    unifiedCrmEngagementOutput?: components.UnifiedCrmEngagementOutput | undefined;
};

/** @internal */
export namespace CreateCrmEngagementRequest$ {
    export const inboundSchema: z.ZodType<CreateCrmEngagementRequest, z.ZodTypeDef, unknown> = z
        .object({
            "x-connection-token": z.string(),
            remote_data: z.boolean().optional(),
            UnifiedCrmEngagementInput: components.UnifiedCrmEngagementInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                "x-connection-token": "xConnectionToken",
                remote_data: "remoteData",
                UnifiedCrmEngagementInput: "unifiedCrmEngagementInput",
            });
        });

    export type Outbound = {
        "x-connection-token": string;
        remote_data?: boolean | undefined;
        UnifiedCrmEngagementInput: components.UnifiedCrmEngagementInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateCrmEngagementRequest> = z
        .object({
            xConnectionToken: z.string(),
            remoteData: z.boolean().optional(),
            unifiedCrmEngagementInput: components.UnifiedCrmEngagementInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                xConnectionToken: "x-connection-token",
                remoteData: "remote_data",
                unifiedCrmEngagementInput: "UnifiedCrmEngagementInput",
            });
        });
}

/** @internal */
export namespace CreateCrmEngagementResponse$ {
    export const inboundSchema: z.ZodType<CreateCrmEngagementResponse, z.ZodTypeDef, unknown> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            UnifiedCrmEngagementOutput:
                components.UnifiedCrmEngagementOutput$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                HttpMeta: "httpMeta",
                UnifiedCrmEngagementOutput: "unifiedCrmEngagementOutput",
            });
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        UnifiedCrmEngagementOutput?: components.UnifiedCrmEngagementOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateCrmEngagementResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            unifiedCrmEngagementOutput:
                components.UnifiedCrmEngagementOutput$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                httpMeta: "HttpMeta",
                unifiedCrmEngagementOutput: "UnifiedCrmEngagementOutput",
            });
        });
}
