/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type ListHrisBenefitsRequest = {
  /**
   * The connection token
   */
  xConnectionToken: string;
  /**
   * Set to true to include data from the original software.
   */
  remoteData?: boolean | undefined;
  /**
   * Set to get the number of records.
   */
  limit?: number | undefined;
  /**
   * Set to get the number of records after this cursor.
   */
  cursor?: string | undefined;
};

export type ListHrisBenefitsResponseBody = {
  prevCursor: string | null;
  nextCursor: string | null;
  data: Array<components.UnifiedHrisBenefitOutput>;
};

export type ListHrisBenefitsResponse = {
  result: ListHrisBenefitsResponseBody;
};

/** @internal */
export const ListHrisBenefitsRequest$inboundSchema: z.ZodType<
  ListHrisBenefitsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "x-connection-token": z.string(),
  remote_data: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "x-connection-token": "xConnectionToken",
    "remote_data": "remoteData",
  });
});

/** @internal */
export type ListHrisBenefitsRequest$Outbound = {
  "x-connection-token": string;
  remote_data?: boolean | undefined;
  limit: number;
  cursor?: string | undefined;
};

/** @internal */
export const ListHrisBenefitsRequest$outboundSchema: z.ZodType<
  ListHrisBenefitsRequest$Outbound,
  z.ZodTypeDef,
  ListHrisBenefitsRequest
> = z.object({
  xConnectionToken: z.string(),
  remoteData: z.boolean().optional(),
  limit: z.number().default(50),
  cursor: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    xConnectionToken: "x-connection-token",
    remoteData: "remote_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListHrisBenefitsRequest$ {
  /** @deprecated use `ListHrisBenefitsRequest$inboundSchema` instead. */
  export const inboundSchema = ListHrisBenefitsRequest$inboundSchema;
  /** @deprecated use `ListHrisBenefitsRequest$outboundSchema` instead. */
  export const outboundSchema = ListHrisBenefitsRequest$outboundSchema;
  /** @deprecated use `ListHrisBenefitsRequest$Outbound` instead. */
  export type Outbound = ListHrisBenefitsRequest$Outbound;
}

/** @internal */
export const ListHrisBenefitsResponseBody$inboundSchema: z.ZodType<
  ListHrisBenefitsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  prev_cursor: z.nullable(z.string()),
  next_cursor: z.nullable(z.string()),
  data: z.array(components.UnifiedHrisBenefitOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "prev_cursor": "prevCursor",
    "next_cursor": "nextCursor",
  });
});

/** @internal */
export type ListHrisBenefitsResponseBody$Outbound = {
  prev_cursor: string | null;
  next_cursor: string | null;
  data: Array<components.UnifiedHrisBenefitOutput$Outbound>;
};

/** @internal */
export const ListHrisBenefitsResponseBody$outboundSchema: z.ZodType<
  ListHrisBenefitsResponseBody$Outbound,
  z.ZodTypeDef,
  ListHrisBenefitsResponseBody
> = z.object({
  prevCursor: z.nullable(z.string()),
  nextCursor: z.nullable(z.string()),
  data: z.array(components.UnifiedHrisBenefitOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    prevCursor: "prev_cursor",
    nextCursor: "next_cursor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListHrisBenefitsResponseBody$ {
  /** @deprecated use `ListHrisBenefitsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListHrisBenefitsResponseBody$inboundSchema;
  /** @deprecated use `ListHrisBenefitsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListHrisBenefitsResponseBody$outboundSchema;
  /** @deprecated use `ListHrisBenefitsResponseBody$Outbound` instead. */
  export type Outbound = ListHrisBenefitsResponseBody$Outbound;
}

/** @internal */
export const ListHrisBenefitsResponse$inboundSchema: z.ZodType<
  ListHrisBenefitsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => ListHrisBenefitsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListHrisBenefitsResponse$Outbound = {
  Result: ListHrisBenefitsResponseBody$Outbound;
};

/** @internal */
export const ListHrisBenefitsResponse$outboundSchema: z.ZodType<
  ListHrisBenefitsResponse$Outbound,
  z.ZodTypeDef,
  ListHrisBenefitsResponse
> = z.object({
  result: z.lazy(() => ListHrisBenefitsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListHrisBenefitsResponse$ {
  /** @deprecated use `ListHrisBenefitsResponse$inboundSchema` instead. */
  export const inboundSchema = ListHrisBenefitsResponse$inboundSchema;
  /** @deprecated use `ListHrisBenefitsResponse$outboundSchema` instead. */
  export const outboundSchema = ListHrisBenefitsResponse$outboundSchema;
  /** @deprecated use `ListHrisBenefitsResponse$Outbound` instead. */
  export type Outbound = ListHrisBenefitsResponse$Outbound;
}
